<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[HaHack]]></title>
  <subtitle><![CDATA[哈嘿！]]></subtitle>
  <link href="http://hahack.com/atom.xml" rel="self"/>
  <link href="http://hahack.com"/>
  <updated>2019-05-03T18:03:30.527Z</updated>
  <id>http://hahack.com/</id>
  <author>
    <name><![CDATA[Joseph Pan]]></name>
    <email><![CDATA[cs.wzpan@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[wukong-robot：一个更加优雅的中文智能音箱项目]]></title>
    <link href="http://hahack.com/codes/wukong-robot-intro/"/>
    <id>http://hahack.com/codes/wukong-robot-intro/</id>
    <published>2019-04-24T07:25:32.000Z</published>
    <updated>2019-05-03T17:40:35.375Z</updated>
    <content type="html"><![CDATA[<h2 id="dingdang-robot-之殇">dingdang-robot 之殇</h2>
<p>在两年前，我做了第一个智能音箱项目 <a href="https://www.hahack.com/codes/dingdang-robot-intro/" target="_blank" rel="external">dingdang-robot</a> 。在去年 7 月加入上报统计后，在不到一年的时间里，这个项目已经运行在 1000+ 台设备中，被唤醒了 128,000+ 次。截至今天，这个项目的个人版和社区版在 Github 上总共获得了 2,600+ 个 stars ，820+ 次 forks。</p>
<p>在我<a href="https://www.hahack.com/life/2018-montage/" target="_blank" rel="external">去年的一篇年度总结中</a>，我提到因为 dingdang-robot 本身维护上的困难，我将项目迁移到了 <a href="https://github.com/dingdang-robot/" target="_blank" rel="external">dingdang-robot 组织</a>交由社区进行维护。很遗憾的是，即使迁到了 dingdang-robot 组织，由于组织维护者们都并不是全职维护这个项目，而且硬件和操作系统上的差异始终给 dingdang-robot 的维护带来了很大的问题，所以取得的效果并不理想。而且随着自己能力的不断提升，我对 dingdang-robot 里头的代码也越发不满意：</p>
<ol>
<li>dingdang-robot 是基于 Python 2 的，在 Python 3 环境里跑不起来。而 Python 2 已经停止维护了。</li>
<li>dingdang-robot 的热词唤醒（KWS）复用的是 jasper-client 的那套，基于 PyAudio 自己实现录音和 VAD ，基于 PocketSphinx 实现热词唤醒。然而那套录音和VAD代码我个人觉得写得并不鲁棒，为了避免各种边界情况我不得不加了一些 <code>try...catch</code> ，虽然没人发现这一点，但我自己是过不了自己那一关的，每每想到自己在用一套有问题的代码作为别人的入口就像是留一个坑叫别人跳进来，内心觉得很有罪恶感；另外 PocketSphinx 的安装非常复杂，虽然我提供了树莓派的镜像，但是很多人还是希望手动安装，而 PocketSphinx 对环境要求也很苛刻，所以总会遇到各种奇怪的问题，而我又不能复现；</li>
<li>还有一些使用上的便利性问题。比如没有更新提示，有时候修了一个bug，别人不知道，提了issue后我得告诉他请更新到最新；再比如使用YAML作为配置文件，但是很多用户不懂YAML的语法格式，常见的比如把半角冒号（<code>:</code>）打成全角（<code>：</code>），或者冒号后没有跟着空格再写键值；再比如当初我处理 log 的打印也设计得比较傻逼，为了写到文件里头，直接用的是重定向，完全没有考虑用 FileHandler 这种东西。</li>
</ol>
<p>到了今年，我决定对 dingdang-robot 进行完全重写，做出一个更加 <strong>优雅、灵活、鲁棒</strong> 的版本。<a id="more"></a></p>
<p>为了区别于以前的版本，我决定起给这个新版本起一个新的名字。我觉得三个字的唤醒词误唤醒率和长度都是比较理想的，所以我想取一个三个字的名字，另外还要能提现新版本的强大之处。于是我想到了“孙悟空”<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>后来才发现又一次跟优必选和腾讯叮当的合作项目重名了，real尴尬 😹 。</span></span></span>。</p>
<p><img src="/images/wukong-robot-intro/plan-1.jpg" alt=""></p>
<p><img src="/images/wukong-robot-intro/plan-2.jpg" alt=""></p>
<p>于是，利用整个春节的假期 <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>你没看错，我整个春节都用来写代码去了</span></span></span>。正月初五那天，<a href="https://github.com/wzpan/wukong-robot" target="_blank" rel="external">wukong-robot</a> 1.0 正式发布了。</p>
<p>以下是一段 wukong-robot 的定制版本 ycy-robot 的演示视频（如果访问不了，可以<a href="https://www.bilibili.com/video/av48873736?from=search&amp;seid=2193314296981067836" target="_blank" rel="external">前往观看</a>）：</p>
<center>
<iframe src="//player.bilibili.com/player.html?aid=50685517&cid=88726713&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="80%" height="460px"> </iframe>
</center>
<h2 id="wukong-robot-重生之路">wukong-robot 重生之路</h2>
<p>按照惯例，下面总结一下这个项目的一些开发心得。</p>
<h3 id="项目管理：github-project-boards">项目管理：Github project boards</h3>
<p><a href="https://help.github.com/en/articles/about-project-boards" target="_blank" rel="external">project boards</a> 是 Github 近期推出的一个新功能，它最大的用处是提供了类似 trello 的看板。我在开发维护 wukong-robot 的时候，也使用 project boards 管理这个项目。于是建了一个 <a href="https://github.com/users/wzpan/projects/1" target="_blank" rel="external">wukong-project</a> 。</p>
<p><img src="/images/wukong-robot-intro/wukong-project.png" alt="wukong project boards"></p>
<p>我把项目分成了 <code>To do</code>、<code>In Progress</code>、<code>Done</code>、<code>Pending</code> 几个状态。在规划第一个版本的时候，我就在 <code>To do</code> 栏中提了 10 个左右的需求。这使得我的项目可以朝着明确的目标演进。不过，在开发的时候，时常还会有一些新的想法冒出来，这时候我也会尽快写入需求池中。到真正发布 1.0 的时候，我已经完成了 21 个需求。</p>
<p>project boards 的另一个作用在于充当了项目的 roadmap 。你可以看到这个项目有哪些计划要做的需求，有哪些则是我正在开发中的需求。有兴趣的朋友还能参与进来帮忙完成其中的部分需求任务。</p>
<p>project boards 还有一个很有意思的特性：可以和 Github 的 issues 和 pull requests 等板块打通。当有人给你提 issue 或 pull request 的时候，可以设置自动追加到 <code>To do</code> 栏里。而当 issue 被 close 或者 pull request 被 accept 后，相应的条目可以自动挪入 <code>Done</code> 一栏。</p>
<p><img src="/images/wukong-robot-intro/automation.png" alt="project boards 的 automation 特性"></p>
<p>不过，project boards 实际用起来还是有一些问题：因为整个 wukong-robot 项目不仅包括本体，还包含了第三方插件库 wukong-contrib ，以及将来可能有的其他一些衍生客户端。所以我希望用一个 wukong-project 来同时管理几个仓库。所以 wukong-project 并不是挂靠在 wukong-robot 仓库下的，而是直接挂在我的账户下。但不知道是不是 Github 设计上的疏忽：即使我在 wukong-project 里 link 了多个仓库，那些仓库下的 project 页面并没有展示 wukong-project 😵 。这种情况下，project boards 的 automation 也玩不起来 —— wukong-robot 的新 issue 也不会自动往 wukong-project 里新增 <code>To do</code> 条目。等我发现这个问题的时候，我早已创建了几十个条目，而 Github 又不支持将 transfer project boards ，所以只能将就着这么用下去了。</p>
<h3 id="热词唤醒：snowboy">热词唤醒：snowboy</h3>
<p>如前面所述，dingdang-robot 早期沿用了 jasper-client 的那套热词唤醒和静音检测的逻辑。虽然后来我也尝试给 dingdang-robot 加入了 snowboy 的支持，但让我很失望的是它在树莓派上使用效果很糟糕，所以我一直没有把 snowboy 作为默认的热词唤醒引擎。后来我发现其实我错怪了 snowboy ：官方文档已经<a href="http://docs.kitt.ai/snowboy/#my-trained-model-works-well-on-laptops-but-not-on-pi-s" target="_blank" rel="external">清楚地提到了问题的原因</a>：而树莓派上或者其他板子上接的麦克风可能和 PC 上的麦克风的声音畸变差异非常大，所以现有的模型更加不能直接在树莓派上工作，否则效果会非常糟糕。</p>
<blockquote>
<p>This is due to the acoustic distortion that results from the different microphones. If you record your voice with two different microphones (one on your laptop and the other on your Pi) and then play them (play t.wav), you will hear that they sound very differently (even though it is the same voice)!</p>
</blockquote>
<p>了解到原因后，我在这个版本中去除了安装繁琐且中文识别较差的 PocketSphinx ，将 snowboy 作为主要的热词唤醒引擎。因为 snowboy 还提供了静音检测（VAD）的功能，所以我把原来 VAD 的代码全部去除，改为了直接使用 snowboy 的 VAD 。经过改写后，整个系统的稳定性和响应速度都有了质的提升。</p>
<p>不过，接入了 snowboy 后，整个交互模式就是先热词唤醒触发一个 <code>detected_callback</code> 的响应，说完指令后通过 <code>audio_callback</code> 将语音指令返回。有些时候我们并不想完全遵循这个形式：例如当我们希望 wukong-robot 能主动询问并澄清话术的时候，总是要求用户唤醒再说指令就显得整个交互很不智能了。于是我对 snowboydecorder 做了一点 hack ：仿照 <a href="https://github.com/wzpan/wukong-robot/blob/master/snowboy/snowboydecoder.py#L201" target="_blank" rel="external">HotwordDetector</a> 写了一个 <a href="https://github.com/wzpan/wukong-robot/blob/master/snowboy/snowboydecoder.py#L80" target="_blank" rel="external">ActiveListener</a> 用来实现主动询问用户的功能。有了这个 ActiveListener 之后，当插件需要主动询问用户问题时，可以在 <code>self.say()</code> 的 <code>onCompleted</code> 回调方法中直接执行 <code>self.activeListen()</code> 方法得到即拿到用户的指令内容。例如：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">onAsk</span><span class="params">(input)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> input:</div><div class="line">        self.say(<span class="string">"指令有误，请重新尝试"</span>, cache=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="comment"># 执行响应</span></div><div class="line">    ...</div><div class="line"></div><div class="line">self.say(<span class="string">"开始家庭助手控制，请在滴一声后说明内容"</span>, cache=<span class="keyword">True</span>, onCompleted=<span class="keyword">lambda</span>: onAsk(self.activeListen()))</div></pre></td></tr></table></figure></p>
<p>利用这个方法可以很方便地实现多轮对话以及<a href="https://wukong.hahack.com/#/official?id=geek%EF%BC%88%E6%9E%81%E5%AE%A2%E6%A8%A1%E5%BC%8F%EF%BC%89" target="_blank" rel="external">极客模式</a>。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>关于如何在 Python 工程中接入 snowboy ，我在<a href="https://ke.qq.com/course/387931" target="_blank" rel="external">一门 Python 课程</a>中有详细的介绍。如果你感兴趣的话，可以前往观看。<a href="https://ke.qq.com/course/385849" target="_blank" rel="external">课程的免费体验课部分</a>已经包含了热词唤醒的完整内容。</p>
</div></p>
<h3 id="技能插件重构：abstractplugin">技能插件重构：AbstractPlugin</h3>
<p>原来的 dingdang-robot 在处理插件接口的时候，并没有考虑到多轮对话的情况。每一次 query 都会轮询一遍所有插件。如果要让某个插件在用户指示退出前持续响应用户的 query ，那么就得为这个插件实现一个内部循环。而在这个内部循环里头，用户只能响应有限的指令。</p>
<p>例如，<a href="https://github.com/dingdang-robot/dingdang-contrib/blob/master/NetEaseMusic.py#L288" target="_blank" rel="external">NetEaseMusic</a> 插件在一个 <code>handleForever</code> 方法中进入了一个循环，在这个循环里头，只能响应“上一首”、“下一首”等音乐播放相关的指令。而有时候，我们在播放音乐的时候，也会突然间想问一下天气再回来继续播放。对于这种情况，dingdang-robot 的插件交互模式就只能先退出音乐播放，再问天气，再重新要求播放音乐。这样的设计并不够人性化。</p>
<p>wukong-robot 重新考虑了插件的设计。你可以为 wukong-robot 开发两类技能插件：</p>
<ol>
<li><strong>普通技能插件</strong>，适用于普通的查询、助手类技能。通常的交互模式是唤醒 wukong-robot 后，说出指令并触发该技能插件，由其完成处理并汇报结果。如果需要询问用户问题，则可以利用 <code>self.activeListen()</code> 方法进入主动聆听，从而实现多轮对话。</li>
<li><strong>沉浸式技能插件</strong>，适用于音乐、电台等技能。通常的交互模式是唤醒 wukong-robot 后，说出指令并触发该技能插件，由其进入该技能的沉浸式场景中。在该技能的沉浸式场景下，用户唤醒 wukong-robot 后，允许响应更多指令以完成更丰富的操作（例如“下一首歌”、“这是什么歌”等指令）。如果唤醒后只是简单的聊天，还允许 wukong-robot 在回答后恢复该技能的沉浸式场景（例如，用户在音乐场景中唤醒 wukong-robot 并问完时间后，wukong-robot 可以自动恢复音乐播放）。</li>
</ol>
<p>不论是哪种类型的插件，都只需继承同一个基类 <a href="https://www.hahack.com/wukong-robot/_modules/robot/sdk/AbstractPlugin.html#AbstractPlugin" target="_blank" rel="external"><code>robot.sdk.AbstractPlugin</code></a> ，并实现相应相关接口即可。其中：</p>
<ul>
<li>普通技能插件只需实现 <code>isValid()</code> 和 <code>handle()</code> 两个接口，分别用来判断用户指令是否适合交给该技能插件处理，以及如何处理；</li>
<li>沉浸式技能插件在普通技能插件的基础上，还需要设置 <code>IS_IMMERSIVE</code> 成员属性为 <code>True</code> ，此外还可以根据需求实现 <code>isValidImmersive()</code> 和 <code>restore()</code> 两个方法，分别用来支持沉浸模式下更多指令的响应以及恢复技能。</li>
</ul>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractPlugin</span><span class="params">(metaclass=ABCMeta)</span>:</span></div><div class="line">    <span class="string">""" 技能插件基类 """</span></div><div class="line"></div><div class="line">    SLUG = <span class="string">'AbstractPlugin'</span></div><div class="line">    IS_IMMERSIVE = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, con)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.IS_IMMERSIVE <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            self.isImmersive = self.IS_IMMERSIVE</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.isImmersive = <span class="keyword">False</span></div><div class="line">        self.priority = <span class="number">0</span></div><div class="line">        self.con = con</div><div class="line">        self.nlu = self.con.nlu</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self, src, delete=False, onCompleted=None, volume=<span class="number">1</span>)</span>:</span></div><div class="line">        self.con.play(src, delete, onCompleted, volume)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self, text, cache=False, onCompleted=None)</span>:</span></div><div class="line">        self.con.say(text, cache=cache, plugin=self.SLUG, onCompleted=onCompleted)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">activeListen</span><span class="params">(self, silent=False)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.con.activeListen(silent)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearImmersive</span><span class="params">(self)</span>:</span></div><div class="line">        self.con.setImmersiveMode(<span class="keyword">None</span>)</div><div class="line"></div><div class="line">    <span class="decorator">@abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, query, parsed)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        是否适合由该插件处理</div><div class="line"></div><div class="line">        参数：</div><div class="line">        query -- 用户的指令字符串</div><div class="line">        parsed -- 用户指令经过 NLU 解析后的结果</div><div class="line"></div><div class="line">        返回：</div><div class="line">        True: 适合由该插件处理</div><div class="line">        False: 不适合由该插件处理</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="decorator">@abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, query, parsed)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        处理逻辑</div><div class="line"></div><div class="line">        参数：</div><div class="line">        query -- 用户的指令字符串</div><div class="line">        parsed -- 用户指令经过 NLU 解析后的结果</div><div class="line">        """</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidImmersive</span><span class="params">(self, query, parsed)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        是否适合在沉浸模式下处理，</div><div class="line">        仅适用于有沉浸模式的插件（如音乐等）</div><div class="line">        当用户唤醒时，可以响应更多指令集。</div><div class="line">        例如：“"上一首"、"下一首" 等</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pause</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        暂停当前正在处理的任务，</div><div class="line">        当处于该沉浸模式下且被唤醒时，</div><div class="line">        将自动触发这个方法，</div><div class="line">        可以用于强制暂停一个耗时的操作        </div><div class="line">        """</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restore</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        恢复当前插件，</div><div class="line">        仅适用于有沉浸模式的插件（如音乐等）</div><div class="line">        当用户误唤醒或者唤醒进行闲聊后，</div><div class="line">        可以自动恢复当前插件的处理逻辑</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure></p>
<p>经过这次重构，所有的插件都继承自同一个基类。即使是需要多轮交互的沉浸式插件，用户不再需要为其编写类似 <code>handleForever()</code> 的循环，只需要关注核心的 query 处理即可。在沉浸式插件工作期间，wukong-robot 也支持响应其他技能的 query ，交给其他适合处理的技能插件处理，并在处理完成后根据情况恢复当前沉浸式插件的处理。作为对比，你可以看看 <a href="https://github.com/wzpan/wukong-robot/blob/master/plugins/LocalPlayer.py" target="_blank" rel="external">LocalPlayer</a> 插件，它的可读性要比 NetEaseMusic 插件强很多。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>关于如何为 wukong-robot 开发技能插件，可以阅读 wukong-robot 的 <a href="https://wukong.hahack.com/#/writing-skill" target="_blank" rel="external">插件开发教程</a> 。另外，在我的 <a href="https://ke.qq.com/course/387931" target="_blank" rel="external">Python 课程</a>的 <q>大脑模块和技能系统实现</q> 一章中将更加深入地介绍 wukong-robot 插件机制的实现原理。</p>
</div></p>
<h3 id="后台管理端：tornado">后台管理端：tornado</h3>
<p>早在 dingdang-robot 发布初期，我就有为它配套开发一个后台管理端的想法。但因为种种原因（<del>主要是因为懒</del>），这个想法一直拖着没有去做。于是借着这次项目重写，趁热打铁就把后台管理端也完成了。</p>
<p>因为对 Jinja 比较有好感，所以我起初是打算用 Flask 来写后台管理端。但后面发现 Flask 的信号机制不能直接在非主线程里工作，而直接放主线程又会跟另一个<a href="https://github.com/Kitt-AI/snowboy/issues/411" target="_blank" rel="external">必须工作在主线程的 snowboy</a> 有冲突。折腾了半天后我决定改为直接支持在非主线程工作的 tornado 。
后台管理端的技术栈主要包括：</p>
<ul>
<li>开发框架：<a href="https://www.tornadoweb.org/" target="_blank" rel="external">tornado</a></li>
<li>前端框架：<a href="https://getbootstrap.com/" target="_blank" rel="external">twitter-bootstrap</a> + <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a></li>
<li>Material Design 风格的悬浮录音按钮：<a href="https://github.com/nobitagit/material-floating-button" target="_blank" rel="external">material-floating-button</a></li>
<li>录音：<a href="https://github.com/chris-rudmin/opus-recorder" target="_blank" rel="external">opus-recorder</a></li>
<li>录音过程中的 spin：<a href="https://spin.js.org/" target="_blank" rel="external">spin.js</a></li>
<li>右上角的 toast 提示：<a href="https://github.com/CodeSeven/toastr" target="_blank" rel="external">toastr</a></li>
<li>进度条：<a href="https://github.com/usablica/progress.js" target="_blank" rel="external">progress.js</a></li>
</ul>
<p><img src="/images/wukong-robot-intro/wukong-admin.png" alt="wukong-robot 的后台管理端"></p>
<p>比较费脑的是鉴权部分。除了后台管理端需要设计登录界面以避免非法访问之外，我希望后台的接口能够开放 API 以支持其他配套客户端的接入，所以后端代码需要考虑两种访问来源的鉴权。</p>
<p>最初我使用 cookie 来鉴权，管理端登录成功后，就把用户设置的鉴权密钥 <code>validation</code> 字段存到 cookie 里头。前端在 Ajax 调用后端 API 时，可以直接从 <code>cookie</code> 里取出 <code>validation</code> 然后作为鉴权字段发给后台。然而 cookie 本身是明文保存的，这种做法会直接暴露用户的密钥，因此是一种很不安全的做法。</p>
<p>然后我尝试了使用 <code>secure_cookie</code> 来保存鉴权信息，然而因为 <code>secure_cookie</code> 是加了密的字段，前端没办法直接解析并传回给后端，所以又暂时放弃了这个做法。</p>
<p>再后来我发现还有一个 <code>csrf_cookies</code> ，可以用来防止跨站请求的问题。于是我很兴奋地加入了这个校验。但后面我发现这个跨站请求保护也只适用于站点本身的保护，因为 <code>xsrf_cookies</code> 的校验会在调用我们的接口实现方法前就完成，一旦加了这个校验后，其他客户端在调用 API 时也必须带上 <code>csrf_cookies</code> ，否则会直接抛出 <code>'_xsrf' argument missing from POST</code> 的错误。因此这个校验更适合用于纯 Web 站点，而不适合用于开放 API 的应用。</p>
<p>最后我转念一想：虽然前端没办法直接解析 <code>secure_cookie</code> 得到 validation ，但是 <code>secure_cookie</code> 也只是一个加了密的 cookie ，我依然可以取出 <code>secure_cookie</code> 里这个加了密的 <code>validation</code> 的值然后传给后台，而后台则可以使用 <code>get_cookie</code>（而不是 <code>get_secure_cookie</code> ）取出期望的加了密后的 <code>validation</code> 的值并与前端传过来的值进行比对，这样就实现了前端页面的鉴权；对于 API 的鉴权，则可以直接使用明文的 <code>validation</code> 并将其作为第三方客户端的一个配置。后端在鉴权时直接判断这个 <code>validation</code> 与后端的配置里的 <code>validation</code> 值是否相等即可。所以最终我完成了如下的一个带鉴权的基类：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidated</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.get_secure_cookie(<span class="string">'validation'</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> str(self.get_secure_cookie(<span class="string">"validation"</span>), encoding=<span class="string">'utf-8'</span>) == config.get(<span class="string">'/server/validate'</span>, <span class="string">''</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, validation)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="string">'"'</span> <span class="keyword">in</span> validation:</div><div class="line">            validation = validation.replace(<span class="string">'"'</span>, <span class="string">''</span>)</div><div class="line">        <span class="keyword">return</span> validation == config.get(<span class="string">'/server/validate'</span>, <span class="string">''</span>) <span class="keyword">or</span> validation == str(self.get_cookie(<span class="string">'validation'</span>))</div></pre></td></tr></table></figure></p>
<p>在配置页面，我在保存配置的时候加了 <code>yaml.load()</code> 检查，如果用户修改 YAML 有格式问题，将会被拒绝写入配置。另外，我还基于 watchdog 加入了对配置文件的监听：一旦配置文件发生修改，就触发配置的重新读取，从而实现无需重启更新大部分的配置。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8-*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> robot <span class="keyword">import</span> config</div><div class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> FileSystemEventHandler</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigMonitor</span><span class="params">(FileSystemEventHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conversation)</span>:</span></div><div class="line">        FileSystemEventHandler.__init__(self)</div><div class="line">        self._conversation = conversation</div><div class="line"></div><div class="line">    <span class="comment"># 文件修改</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span><span class="params">(self, event)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> event.is_directory:</div><div class="line">            config.reload()</div><div class="line">            self._conversation.reload()</div></pre></td></tr></table></figure></p>
<p>要说不太满意的地方，主要是首页的聊天消息更新机制。目前我是直接使用轮询的方式实现的 —— 前端会每隔 5 秒调用一次 <code>/gethistory</code> 接口，从而更新聊天记录。这种方式无疑是低效且浪费资源的做法。我曾经尝试将更新机制改成用 websocket 来实现，但后来发现手机端的浏览器几乎都不支持 websocket ，考虑到便携性的重要程度，我就放弃了这种实现。</p>
<p>后面我将尝试使用 tordano 的 <a href="https://www.tornadoweb.org/en/branch5.1/guide/security.html" target="_blank" rel="external">coroutine</a> 来实现长连接通信以及后端的主动更新，这会是一种更好的实现方案。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>我的 <a href="https://ke.qq.com/course/387931" target="_blank" rel="external">Python 课程</a>的整个 Part 3 将更加系统地介绍 wukong-robot 的后台管理端开发过程，欢迎前往了解。</p>
</div></p>
<h3 id="更新器：git-tag-scf">更新器：git tag + SCF</h3>
<p>在即将发布 wukong-robot 的时候，我突然想到应该给 wukong-robot 一个提示升级的功能。当检测到版本更新时，提示用户进行升级。</p>
<p><img src="https://hahack-1253537070.file.myqcloud.com/images/update.jpg" alt="wukong-robot 的提示升级"></p>
<p>于是我给 wukong-robot 的主仓库和插件仓库设计了一套基于 git 的更新机制：</p>
<ol>
<li>在两个仓库的根目录各维护一个 <code>VERSION</code> 文件用于记录当前的版本号，版本号使用 <a href="https://semver.org/" target="_blank" rel="external">Semantic Versioning</a> 标准；</li>
<li>当要发布新版本时，更新 <code>VERSION</code> 的版本号，并为其打一个新的 tag ；</li>
<li>客户端检查到有更新时，拉取到最新的代码，然后再切到对应的 tag 。实际执行的命令为 <code>git checkout master &amp;&amp; git pull &amp;&amp; git checkout TAG名</code> 。</li>
</ol>
<p>剩下的主要问题是检查更新的服务应该部署到哪里。当然，简单的搭一个更新检查服务器并不复杂，但服务器的维护成本比较高。如果后面我换了服务器，又得重新到另一个服务器搭一遍更新服务。另外，我并不太希望每次要发布新版本都得打开终端登录到我的服务器进行修改。最理想的应该是有个可以随时修改的 <q>云 json 串</q> 。于是我选择使用了腾讯云的无服务器函数（SCF）：把最新版本信息写成一个SCF，通过向SCF发请求完成版本更新检查。这样的好处是无需购买和维护服务器，无需到服务器发布代码，而且SCF提供了方便的在线编辑、版本管理和测试验证的能力，这比自己发版本还要靠谱的多。</p>
<p><img src="/images/wukong-robot-intro/scf.png" alt="使用腾讯云SCF实现更新检查"></p>
<h2 id="总结和展望">总结和展望</h2>
<p>wukong-robot 的改动如下：</p>
<ol>
<li>完全重写了 dingdang-robot 的大部分代码，新的架构我个人觉得足够漂亮。</li>
<li>原来的版本只能在 Linux 平台运行，而且 PocketSphinx 安装很苛刻，失败率很高，PocketSphinx 对中文的识别率也很一般。新版本使用 snowboy 取代 PocketSphinx ，无论是安装成本、稳定性、唤醒成功率都是质的飞跃。</li>
<li>提供了可视化的后台管理端，并且开放API。配套了配置页面、日志查看页面等管理页，大部分配置做到了免重启即改即生效。利用它可以轻松做出漂亮的交互界面，甚至开发出新的客户端，你可以类比为 Echo 一代到 Echo Show 的飞跃。</li>
<li>基于腾讯云 SCF 实现了版本更新检查，向专业的开源框架标准迈进。</li>
<li>docker 镜像安装支持，另外<a href="https://github.com/musistudio" target="_blank" rel="external">金辉同学</a>也为它贡献了一个<a href="https://github.com/musistudio/wukong-robot-install-script" target="_blank" rel="external">一键式安装脚本</a>。</li>
<li>对技能插件接口进行了重构，支持了沉浸式插件，开发者可以轻松实现多轮对话、音乐播放，我近期支持的极客模式特性也是使用了沉浸式插件。另外还加入了NLU支持，开发者可以写出更加智能的插件，处理更复杂的语义。</li>
<li>将一些我认为有侵权嫌疑的特性移出仓库本体。例如不再自带网易云音乐技能，另外我也把微信功能移出了本体，而是改为利用 API 实现了一个基于 itchat 的客户端。所以 wukong-robot 是一个比 dingdang-robot 更加 “君子” 的版本。</li>
</ol>
<p>wukong-robot 后续的重要计划是训练本地的 ASR 、TTS 、NLU 及对话系统，并引入 RNN 降噪来改善环境较嘈杂的情况下难以唤醒的问题。关于项目的计划，可以关注 <a href="https://github.com/users/wzpan/projects/1#column-4364044" target="_blank" rel="external">wukong project board</a> 。</p>
<p>而在近期，我正在腾讯课堂上推出一套 Python 开发教程，其中会用到 wukong-robot 作为一个开发案例。</p>
<p><img src="/images/wukong-robot-intro/course.png" alt="Python 从入门到实战课程"></p>
<p>这套视频课程将从零开始，一步步教你如何使用 Python 开发出 wukong-robot 。涉及 Python 的基础语法，以及离线唤醒、静音检测、语音识别、语音合成、对话机器人等知识背景的介绍及相关sdk和服务的接入，并在这个基础上如何通过一步步的重构优化，开发出一个灵活可配置的 wukong-robot 。另外，还介绍了如何使用 tornado + twitter bootstrap + jQuery + Ajax 开发后台管理端及前端页面。进阶版中还包括了爬虫技术及 Flask 等技术的相关实战。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>现在这门课的<a href="https://ke.qq.com/course/387931?tuin=1b8113f4" target="_blank" rel="external">基础篇</a>和<a href="https://ke.qq.com/course/384790?tuin=1b8113f4" target="_blank" rel="external">完整篇</a>都有打折优惠，想要学习 Python 开发的朋友千万别错过。</p>
</div></p>
<ul>
<li>基础篇：<a href="https://ke.qq.com/course/387931?tuin=1b8113f4" target="_blank" rel="external">https://ke.qq.com/course/387931?tuin=1b8113f4</a></li>
<li>完整篇：<a href="https://ke.qq.com/course/384790?tuin=1b8113f4" target="_blank" rel="external">https://ke.qq.com/course/384790?tuin=1b8113f4</a></li>
</ul>
<p>这门课的准备和录制几乎占据了我全部的业余时间，录制的过程是非常痛苦和煎熬的。比如，为了讲好 subprocess ，我把 subprocess 的老版本高级 API 、新的高级 API，再到底层的 Popen 以及涉及到的 Linux 的标准输入输出和管道的概念都讲了一遍。对于讲授的方式，我比较提倡授人以鱼不如授人以渔的主张，所以我并不是直接贴 API ，而是带着读者一起看 Python 的官方文档，着重培养阅读文档的能力。这种讲法非常的累，但却是我认为每个工程师应该掌握的学习方式。</p>
<p><img src="/images/wukong-robot-intro/wukong-robot-tutorial.jpeg" alt="wukong-robot开发"></p>
<p>参与这门课的制作也是为了完成我在<a href="/life/2018-montage/#%E6%8E%88%E8%AF%BE">去年的个人总结中立下的 flag</a> 。Python 一直是我业余时间最常用的玩具语言，它非常适合用于原型开发。我有不少开源项目，比如 wukong-robot、dingdang-robot、<a href="https://www.hahack.com/life/2018-montage/#%E5%BC%80%E6%BA%90" target="_blank" rel="external">LiveCV</a> 都是用 Python 写的。而在我的工作中，它也帮助我完成了大量的工具和项目，这些工具和项目对个人或团队起到了非常大的作用（例如<a href="https://www.hahack.com/work/my-2-years-at-pingan/#%E6%94%AF%E7%BA%BF-v3" target="_blank" rel="external">加班统计平台</a>、已经在上百家中小银行中使用的<a href="https://www.hahack.com/work/my-2-years-at-pingan/#%E4%B8%BB%E7%BA%BF" target="_blank" rel="external">fmanager</a>），因此 Python 也无疑给我的职业发展起到了很大的推动作用。把我所掌握的 Python 知识分享给更多人，让更多人能够自如的使用这门语言来满足他们的需求，那也算是我对 Python 这门语言的回馈。</p>
]]></content>
    <category scheme="http://hahack.com/tags/dingdang/" term="dingdang"/>
    <category scheme="http://hahack.com/tags/wukong/" term="wukong"/>
    <category scheme="http://hahack.com/tags/Raspberry-Pi/" term="Raspberry Pi"/>
    <category scheme="http://hahack.com/tags/Course/" term="Course"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[2018 蒙太奇]]></title>
    <link href="http://hahack.com/life/2018-montage/"/>
    <id>http://hahack.com/life/2018-montage/</id>
    <published>2018-12-29T13:30:31.000Z</published>
    <updated>2019-05-03T17:39:37.043Z</updated>
    <content type="html"><![CDATA[<p>眨眼就到了 2019 年了，每年这个时候我都在纠结要不要写点什么。纠结的原因是：如果今年开了个头，那就相当于欠下一笔技术债，那么以后的每年都应该坚持写一篇总结，而我又是一个很怕欠债的人。今年我决定停止纠结：一来觉得自己已经到而立之年了，想做的事情就该放手去做。二来总结首先是写给自己看的，每年年底好好写份总结，有助于回顾自己这一年的心路历程，也能及时发现自己这一年有哪些不足，有则改之无则加勉。三来如果能坚持写下去的话，等老了的时候，回过头来看每一年的回顾，应该会有更深的感触吧。Anyway，既然是有益的债务，那还是值得去背负的。</p>
<p>2018 年依旧是比较充（mang）实（lu）的一年，这一年我完成了买房大计，开始在 GMTC 这类的技术会议上做分享交流，开始带团队，首次挑战并完成了一次鹅厂的技术通道答辩，开始尝试担任腾讯课堂的讲师对外授课……收获颇丰。与之相对应的也有一些失去，包括一段还没来得及开始就匆匆结束的感情。</p>
<p>为了避免把总结写得太过于流水账，我想把总结拆成几个主题来回顾：正经事（工作、开源、博客、授课），不正经事（乐器、旅行、游戏、锻炼、看书、感情）。</p>
<a id="more"></a>
<h2 id="正经事">正经事</h2>
<p>先说说正经事吧。</p>
<h3 id="工作">工作</h3>
<p>在去年我写了一篇<a href="/work/my-2-years-at-pingan/">在平安两年的总结</a>后，很多朋友都知道我跑来腾讯开发智能硬件了。我们做的这款产品叫做<a href="https://qrobot.qq.com/" target="_blank" rel="external">小Q机器人二代</a>。我刚来的时候，这个音箱其实已经开发得差不多了。恰好管理端没人维护，所以我就充当救火队员的角色接手了后台管理端的维护，并且为它开发了一套热更新系统，用于给智能硬件升级技能。另外为了提升闲聊对话的质量，我又写了一个闲聊优化平台，用于评估闲聊的对话质量。作为一个安卓开发工程师，我也负责做了一个系统应用的UI重构工作。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/qrobot.png" alt="小Q机器人二代"></p>
<p>到了去年 10 月份，我们又多了一个新项目的机会：ABCmouse 腾讯版。ABCmouse 是一个在美国家喻户晓的儿童英语教育软件。我们与 ABCmouse 的研发公司 Age of Learning 公司开展了战略合作，以期开发出一款针对中国儿童的英语学习应用。我们希望它能提供更符合中国儿童使用习惯的学习路径和交互方式，并在里头融入腾讯的社交元素，从而带动儿童外语学习的积极性。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/abcmouse-tencent.png" alt="ABCmouse 腾讯版"></p>
<p>当时在团队里头可以选择是否继续维护小Q机器人或者选择开发新项目，出于对教育这个方向的看好以及对从零开始开展一个新项目的兴奋感，我选择了后者。在那个时候，我们的开发人力算上 Jolt （我的 leader） 总共只有 4 个人，大家聚在一个小黑屋里就动手干了起来。在刚开始的阶段，因为没有后台，我也负责做了一些后台的工作。不过在大厂工作有个很重要的点：很多时候你要做的事情别人已经做过，这时候发现并且充分利用好已有轮子的能力就显得非常重要。作为一个客户端开发，要立马做到充分用好公司里的后台轮子，并且把美国团队已有的服务迁过来并和公司的整套框架轮子顺利对接，对我的挑战非常大。幸运的是 Jolt 也知道我一个人搞非常吃力，过了不久就安排了后台组的人力支持，紧接着前端也有同事加入到这个项目中。队伍越来越壮大，我就终于可以回归老本行搞起客户端的开发了。</p>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="http://hahack-1253537070.file.myqcloud.com/images/darkroom.jpeg" alt=" 小黑屋时期的工位。虽然通风不好，但窗外的风景很好。"><b>附图 1</b>  小黑屋时期的工位。虽然通风不好，但窗外的风景很好。</span></span></span></p>
<p>虽然说是回归老本行，但正好遇到小Q机器人即将发布，所以我依然要经常抽身去支持小Q机器人的后台管理端维护和开发工作。一边搞A项目的客户端，一边搞B项目的后台，工作内容也变得很分裂。最坑的是有台小Q的 COS 服务器因为长期欠费，在某一天突然被回收，所以我只能到合作账户下购买新机器然后把 COS 服务迁移了一遍。但马上我又发现后台管理端所有 COS 的 SDK 都需要升级到新版本，相应的所有接口都得重写。恰好那时开发 ABCmouse 也陷入了跨平台的坑：开发一个音乐播放器的时候，Web 端和 Android 端调试都没问题，结果到了转体验的时候发现原来 iOS 端播放不了。于是那天晚上为了保证顺利转体验拉着 Nasky 调到凌晨五点才算解决。而为了避免影响小 Q 发布，第二天又自带鸡血地跑来搞 SDK 接口升级。大概是因为长时间处于比较高负荷而分裂的状态，有段期间脾气变得暴躁了起来，加上感情失意和我妈生病住院的双重打击，于是有一次因为控制不住脾气还向 Jolt 发了火。而 Jolt 也发现了我那段期间状态不太对，心平气和地把我拉去聊了下情绪控制的问题。现在想起来我真要非常谢谢他那次的警醒，我也因为那一次教训而更加意识到职场上的合作问题。</p>
<p>当然，那段期间不止我一个人很忙碌，大家就像一个创业团队一样在拼搏。最有意思的是，小黑屋里的空气比较差，分坐我两边的 Jolt 和 Xepher 都患上了鼻炎，于是一个打完喷嚏另一个接着打，而且似乎可以无限循环下去……In one word，在小黑屋里头发生了不少故事。</p>
<p>说说在腾讯的感受吧，刚从平安跳去腾讯的时候就和刚从百度跳去平安一样有着很大的落差。从百度到平安，工作节奏一下子放慢了下来，我花了挺长时间才适应没有高负荷工作带来的不踏实感（适应办法就是自己给自己找活干）。从平安来到腾讯，又自愿加入了一个初创团队，工作节奏一下子又上去了，Jolt 一开始还怕我适应不来。所幸自己在平安期间其实也没有闲过，过来这边依然能打。接手的活都能够如期交付，没有出现过 delay 的情况，并且还主动扛下了一些边界模糊的工作：比如通用组件的梳理和完善，或是一些有助于提高日常开发效率的工具开发以及流程优化措施。手上的包袱多了，自然而然就从一个打杂维护后台的客户端慢慢成为团队里的骨干了。</p>
<p>总的而言腾讯的工作氛围的确是非常好的。刚入职的时候，负责培训的小姐姐问我知道腾讯里面什么最多，我故作肤浅地回答了一个字“钱”。她笑着说其实是公仔和文化T-shirt。在腾讯待这一年半下来，果然是通过各种渠道领了非常多的公仔和 T-shirt 。特别是到了司庆或者项目庆功宴的时候，穿上统一的 T-shirt 马上就成为朋友圈爆款。初此之外，腾讯里头还有许多贴心的福利，人文关怀做得相当不错。我更喜欢的是公司的内网建设，员工对公司内的大小事务有任何不满，真的可以直接在内网发声，而不用担心被打击报复。有这样的平台让大家 speak out ，员工也会真正得到一种被 respect 的感觉，从而也会更有主人翁意识。相比之下，在平安大家就显得比较拘谨，即使我给团队内部搭了一个<q>壹瓴阁</q>论坛让大家自由发言，还找上老大拨巨款鼓励多发帖，最后这个站点依然只停留在发技术文和征婚贴的地方 <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>我甚至还给发征婚贴的同事颁发过奖金 😹 </span></span></span>。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/prize.jpg" alt="在腾讯里的各种小福利"></p>
<p>到了今年三月份，ABCmouse 终于发布了第一版。当晚我们很兴奋的聚在一起留了一张照。ABCmouse 也是我亲身参与并从零到一完成的第一个初创项目。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/release_v1.jpg" alt="ABCmouse发布"></p>
<p>因为在整个过程中承担了比较多的工作，到了 6 月份，在 Jolt 和 Hebert 的推荐下，我代表团队去参加了今年的 <a href="https://gmtc.geekbang.org/" target="_blank" rel="external">GMTC 全球移动技术大会</a>，分享了<a href="/codes/cocos-based-high-performance-cross-platform-app-developing/">团队在整个项目开发过程中积累的一些经验</a>。在 GMTC 上遇到了很多前同事和老朋友，交谈之下发现大家过的都挺不错。当然还认识了不少志同道合的新朋友。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/friends.jpg" alt="新老朋友"></p>
<p>我也因为这段期间的工作表现拿到了一面小锦旗以及两块砖头。说到奖励，相比平安随便一个小奖就有奖杯拿，腾讯的各种奖项的纪念物显得格外朴素。季度奖发小旗子，四五星则是发一块砖。目前我只见到 Jolt 升 T4 的时候获得了 Ross 亲授的一个奖杯。这带来的好处是奖杯的含金量也因此显得很高的样子（至少短期来看我没机会拿到啦）。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/prizes.png" alt="一年下来拿到的若干奖项"></p>
<p>从 GMTC 回来后，团队发生了剧变。在一次团队聚餐上，Jolt 突然宣布即将升迁去另外一个部门当任总监，并安排我和 Xiangwen 代为管理好这支团队。虽然在这之前 Jolt 已经拉过我和 Xiangwen 大致说过后续的规划，但这个决定依然来得非常突然。于是从 7 月份开始，我的身份又一下子从一个普通骨干变成了团队的负责人。</p>
<p>对我而言，带团队从来就不是一件轻松的事情，我自己仅有的一点管理经验只是在大学期间担任过班长和校学生会网络部的部长。那个时候为了管好团队，看了不少管理相关的书。我比较欣赏的是一本叫做《领导沟通力》上提倡的观点：它简单粗暴地把领导力分成四个象限：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/leadership.png" alt="领导沟通力4象限"></p>
<ul>
<li><strong>Q1：控制+随和型</strong> 。一方面对团队有足够的控制力，另一方面个性随和。这种领导往往是最容易做出稳定成效的类型。</li>
<li><strong>Q2：随和+顺从型</strong> 。这种领导能和下级打成一片，但因为缺乏控制，管理过于松散，团队效率也很低。</li>
<li><strong>Q3：顺从+敌意型</strong> 。这种领导既缺乏足够的控制力，又总是期望用苛责训斥来寄希望于提高团队产出。这种领导往往容易带出最低效的团队。</li>
<li><strong>Q4：控制+敌意型</strong> 。这种领导能保持很强的控制力，做事雷厉风行，对下级也非常严格，喜欢通过训斥责备的手段来迫使下级达到自己期望的要求。这种领导往往能在短期内做出成效，但长期以往容易因为团队流动性变大或者员工更加消极进而导致团队产出降低。</li>
</ul>
<p>Q1 毫无疑问就是最理想的领导风格。因为这个观点简单有效，所以我在日常管理团队的时候总是暗自告诫自己既要能保持随和也要能维持足够的控制。但这只是一个基本的要求。具体到要做好一个开发岗的 leader ，控制力又体现到了技术驱动能力、决策能力、对风险的嗅觉、对下级成长的关注、上下级沟通能力等方方面面。所以说做好 leader 也是一个永远都学不完的学问。前阵子看到内网上有人在问 “什么样的leader才是称职的leader” ，有一个观点我非常赞同，也希望自己能往这方面努力：</p>
<blockquote>
<p>A boss uses people but leader develops people. A boss issues ultimatums but leader generates enthusiasm. A boss says “I” but leader says “we”. A boss takes credit but leader gives credit. A boss says “go” but leader says “Let’s go”. A boss make followers but leader makes leaders.</p>
</blockquote>
<p>开始带团队后还有一个变化就是感觉自己的时间更不够用了。以前虽然手里的需求更多，但毕竟有足够的 buffer 可以专心去完成。现在虽然花主要时间要用来带团队，但是依然希望自己能保持在开发前线，带着团队往前冲，所以每个版本都会给自己留一些需求去做。但实际操作下来，每周正常工作时间基本都被各种大大小小的会议给占满了，真正留给自己做需求的时间少得可怜，并且非常零散，恢复断点的成本随之变得很高。Seek 也看出了我的捉襟见肘，提醒我应该把握好自己的工作量，不要只顾着往前冲结果带头战死沙场。我现在也尽量避免给自己分配太多简单而琐碎的（trivial）的需求。一些一目了然知道怎么做的需求，我一般会交代给其他人去执行，而我所需要做的是跟他说清楚方案。而对于足够复杂的需求，我会思考这个活是不是最适合给我做。如果有更适合的人选，我会优先选择他去完成，但他需要跟我说清楚方案。</p>
<p>到了年底的时候，回顾了一下这半年期间和 Xiangwen 一起带着团队做过的一些技术优化工作，以及在流程措施、代码质量、效率提升上做的改进，对整个团队的战斗力还是有点小自豪的（部分细节不便公开，所以做了删减）：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/improvement.png" alt="下半年做过的技术优化"></p>
<p>不过仅靠技术优化并不能保证产品能持久的做下去，技术也并非产品的第一推动力。Jolt 也私下批评过我太容易陷入对当前状态的满足。细细回想了一下我确实有这样的问题。明年除了做好技术优化，我还需要思考怎么跳出目前的边界，去推动产品往一个更好的方向发展，而不要轻易陷入满足。</p>
<h3 id="开源">开源</h3>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/2018-github.png" alt="2018年的格子图"></p>
<p>因为工作比较忙碌的关系，整个 2018 年的格子数比起 2017 年少了很多，不过我也没有对涂满格子数有太深的执念。</p>
<p>今年主要开源/维护了几个项目：</p>
<table>
<thead>
<tr>
<th>项目名</th>
<th>简介</th>
<th>今年的工作</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/codes/dingdang-robot-intro/">dingdang-robot</a></td>
<td>开源的中文智能音箱项目</td>
<td>社区化建设</td>
</tr>
<tr>
<td><a href="/work/introducing-beamerstyleslides/">BeamerStyleSlides</a></td>
<td>Beamer风格的幻灯片模板集，尤其适用于晋升述职、技术分享和学术汇报。</td>
<td>新开源</td>
</tr>
<tr>
<td><a href="https://github.com/wzpan/LiveCV" target="_blank" rel="external">LiveCV</a></td>
<td>可视化简历生成器，能抓取你的 Github 数据并生成精美的 PDF 格式简历</td>
<td>业余开发中，未完整开源</td>
</tr>
<tr>
<td><a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a></td>
<td>用于为 Hexo 生成本地搜索索引</td>
<td>若干 bugfix，并支持忽略索引指定文章。</td>
</tr>
<tr>
<td><a href="/codes/comment-js/">comment.js</a></td>
<td>一个纯JS实现的静态站点评论系统</td>
<td>若干 bugfix，特别是解决了 recent comment list 在不同浏览器展示效果不一致的问题。</td>
</tr>
<tr>
<td><a href="https://github.com/CSIGer/cocos-jsc-endecryptor" target="_blank" rel="external">cocos-jsc-endecryptor</a></td>
<td>指导我的徒弟 khan 做的一个 Cocos Creator jsc 加解密工具。</td>
<td>新开源</td>
</tr>
</tbody>
</table>
<p>dingdang-robot 在今年的一月份 star 数就已经超过了 1k，第三方插件数量超过了我自己提供的插件的两倍。过了不久 QQ 群用户也超过了 500 人，于是被逼着办了个 QQ 超级 VIP 升级成千人大群。</p>
<p>在 QQ 群里经常能看到有一些用户拿 dingdang-robot 做出了很多有意思的应用。在淘宝上还看到有人在卖 dingdang-robot 和魔镜的结合品。六月份的时候了个 flag：当 dingdang-robot 的入群收入达到一万时将全部捐出给深圳壹基金。半年过去了，现在看这个小目标已经达成了一半。</p>
<p>不过，因为自己的业余时间比较少，而调试和维护 dingdang-robot 又很依赖硬件，有时候为了复现用户的问题，折腾起来非常耗时。看到项目上积压了一堆的 issues 没有去解，心里就觉得实在过意不去。所以在今年 3 月份我就将 wzpan/dingdang-robot 的代码迁移到了 dingdang-robot/dingdang-robot ，由更多的人一起维护。到了年底，dingdang-robot/dingdang-robot 和 wzpan/dingdang-robot 两个仓库的 star 数加起来已经超过了 2k 。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/dingdang-robot-montage.jpg" alt="dingdang-robot"></p>
<p>在春节期间，闲来无事又写了一个面向工程师的可视化简历生成器 LiveCV ，底层渲染器基于LaTeX，用YAML简化了LaTeX的语法，并且提供了一个可视化的编辑界面。<a href="http://xn--web-f03ejfu74r.py" target="_blank" rel="external">后台用web.py</a>，前端现学现卖用vue.js，用Docker包装镜像。亮点在于：</p>
<ol>
<li>渲染器可继承和定制，也就可以实现各种新的主题样式。</li>
<li>支持动态拉取Github上的贡献数据加进简历中，为此我提供了一个 <code>$stars</code> 宏和一个 <code>$forks</code> 宏。</li>
<li>还借鉴了Git的钩子思想，可以写钩子在渲染的各个阶段定制流程，通过钩子的灵活应用，可以弥补YAML过于简单的问题。</li>
</ol>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/livecv.jpeg" alt="LiveCV"></p>
<p>目前这个项目进度大概是 80% ，还剩多用户、权限管理以及多语言支持没有完成。体验地址：<a href="http://livecv.hahack.com:8021" target="_blank" rel="external">http://livecv.hahack.com:8021</a> 。</p>
<p>这是一份渲染出来的简历效果：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/wukong.png" alt="LiveCV example"></p>
<br>
<p>7 月初参与了一次鹅厂的技术通道晋升答辩，在准备 slides 的时候苦于没有找到一个简洁实用的 PPT 模板，于是仿照着 Beamer 做了一份 PPT 模板，后来干脆搞成了个开源项目 <a href="/work/introducing-beamerstyleslides/">BeamerStyleSlides</a> ，对大部分 Beamer 的模板主题进行复刻。这套模板的介绍文章上了公司内网的头条，获得了两百多个同事的收藏。</p>
<p><img src="https://raw.githubusercontent.com/wzpan/BeamerStyleSlides/master/preview/tile.png" alt="BeamerStyleSlides"></p>
<p>自从开始带团队后，我更加珍惜业余时间动手做开源项目的机会。工作上处理技术需求的时候，如果脑海里已经有了个基本方案，我就更倾向于交给其他人去替我执行这个方案。但如果长期不注重细节实现，那么自己的动手能力就会下降。所以业余时间自己动手做点开源项目就是一个很好的避免眼高手低的方式，在做 prototype 实现自己的想法的时候，尽量给自己树立一个高标准，push 自己去达成自己的要求，并且在尽可能短的时间里实现出来 80% 的功能（以免自己三分钟热度过去就不想做了）。偶尔这样折磨一下自己，也会有很不错的收获。</p>
<h3 id="博客">博客</h3>
<p>博客基本是处于荒废状态：今年一共就发了三篇博客。</p>
<p>我比较反感把网上随便一搜就能找到的知识点加工后写进自己的博客中，如果这么做了，我充其量只是沦为了一个知识的搬运工。所以对于自己的博客，我向来是宁缺毋滥，只写原创的内容。</p>
<p>虽然自己的博客是荒废了，但我在公司内网上反而变得很高产。因为工作中就能产出非常多的原创内容，所以大概就是把写博客的习惯迁移到了内网里头。</p>
<p>在这一年半里我一共在内网写了 27 篇文章。所以遇到部门文章数排名的时候，我往往都是处于遥遥领先的位置：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/rank.png" alt="排名"></p>
<p>因为分享比较勤快，也偶尔能有几篇文章登上内网的头条，所以在鹅厂一年半的时间里，我的内网影响力已经超过了 96% 的同事。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/influence.png" alt="KM影响力"></p>
<h3 id="授课">授课</h3>
<p>严格意义上对外授课并不能算工作本分内的事情。不过既然选择了教育这个行业，所以除了开发教育App之外，制作课程对外分享也就变成了对自己所处的这个大行业的一个积极探索和实践。<a href="https://www.ageoflearning.com/about-us/#leadership" target="_blank" rel="external">Jerry</a> 说 Age of Learning 公司在招聘的时候，会首先考察的就是这个人对教育这个行业有没有热情。我也非常认同将行业方向当作择业的第一标准。多参与行业内的不同形式的实践，反过来也能够提升我对这个行业的投入积极性和洞察能力。所以我也把授课列入“正经事”这个大分类里头。</p>
<p>在公司内，有一个做对外课程的平台，叫做<a href="https://ke.qq.com" target="_blank" rel="external">腾讯课堂</a>。如果收到腾讯课堂的邀请，只要我有信心能讲好，我都会尽量给予支持。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/education.jpeg" alt="腾讯的教育产业链"></p>
<p>因为我们是最早一批使用 Cocos Creator 开发微信小游戏的团队，所以 6 月份我第一次收到了腾讯课堂的邀请，让我作为主要负责人来制作一套关于小游戏开发的课程，叫做《<a href="https://ke.qq.com/course/326820?tuin=1b8113f4" target="_blank" rel="external">微信小游戏入门与实战</a>》。</p>
<p>收到这个任务的时候，心情大概是兴奋和焦虑并存：兴奋是因为看了多年的 Udacity 等线上课程，没想到自己也有机会成为一个公开课程的讲师<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>而且课酬也挺给力 😄 </span></span></span>；焦虑是因为这相当于又欠了一笔技术债，而我平时的工作已经很忙了，担心因为业余时间不够而影响课程的交付时间和质量。</p>
<p>为了提高交付效率，也为了把锻炼的机会多交给一些人，我把组里的大部分同事都拉来当讲师，根据各自所长来分配教学内容。为了保证整体的教学质量，我为这门课设计了一份<a href="/images/writing-2048-wechat-game-in-cocos-creator/mindmap.png">教学大纲</a>，并确定好每个讲师需要讲好的知识点，以及课后准备的练习项目，其他的交给各个讲师自由发挥。</p>
<p>一直准备到 11 月，我们的课程的前四章终于制作出来并上架了腾讯课堂。这段期间我们经历了无数次的修改重录，甚至还临时更换了部分讲师。虽然离原来预期交付时间慢了很多，但我还是宁愿慢工出细活，把整套课程做出精品，这样才对得起购买课程的人。</p>
<p>在 11 月底我又做了两场直播形式的公开课，<a href="/codes/writing-2048-wechat-game-in-cocos-creator/">在线直播分享如何使用 Cocos Creator 开发微信小游戏《2048》</a>。这个公开课可以看做是对小游戏开发系列课程的预热。</p>
<p>让我比较欣慰的是，这两门课程目前都维持了 100% 的好评率，这说明我们的课程质量得到了学生们的认可。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/comments.png" alt="评论"></p>
<p>除了这两门课程之外，我还当任了另一门 Python 课程的出品老师，负责评估这门课程的教学内容和质量。不过我这个出品老师一直没有起到任何实质性作用，因为一直到现在这门课的讲师都没有找过我。直到最近 Jeep 告诉其实这门课进度一直卡着，因为找不到合适的老师。他希望我能够转成主讲老师亲自去讲这门课。本来我已经打算不再讲课了，但在他的盛情邀请之下，我又有些被说动了。Python 一直是我业余时间最常用的玩具语言，它非常适合用做原型开发。我有不少开源项目，比如 dingdang-robot、LiveCV 都是用 Python 写的。如果把我所掌握的 Python 知识分享给更多人，让更多人能够自如的使用这门语言来满足他们的需求，那也算是我对 Python 这门语言的回馈。</p>
<h2 id="不正经事">不正经事</h2>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="http://hahack-1253537070.file.myqcloud.com/images/keyboards.jpeg" alt=" 工位上的三块键盘"><b>附图 2</b>  工位上的三块键盘</span></span></span></p>
<h3 id="乐器">乐器</h3>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/rainie.jpg" alt="Rainie Poet S-30L"></p>
<p>今年并没有去学习什么新乐器，主要是因为回家基本都比较晚，夜间玩乐器太扰民，而只用周末是不太可能掌握什么新乐器的。</p>
<p>电子琴接近处于吃灰的状态。今年主要的收获是学会了一些常用的和弦，能够弹唱简单的歌曲。复杂点的琴谱还是弹不起来。要继续进阶还是得报班才行，自学永远都是半吊子，毕竟不是谁都能像 1900 那样无师即通。</p>
<p>为了能够在周末时间在公司练会儿琴，我又买了一把折叠电子琴，但发现这玩意儿只能算玩具，触感非常差，没有弹几次也被我收起来吃灰了。</p>
<p>唯一坚持下来的只有 Ukulele 了，它也是我平时最喜爱的玩具之一。今年主要的进步是开始玩指弹，慢慢地一些歌曲的前奏和间奏都能够很快地学会并流畅地弹出来（《<a href="http://hahack-1253537070.coscd.myqcloud.com/videos/%E9%9D%92%E8%8A%B1%E7%93%B7.flv" target="_blank" rel="external">一小段青花瓷</a>》）。</p>
<p>另外，和弦摸熟了之后，也可以自己扒谱了。今年一共在有谱么（<a href="http://yoopu.me" target="_blank" rel="external">yoopu.me</a>）上写了五首谱子：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/yoopu.png" alt="我的谱子"></p>
<p>扒谱是一件蛮有乐趣和成就感的事情。比如王力宏的《南京，南京》刚出来的时候，只有演唱会现场版，录音室版本都还没发布，更别提伴奏了。而我却可以很快扒出和弦来<a href="https://kg3.qq.com/node/play?s=665je06JnB1ik6sW&amp;shareuid=639c9b80222e328a&amp;topsource=" target="_blank" rel="external">自弹自唱</a>。</p>
<p>扒谱的时候曾经萌生出给 Hexo 做一个绘制谱的插件的想法，最理想的就是在博客里可以用 tag-plugin 的形式直接绘制成 svg 格式的和弦，这样我就可以把我的博客变成歌谱本。经过搜索发现了 <a href="https://github.com/Haixiang6123/guitar-editor" target="_blank" rel="external">haixiang</a> 的几个有意思的 react.js 插件 <a href="https://github.com/Haixiang6123/react-chord-generator" target="_blank" rel="external">react-chord-generator</a> 和 <a href="https://github.com/Haixiang6123/guitar-editor" target="_blank" rel="external">Guitar-Editor</a>，他基本上就是用自己的技术栈复刻了一下有谱么。我挺欣赏他的动手能力和自驱力，于是加了他微信好友。然而我自己还没有开始动手去写这个 Hexo 的绘制谱插件，主要是它的实现成本有点高，而回报有点低（毕竟太小众，而且已经有“有谱么”了，我没有在博客上写谱的刚需），所以暂时还没有提到很高优先级的程度 <span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>如果你有兴趣，欢迎留言申请加入。 </span></span></span> 。</p>
<p>Ukulele 也让我对吉他重拾了兴趣。我曾在大学期间买了一把吉他，学了一段时间爬格子后就已经兴致索然。之后又在一次调琴弦的时候因为方法不当把弦弄断了，于是这把琴就被我带回家扔起来了。国庆的时候回了一趟家，找出了这把尘封多年的吉他，大概摸了半个小时很快就可以上手弹唱了。唯一遇到的困难是 F 和弦依然是按不下去，但我认为并不是自己的方法问题，而是这把琴质量太差，品距太高导致加大了 F 和弦的难度。我已经开始种草 <a href="https://www.taylorguitars.com/guitars/acoustic/114ce" target="_blank" rel="external">Taylor 114ce</a> ，说不定等搬到新房子后就拔草。不过在剁手前，我应该会先去逛下琴行看看有没有更适合自己的定制琴。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="http://hahack-1253537070.file.myqcloud.com/images/bad.jpeg" alt=" 像这种路边摊ukulele千万别买"><b>附图 3</b>  像这种路边摊ukulele千万别买</span></span></span></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/taylor-114ce.jpg" width="900" height="900" title="taylor 114ce"></p>
<p>说到买乐器这个话题，真的要相信“一分钱一分货”硬道理。不同价格的乐器，演奏效果的确有云泥之别。我的 Ukulele 是三年前 Allen 送我的 <a href="http://www.rainieukulele.com/cn_product_view.php?id=10" target="_blank" rel="external">Rainie Poet S-30L</a>，这把琴用桃花芯实木作为面板，音色饱满，琴头弦枕也很稳定，可以放好几个星期都不用调弦。弹久了之后，再去碰其他人的那种一两百块的 Ukulele ，就能明显感觉到劣质琴的廉价感——劣质琴因为用的是很差的面板，音色很单薄，拿在手上感觉很轻，而且面板和背侧板的衔接处往往都不会打磨，手臂放在上面会感觉很硌手。除此之外，劣质琴的和弦很不稳，放个一两天就又得重新调弦。用差的乐器绝对也会影响学习质量。所以我认为学习乐器并不存在所谓的“入门琴”的概念，要买就得买好一点的，这样才能真正的入门。当然，买什么价位的乐器需要量力而行，否则如果买来只是放着吃灰的话就浪费了。</p>
<h3 id="旅行">旅行</h3>
<p>今年一共去了几个城市：</p>
<ul>
<li>亚庇（马来西亚）</li>
<li>仙本那（马来西亚）</li>
<li>北京</li>
<li>清迈（泰国）</li>
<li>洛杉矶（美国）</li>
</ul>
<h4 id="亚庇-仙本那">亚庇&amp;仙本那</h4>
<p>把 Galio 拉来腾讯后，战斗力爆表的他一下子就揽下了很多优化和重写组件和活动的活。对自己要求很高，又承担了很多的工作，所以他来团队不到半年就开始出现了失眠和头痛的症状。于是趁着五一，拉着 Galio 夫妇一起去了趟马来西亚。</p>
<p>为了避免写流水账，直接说说这次自由行的感受吧。</p>
<ol>
<li>亚庇是一个海滨城市，所以就算在超市的停车场或者某个不起眼的楼梯口里都能看到非常漂亮的海景：</li>
</ol>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/ocean-view.jpg" alt="Wisma Merdeka 的停车场"></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/ocean-view2.jpg" alt="Wisma Merdeka 一角"></p>
<p>不过，到了美人鱼岛和仙本那之后，先前看的海景就完全不值一提了。作为沿海地区长大的孩子，见到这么清澈的大海依然深深地被震撼到了。
<img src="http://hahack-1253537070.file.myqcloud.com/images/ocean-view3.jpg" alt="美人鱼岛1"></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/ocean-view5.jpg" alt="仙本那1"></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/ocean-view6.jpg" alt="仙本那2"></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/swing.jpg" alt="仙本那3"></p>
<p>如果说海上世界已经足够壮观，那么海底世界就更是绚烂神奇了。这是一个完全不同的世界。海龟踱步，鱼群翱翔；珊瑚林立，海星蹁跹。第一次浮潜的时候，看到一大批鱼从脚下游过，我惊呆到下巴都掉了，以至于忘了咬住吸气管，猛喝了口海水。幸好第一次潜水选择在较浅的地方进行，不至于需要呼救。到了后面掌握了技巧了，就敢独自游到离船比较远的地方观赏海底世界。不过后面往船方向游回去时才发现自己和船之间已经隔了一片较深的海域，游的过程中只能看到光束从背后射向一片深渊，这时候才感受到一种无比渗人的深海恐惧感。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/corel.jpg" alt="珊瑚海"></p>
<ol start="2">
<li>大马的人非常好客。拿导游来说，尽管带一次团能挣的钱并不多，但他们依然对旅客投入了百分百的热情。主动帮你拍照，跟你聊这边的风土人情，完全不是一副职业假笑的样子。另外，打 Grab 有时碰到会讲中文的司机也会非常热情地跟你聊天，为你推荐路线。</li>
<li>海鲜非常便宜，可以吃到吐。我们一连吃了几天海鲜后都感觉好长一段时间不会再想吃了。相比之下，水果反而没有想象中便宜。</li>
<li>因为马来西亚的华人比例很高，所以华人文化对大马的影响非常大。亚庇的菜市场上，一个中文说得不太麻利的卖菜小哥会唱《我们不一样》吸引你去买他的海鲜。在仙本那的路口，一群黝黑的马来人会围在一起玩《王者荣耀》。除此之外，英语在马来西亚是官方通行语言，遇到不会讲中文的印度人和马来人，用英语都能交流。不像在泰国，有时候会遇到中文和英文都不好的司机，只能靠 body language 和翻译软件交流。</li>
<li>如果要说点不好的地方：首先是宰旅客的情况依然有。在仙本那吃饭的时候，会有一些人过来兜售海马等特产，但却不会跟你说私带海马出境是犯法的。于是我和 Galio、Alex 在不知情的情况下各买了一包海马，最后只能都拿去药店贱卖。若从阴谋论的角度想，从餐馆兜售到诱导药店卖出形成了一个完整闭环，一下子就从旅客里空手套白狼赚了不少银子，也是件细思恐极的事情；其次是夏天去确实太晒了，即使涂好防晒霜，出海浮潜被晒伤的几率依然很大。我回国的时候整个人黑了一大圈，还晒脱了一层皮。本来我的颜值就很不稳定，晒黑之后就更加不上镜了😭。</li>
</ol>
<p>总体来说，如果你很喜欢大海，也很爱吃海鲜，那么来亚庇和仙本那是很不错的选择。</p>
<h4 id="北京">北京</h4>
<p>6 月份因为参加 GMTC 的缘故去了一趟北京。每次去北京都是去参加比赛或者演讲，所以北京给我的印象并不是很好，大概还跟唯一一段比较正式的感情就是在北京这个伤心地结束有关吧。GMTC 在国际会议中心举办，和国家体育馆非常近。所以 GMTC 结束后，和 GMTC 上认识的一帮朋友去逛了下鸟巢和水立方，顺便吃了顿小吊梨汤。之后在北京又逗留了两天，和平安的几个老同事决定在京城再转悠一下。正值酷暑（summer），所以我们决定去下颐和园（the summer palace）感受下两百多年的避暑胜地。比较有趣的是还在那里巧遇了即将赴美留学的 <a href="https://chaoyanghe.com/" target="_blank" rel="external">Chaoyang</a> 。向来对帝王的豪宅没有太大的兴趣，所以关于颐和园的景色没什么好说的，看图就好。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/summer_palace.jpg" alt="颐和园"></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/lion.jpg" alt="排云门的狮子"></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/wisdom-sea.jpg" alt="智慧海，是颐和园最高处的一座无梁佛殿"></p>
<p>比较让人印象深刻的是古人讲求的对称美。不仅建筑本身讲求对称，连布局也是严格对称的。这点在登上万寿山顶后以上帝视角往下看时能够明显的感受出来：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/symmetry.jpg" alt="中国建筑讲求的对称性"></p>
<p>算下来我来北京已经逛过故宫、天坛、颐和园、雁西湖、王府井几个地方，下次再来估计只有长城能勾起我游玩的兴致了吧？</p>
<h4 id="清迈">清迈</h4>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/chiangmai-mosaic.jpg" alt="清迈马赛克"></p>
<p>今年十月份组织了一场泰国清迈团建。我在两年前已经去过一次清迈，所以这次自然而然成了团队的导游。</p>
<p>对我而言，清迈是一个非常值得多去几次的城市。签证方便，东西好吃，重点是消费很便宜。如果你没有很强的购买欲的话，在国内定好酒店和机票后，再兑个一两千人民币就足够在清迈待上五天了。如果发现钱不够用，也能够找到很多ATM可以取款。我把这次的清迈之旅定义为我自己的佛系回忆之旅：基本就是重复一遍两年前的路线。本来还计划花两天跑去没去过的拜县，但大家担心行程太辛苦所以也取消了。</p>
<p>虽然是回忆之旅，这一路却发现了很大的区别。大概是受到了登革热的影响，清迈的夜市冷清了很多。原先在夜市有各种小吃和街头表演，这次去就只剩下一些衣服饰品的常驻摊位了，以至于我不断怀疑自己是不是去错了地方。还有，上回在清迈吃了一家泳池边的高逼格餐馆 Ruen Tamarind ，这次心心念念也跑去吃，结果发现泳池都被封掉了，只能在厅内就餐，完全没有第一次来的惊艳感。</p>
<p>说到美食，这回在泰国吃得最满意的是 Wangsingkham 路的 <a href="https://www.tripadvisor.cn/Restaurant_Review-g293917-d11867322-Reviews-Wishing_Tree-Chiang_Mai.html" target="_blank" rel="external">Wishing Tree</a> 餐厅，因为餐厅在河边，风景不错，而且东西是真的好吃。同样因为登革热的原因，前来就餐的人只有我们这群不怕死的旅客。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/wishing-tree.jpg" alt="Wishing Tree"></p>
<p>当然还有必吃的网红甜品店 Mango Tango ，第二次来发现清迈周边多开了好多家，蹿红程度大概相当于国内的喜茶了吧。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/mango-tango.jpg" alt="Mango Tango"></p>
<p>永远维持不变的大概就只有清迈里的各种寺庙了。在泰国里有将近 95% 的当地人是上座部佛教徒，所以在泰国随处都可以看到各种壮观的佛教寺庙。所以每天我们几乎不是在找吃的就是在逛寺庙，中途累了就去做个 massage 。</p>
<p>在柴迪隆寺和两年前的自己来了张“超时空合照”：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/chiangmai-compare.jpg" alt="超时空合照"></p>
<h4 id="洛杉矶">洛杉矶</h4>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/los-angeles.jpg" alt="洛杉矶"></p>
<p>洛杉矶之行严格上说其实是出差，主要的目的是跟 ABCmouse 的母公司 Age of Learning 公司商讨明年的运营计划以及技术交流。所以白天的时间我基本都是在 Age of Learning 的公司里头待着，给 Age of Learning 的 China team 讲关于 code standard、spine animation dynamically loading、input event system 等技术相关的东西。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="http://hahack-1253537070.file.myqcloud.com/images/aofl.jpg" alt=" 在 Age of Learning 的临时工位，桌子是可以上下移动的。China team 非常体贴地专门为我申请了一台外接显示器。"><b>附图 4</b>  在 Age of Learning 的临时工位，桌子是可以上下移动的。China team 非常体贴地专门为我申请了一台外接显示器。</span></span></span></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/aofl-corner.jpg" alt="Age of Learning 一角"></p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/aofl-china-team.jpg" alt="Age of Learning China team 的办公区堆满了腾讯的吉祥物"></p>
<p>第一次来美国，不可避免会遇到一些不适应的地方：</p>
<ol>
<li>美国很少有深夜开的餐馆，一般晚上十点就打烊了。而我们是半夜到的酒店，想吃点东只好跑去 711 买了两桶泡面，回来发现泡面里没有带叉子……</li>
<li>美国的酒店不提供拖鞋，也没有提供牙膏牙刷。相比之下，国内的酒店服务真是人性化太多。</li>
<li>加州的天气实在是太干了，而我并没有带润肤露，只好借同事的润肤露来用。</li>
<li>美国的食物很少带青菜，如果需要蔬菜，比较直接的方法就是单独点份沙拉。</li>
<li>最难以克服的是时差问题。到了下午四点多我就已经困得睁不开眼睛了，而第二天凌晨三点多钟我就已经清醒并且睡不下了。</li>
</ol>
<p>除去这些问题，加州的环境其实是挺舒适的。气候和深圳类似，不会特别冷，阳光充足，空气清新。</p>
<p>Age of Learning 的办公大楼在 Glendale 市，离 the Americana at Brand 很近，所以有一天晚上我们去那里溜达了一圈并和 Age of Learning 的老板们聚了个餐。虽然距离圣诞还有两周的时间，但商城已经被打扮得非常有圣诞气氛，在路上 Jerry 告诉我们 ABCmouse 里的商城的设计灵感就取自 Americana ，顿时有种走进了 ABCmouse 世界里的奇妙感。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/the-americana-at-brand.jpg" alt="The Americana at brand VS ABCmouse Plaza"></p>
<p>Glendale 也离 <a href="https://chaoyanghe.com/" target="_blank" rel="external">Chaoyang</a> 正在就读的 USC 不远，所以有天晚上我打了个 Uber 去跟他续了叙旧。Chaoyang 是我在百度认识的同事何朝阳（人称何老师），后面我们都相继来了腾讯，之后他又放弃了腾讯的 leader 岗位举家来 USC 读博。我对他的求学精神深感佩服。巧的是，刚好碰上他当晚要赶飞机回国实习，所以我们只能找个就近的餐馆吃个饭。我开玩笑说花了六十刀的打车费去 “University Surrounded by Chinese” 就为了找他蹭了顿十刀的饭。</p>
<p>完成了我们在 Age of Learning 里的 agenda 后，Neal 带着我和 Yul 去他在 Irvine 的房子玩，我也总算见识到了在美国住 house 有多爽：Neal 的房子总面积有两千尺，两层楼，总价格却只有我的房子的价格的一倍。相比之下，我的房子只是个六十平米的两房 department 。不过，在美国有钱的人喜欢住郊区，开车到上班的地方普遍要一两个小时。如果按这个距离算的话，到惠州、东莞买个 house 好像也可以达到类似的目的，但缺点就是学区不好。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/Irvine-houses.jpg" alt="尔湾的小区"></p>
<p>在 Neal 家住了一晚后，和 Age of Learning 的小伙伴们一起去了趟 Disneyland 。沾了 Age of Learning 的光，除了过了机动游戏的瘾之外，我们在 <a href="http://www.disneylandclub33.com/" target="_blank" rel="external">Disneyland club 33</a>  吃了顿大餐，这是一个隐藏在 Disneyland 里的西餐馆，只有会员才能进入。据说，想成为 club 33 的成员，不仅得交得起昂贵的会员费（坊间传言入会费为 2.5 万美元，每年年费为 1.2 万美元），而且等候入会的名单已经安排到十多年后了。说白了这就是一个饥饿营销的典型成功案例。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/club33.jpg" alt="club 33 外院"></p>
<p>入会条件既然如此苛刻，里头的环境和服务就必须能足够与之相衬才行。实际体验下来，确实很有特色。比如会有个专业的合唱团在你周围唱歌给你听；另外，对私密的要求很高，不允许拿起手机拍摄周围的环境，只能拍自己或者菜品。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/clud33-food.jpg" alt="club 33"></p>
<p>至于味道……毕竟美国的西餐比较符合西方人的口味，所以中国人吃起来并不会觉得多么可口。加上我今年五月份曾经在 FutureOne 吃过了一顿又贵又尴尬的西餐，所以我对西餐没有多少好感 <span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>在美国最大快朵颐的一餐反而是 Neal 请的韩国烤肉。 </span></span></span> 。</p>
<p>当然在 Disneyland 的重头戏还是那些机动游戏。但因为时差的原因，我到了下午依然是困得睁不开眼。所以我就一边排队一边站着打瞌睡，然后再利用各种 roller coaster 或者其他刺激项目提神，效果不错 😹 。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="http://hahack-1253537070.file.myqcloud.com/images/golden-state-free-way.jpg" alt=" Golden State Free Way，这里是电影《爱乐之城》第一段公路舞蹈《Another Day of Sun》的取景地。"><b>附图 5</b>  Golden State Free Way，这里是电影《爱乐之城》第一段公路舞蹈《Another Day of Sun》的取景地。</span></span></span></p>
<p>回国的最后一天，Jerry 开车带我们在 LA 兜了一圈。我们沿着 Golden State Free Way 开去了一个叫做 Sunset Ranch 的农场，近距离打卡拍下了 HOLLYWOOD 的标志。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/hollywood.jpg" alt="LA 的 landmark 之一：HOLLYWOOD 标志"></p>
<p>总的来说这次的 LA 之行最大的收获在于拓宽了我的眼界，了解了美国人的生活和工作方式，也让我设身处地的思考如果我在这边生活能不能适应下来。从目前来看，美国的生活方式其实挺适合我这种晚上不爱出门闲逛的人。而交流方面，虽然我的口语并没有特别厉害，但理解和用简单的英文回答是没有问题的。比如，在打 Uber 的时候我能够一路跟一个埃及的司机 Hishan 交谈彼此国家的文化、交通、政治，还跟他分享了来中国旅游的建议。当然我目前还没有感受到移民工作的必要性，一方面我还没有离开目前团队的打算；另一方面 H1B 的限制太大，在拿绿卡前一直不能回家见父母其实是一件很难熬的事情。</p>
<h3 id="游戏">游戏</h3>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/games.jpg" alt="今年购买的游戏"></p>
<p>我喜欢的游戏类型比较窄，主要爱玩 PC 上的角色扮演类游戏，而且我并不会把玩游戏作为平时的固定娱乐项目，只是突然心血来潮了就玩一下游戏，等玩上一段时间后，感到满足了就可以很长时间不玩。</p>
<p>今年的总结之所以想分享有关游戏的话题，是因为我终于在今年入了 WeGame 和 Steam 的坑。在这两个平台上一共买了 5 款游戏。</p>
<p>我是河洛工作室的粉丝，武林群侠传一直是我最喜欢的游戏。8 月份的他们的金庸群侠传续作《河洛群侠传》在 WeGame 上开始预售，于是我就二话不说就下了个 WeGame 购买。但距离游戏的真正发布要等两个月之久。心痒难耐之际，我看到河洛推荐了一款《天命奇御》，风格和武林群侠传类似，但战斗系统却是即时战斗的，这比武林群侠传的棋盘战斗要有趣很多 <span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>有意思的是这个游戏的开发商甲山林娱乐本身是一家台湾的知名房地产开发商。</span></span></span>。于是我又在 WeGame 上买了这款游戏，作为《河洛群侠传》的前菜。</p>
<p>实际玩起来，《天命奇御》的确是一款很有意思的游戏。这个游戏提供了类似《侠客风云传前传》的传闻系统，有着丰富的支线剧情可供挖掘。最有趣的就是物品出示系统——通过收集某个物品并出示给特性NPC可以触发特定剧情。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/provide.jpg" alt="《天命奇御》中的物品出示系统"></p>
<p>反而让我感到失望的是《河洛群侠传》，贴图粗糙，建模丑陋，而且战斗系统也设计得很糟糕。游戏刚发布的时候，优化做得非常差，以至于经常出现内存泄漏和卡顿的问题。后面通过升级有了很大改善，但各方面细节的不足已经是一个无法挽回的问题。比如画面总是给人一种糊糊的感觉：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/heluo-image.jpg" width="900" height="900" title="河洛群侠传“糊糊”的画面"></p>
<p>还有战斗系统的设计也很一言难尽：使用手柄操作移动位置非常繁琐，误操作了又不能撤销。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/heluo-fight.jpg" alt="河洛群侠传的战斗系统"></p>
<p>游戏的最大亮点在于它是一个非常开放的沙盒游戏，整个地图所有场景都是无需读条和场景切换就可抵达，这大幅提高了游戏的代入感。在玩的过程中不难让人回想起沙盒游戏的其他代表作品。我曾经在四年前尝试了一次《上古卷轴5》（当年下的D版），但直接被河木镇的鸡神劝退了。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/chicken-god.jpg" alt="老滚5的“鸡神”"></p>
<p>但因为有了《河洛群侠传》的基础，也因为对《河洛群侠传》的不满，我决定弃坑，重新玩回《上古卷轴5》。于是，趁着黑色星期五 Steam 促销，我又注册了个 Steam 账号，买入了《上古卷轴5》。</p>
<p>与《河洛群侠传》相比，《上古卷轴5》就是一个非常成熟的沙盒游戏。贴图细致，建模精致，而且有着更高的自由度。比如，在《河洛群侠传》里，战斗只在特定的条件下触发，你是不能随便去攻击 NPC 的。再比如，盗窃只会降低道德从而影响后续的剧情发展。而上古卷轴里，你能够随意攻击任何一个 NPC甚至屠城，而随意攻击NPC也会迁怒整个城镇的人从而攻击你。另外盗窃或者深夜潜入别人的房子如果被发现也会被满城通缉。</p>
<p>除此之外，《上古卷轴5》还提供了非常多的有趣设计，比如当你在某个城市完成了当地领主委托的一些任务后，你就可以在当地购买或者建造房子。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/skyrim-hearthfire-house.jpg" alt="在老滚5里建造房屋"></p>
<p>有了房子之后，你可以带着祖拉项链去跟喜欢的 NPC 求爱并结婚，甚至还可以领养小孩。上古卷轴5把求爱过程设计得非常简单粗暴：碰到对你感兴趣的女孩，她会直接问你是否对她有意思，如果你回答“是”的话。你们就可以去登记结婚了😹……相比之下现实生活中的恋爱就复杂多了，直接告白往往难以奏效，多数人反而更喜欢玩欲擒故纵的套路，而且双方最终能否在一起要考虑非常多的因素，家庭背景、教育水平、兴趣爱好、沟通方式……所以爱情对我而言是一种接近玄学的存在。</p>
<p>当然，游戏更重要的还是剧情本身，《上古卷轴5》本身是架构在中世纪背景的，所以有着诸多和《指环王》、《权力的游戏》相似的魔幻元素：龙、精灵、巫师、骷髅、幽灵、雪怪、吸血鬼、狼人、巨型蜘蛛等。此外游戏的主线和支线也是多到令人发指，每条主线细挖下去都可能会碰到一个强大的魔神要应付。在英灵殿迎战超强BOSS——巨龙奥杜因是游戏里头最振奋人心的时刻之一，在龙裔DLC中学会了<q>意志屈服</q>后御龙飞行又是一个成就感爆棚的时刻。</p>
<p>如果说这个游戏的缺点，除了上手难度大、任务引导缺乏之外，大概就是太花时间了……我在这个游戏里已经花了 60 多个小时的时间，而且好像还有很多主线没有去完成。而我在游戏方面的兴致持续得比较短，也不太愿意投入更多时间，所以目前已经停玩了。除了上面提到的三款游戏，我其实还买了《巫师3》和《古剑奇谭3》，但也因为兴致和时间原因没有玩。毕竟“我都花钱买游戏了，为什么还要再花时间去玩？” 😄</p>
<h3 id="锻炼">锻炼</h3>
<p>大概因为睡眠不足的原因，来腾讯半年不到，我就虚胖了十斤。有段时间我几乎不敢发朋友圈照片，因为得到的评论清一色都是这样的：</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/comments.jpg" alt="评论"></p>
<p>痛定思痛之下，我决定减肥。一开始是采用晚上不吃饭改吃水果的策略，但发现收效甚微。于是开始跑步。一开始我的跑步方式不正确，节奏过快，跑不到一公里就已经累到不行了。直到有一次被 Jolt 叫出去一起跑，才打通了任督二脉：他的理念是要控制好节奏。好的节奏就是在跑的过程中能自如谈话。经他这么一调教，我周末回家一次就跑了六公里，成就感爆棚。</p>
<p>为了控制自己的体重，促进新成代谢，我开始尽量避免喝冰饮，改喝黄芪水。同时为了改善自己的睡眠，我把原来的弹簧床垫扔了，换成了乳胶床垫。如果晚上睡得比较晚，我还会吃一到两片褪黑素。这些或多或少都改善了一些睡眠质量。</p>
<p>不过从全年来看，我的日均睡眠质量依然很少。只有在年初春节期间睡眠达到了8个小时以上，这是因为我是一个对睡眠极度缺乏自律的人，总是拖延睡眠时间去做各种事情，例如一写起博客或者业余项目的时候就容易停不下来，搞到大半夜，而后又很容易因此兴奋得睡不着觉。在家的时候因为有老妈监督，所以就不会轻易熬夜。所以将来结婚对我而言其中一大收益应该是能多一个在身边督促我去睡觉的人吧。Anyway，希望明年我的日均睡眠时长能够至少提高到6个小时以上。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/sleep-hours.jpeg" alt="日均睡眠质量"></p>
<p>除了跑步之外，在夏天的时候我会尽量腾出时间保证每周去游一次泳，冬天则是每天饭后和同事绕着荔香公园或者深大走一圈步。为了督促大家运动，我们团队定了个规矩：每周步数少于四万步的罚红包。于是饭后刷步数就成了避免挨罚的“例行公事”。</p>
<p>经过这些改善后，我的体重下降了 5 斤，目前维持在 120 斤左右。我的朋友圈也总算摆脱了“发福”、“双下巴”的标签。</p>
<h3 id="看书">看书</h3>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/books.jpg" alt="books"></p>
<p>今年开始用上了微信读书，所以大部分的书都是通过手机来阅读。不过，这依然没有显著提高我阅读的数量：今年看的书依然少得可怜。如果把三体的三集算成三本的话，今年一共也就看了十本书。我只能用“看书在精不在多”来安慰自己了。按照喜欢程度由高到低的顺序往下评论吧：</p>
<ul>
<li>
<p><a href="https://book.douban.com/subject/2567698/" target="_blank" rel="external">三体</a>：终于把《三体》看了一遍。第一部大致讲述三体文明发现了地球文明，于是派出舰队意图侵略地球，并在舰队到达地球前通过智子技术限制地球科学的发展；然而三体人存在不善计谋的致命缺陷，于是在第二部中人类派出了四个面壁者来意图瞒过三体人的监视并阻止三体人的侵略，而三体人也在地球人中找到破壁者来识破面壁者的计划。最终其中一个面壁者罗辑成功地造出了能够在宇宙中通过引力波曝光地球和三体文明的开关，并利用黑暗森林法则来威慑三体人停止侵略；在第三部中，人类面对三体人的卷土重来终于启动了引力波向宇宙广播了三体文明和地球的位置，最终一起走向了被降维打击的命运。当然三言两语只能把基本的故事剧情讲得索然无味。要真正了解故事细节，依然推荐亲自阅读本书。全书充满了各种geek们一看就懂的梗，比如巴赫的音乐，牛顿-莱布尼茨公式的梗，对冯·诺依曼的人肉计算机模型工作原理的介绍堪称精彩绝伦。可见作者是有比较好的物理和计算机功底的。另外书里提出了黑暗森林法则、宇宙社会学等宇宙间生存的要领。相比《银河漫游指南》的 don’t panic 而言，大刘的这些法则显得更冰冷、残酷而现实，但却更有说服力。</p>
</li>
<li>
<p><a href="https://book.douban.com/subject/1095634/" target="_blank" rel="external">小狗钱钱</a>：今年开始下意识地读一些关于理财相关的书籍，《小狗钱钱》就是一本非常值得推荐的科普读物。和其他的说教式书籍不同，这本书把理财知识写成一个童话故事，故事中的主人公吉娅跟她捡到的一只受伤的猎狗money学会了如何理财。通过这本书我了解了基金定投的基本操作概念，也开始定投起了基金。此外我非常喜欢书里的一段剧情：吉娅在学会了一些理财知识后，收到了银行职员海内女士的邀请，去给其他小朋友分享她的理财知识。起初她因为担心怯场而想拒绝。这时一个老者说了一句话改变了她的决定：</p>
<blockquote>
<p>我生命中出现了最美好的东西，是因为我做了原本不想做的事情。</p>
</blockquote>
<p>回顾这一年，大会分享、课程讲师、技术负责人……我在工作中也出现了各种各样的支线任务可以选择去做。而我除非不乐意，否则通常都会选择去做，因为我不知道会有什么美好的收获。</p>
</li>
<li>
<p><a href="https://book.douban.com/subject/1033778/" target="_blank" rel="external">富爸爸穷爸爸</a>：Jolt 吐血推荐的书《富爸爸穷爸爸》。早在以前也经常有人推荐这本书，但一直以为又是一本成功学的书，再加上听说写这书的作者也破产了，所以一直没看。其实这是一本讲如何培养财商的书。从小到大我们受到的教育都是穷爸爸的教育“好好读书，将来找份好工作赚钱”，所以我们都被培养成为钱工作。这本书讲的是富爸爸的教育：如何让钱为你工作，成为钱的主人。虽然读完未必会暴富，但多一些富爸爸的思维，少一些韭菜思维和小鸡思想是很有益的。内容不厚，四个小时左右就可以读完。</p>
</li>
<li>
<p><a href="https://book.douban.com/subject/26954760/" target="_blank" rel="external">月亮与六便士</a>：讲述了查尔斯·斯朱兰人到中年放弃了自己让人羡慕的银行家的事业以及美满的家庭选择去当画家的离奇一生。从世俗的眼光看来，查尔斯是一个极其让人讨厌的奇葩。但他丝毫没有受到外界的指责的影响，依然执着地追求自己的理想，甚至不惜为此忍受饥寒交迫的生活。从这个角度来看，他又是伟大的。想起了漫威之父 Stan Lee 对年轻人的告诫：</p>
<blockquote>
<p>I think whatever you do, you should do what you most want to do.</p>
</blockquote>
<p>看完这本书我也不禁在反思自己想要的究竟是什么，目前而言，通过写一些方便自己和他人的技术工具并开源分享也许是最让我感受到乐趣的事情。从这个角度上来看，我是幸运的，因为我的最主要兴趣和我的本职工作相关，我还不至于为了追求自己的“月亮”而放弃现在能赚到“六便士”的生活。</p>
</li>
<li>
<p><a href="https://book.douban.com/subject/27103997/" target="_blank" rel="external">年糕妈妈轻松育儿百科</a> ：今年我哥生了个女儿，我们的大家庭迎来了一个新的生命。抱着小侄女的时候，我感受到了一种生命奇迹带给我的震撼和感动。儿童在初生阶段的养育方式正确与否可能会对将来她的一生产生着微妙的影响。所以为了帮助哥嫂分担，我阅读了一些育儿书籍。《年糕妈妈的育儿百科》就是其中一本我认真看完的工具书，通过这本书了解到了不少育儿的宝贵经验，并在适当时候分享给哥嫂，纸上谈兵地提供了一些参考意见，也顺便为我将来带娃做一个预热吧。当然，我需要先解决脱单问题了再说。</p>
</li>
<li>
<p><a href="https://book.douban.com/subject/27003014/" target="_blank" rel="external">半小时漫画中国史</a>：以漫画的形式和现代化的语言重新解说历史，形式新颖，内容也很风趣幽默。缺点就是为了用半小时讲完中国史，内容作了极大地压缩，读起来感觉始终有种快餐感，就像是在突击期末考点大纲。另外，为了尽可能有趣，人物的刻画也做了脸谱化处理，阅读过程中就像是在用上帝视角看每个人物角色依次登台唱戏然后领个便当回家——你并不能指望通过本书了解这些历史人物做某件事的背后有什么复杂的心理动机。相比之下，一些历史题材的小说则用的是VR视角——例如当年明月的《明朝那些事儿》就把明朝的人物刻画得栩栩如生，阅读过程中置身在明朝的世界里，近距离观摩每个人的行为，解读他们的思想。所以，如果要更细致的了解历史，精读某个具体朝代的相关书籍依然是必不可少的。当然，《半小时漫画中国史》的目的也不在此，相反它只是希望用极简的篇幅带读者了解一些历史重点事件。从这点来看，它是成功的。</p>
</li>
<li>
<p><a href="https://book.douban.com/subject/3533221/" target="_blank" rel="external">非暴力沟通</a>：看到标题就被吸引了。中国人比较注重婉转，过分担忧对方的感受，其实反而给沟通带来了障碍。这本书重点讲述了一种更加有效的沟通方式：观察-&gt;感受-&gt;需要-&gt;请求。并且提倡倾听的重要性（而这是我的弱项）。不过，要在日常中合理应用存在一定的难度，需要多多练习。</p>
</li>
<li>
<p><a href="https://book.douban.com/subject/30314653/" target="_blank" rel="external">韭菜的自我修养</a>：书很薄，一个小时就能看完的篇幅，但定价19.9有点小贵。前面关于投资相关的内容也比较老生常谈。不过，既然是写给韭菜看的，确实也针对性了提出了不少韭菜的思维误区。有则改进，无则加勉。还是有所收获。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="http://hahack-1253537070.file.myqcloud.com/images/a-good-book.jpeg" alt=" 网播节目《一本好书》"><b>附图 6</b>  网播节目《一本好书》</span></span></span></p>
</li>
</ul>
<p>顺便推荐《一本好书》这档网播综艺节目。这个节目的亮点在于通过舞台戏剧、片段朗读、影像图文插播等手段，还原了《三体》、《月亮与六便士》等11本经典作品的经典场景。我是先看了《三体》的书再看的综艺改编，一边看一边惊叹导演组的改编再创作的能力。《三体》的故事非常庞大，仅一集网播节目的篇幅肯定讲不完。所以导演组选取了第二部面壁者和破壁者之间对弈的桥段进行改编。有意思的是，为了突出重点，三个破壁者被合成了一个人，另外还通过插播了早前网友自制的水滴概念视频，很好地表现出了三体人的科技水平。而饰演罗辑的赵立新的表演就像在TED演讲一样，把整个浓缩版的故事串得非常清晰，也把宇宙社会学讲述得非常透彻。</p>
<p>看完《一本好书》后我也对节目中介绍的其他书来了兴趣，《月亮与六便士》就是我在这档节目播出后开始阅读的。明年希望能把这季的《一本好书》中的书单都看完。</p>
<h3 id="感情">感情</h3>
<p>最后是感情生活。今年三月份我其实有很认真地谈了一段恋爱，然而从开始到结束只有短短两个月，对我打击非常地大。虽然事后还是做了不少挽回的努力，到了后面对方似乎也没有明确的拒绝了，但自己反而突然有了一种莫大的压力，怕再次搞砸，所以再也没敢约出口。有时一个人的时候会责备自己为什么不再约，为什么不厚着脸皮磨下去，但被拒绝的滋味又实在太难受。何况当周围的人都一致建议放弃的时候，放弃就成了一个非做不可的选择。</p>
<p>事后我一直在反思自己究竟为什么没有成功。其实周边的人一旦知道我单身，多数都会表现得非常诧异，因为我并不像是一个会注孤生的人。实际上一个人感情是否顺遂和他的条件并没有必然的联系，否则就不会有很多钻石王老五的存在了。我想我就是属于那种特别不适合谈恋爱的人。我的业余兴趣不管是乐器、看书、写博客、业余小项目都比较宅，平时也没有一个人到处去玩的爱好和动力，所以一旦要约女孩子出来，就会为了去哪吃和去哪玩发愁。另外我追女孩子的手段简单而愚笨，居然会想到用情书来表白。以至于后面的约会对方变得不自在了起来，而我又没有能力去化解这种不自在。我就像《月亮与六便士》里的德克，即使付出了全部的感情，也始终不能赢得布兰奇的芳心。</p>
<p>有些人的给建议是先随便找个人发展一下感情，锻炼下这方面的技能。这样遇到真正喜欢的人就不会表现得太怂。但我觉得这样自欺欺人的方式太流氓了，对待感情我还是坚持宁缺毋滥的态度。我也挺反感用一些欲擒故纵的套路来“泡妞”。喜欢就是喜欢，为什么非要假装不在乎？相比之下，我似乎更适合活在《上古卷轴5》的世界里，至少那个世界的人们从相识到结婚没有太多的套路。然而真实情况是，人们对越容易得到的东西越不会去珍惜。就像陈奕迅《红玫瑰》里的歌词：</p>
<blockquote>
<p>得不到的永远在骚动，被偏爱的都有恃无恐。</p>
</blockquote>
<p>所以我有时候会冒出用技术手段来帮助恋爱的念头，比如智能 match 合适人选，用 NLP 分析 IM 里对方的应答，提供化解尬聊的话题建议，或是自动根据双方喜好预定餐馆和菜式。无奈当前的 NLP 技术还不够成熟，而且这样的话似乎双方并不是真正地在交往，而是变成由机器人来确定恋爱关系——人在这场恋爱中反而成了傀儡了。就像《黑镜》第四季第 5 集《Hang the DJ》中的桥段，过度依赖技术来培养爱情其实是很容易弄巧成拙的。</p>
<p><img src="http://hahack-1253537070.file.myqcloud.com/images/match.jpg" alt="在《Hang the DJ》中，人们依靠一个长得像Google Nest的装置来匹配伴侣"></p>
<p>不过这段感情对我而言还是带来了一定的收获的。除了反思自己在处理感情方面的天真和稚嫩之外，更重要的是更确定了自己喜欢什么类型的女孩子。亲戚朋友后面又陆陆续续介绍了不少女孩子，条件都很不错，但都因为没有那个人所带来的难以言喻的美好感觉而没有选择进行下去。大概我是很执着于第一感觉的人，感情如此，处理其他事情也这样。失恋后的那一周，心情糟糕得很，于是决定去看看房子散心，没想到一天不到就看上了一个房子，当天就谈好价钱并签了合同。我大概是周围所有人中看房最快的人了。</p>
<p>不论如何，没有伴侣其实我一个人也能生活得很充实，所以恋爱和婚姻对我而言并不是特别迫切的东西。如我所说，我还是抱有宁缺毋滥的态度。只是一个人难免会有孤独的时候，而且会开始怀疑自己究竟在为了什么而忙碌。关于恋爱观，我比较赞同 pluskid 的观点，在这里直接摘抄一段出来：</p>
<blockquote>
<p>关于恋爱观，我也有考虑过一点。也许将来的想法会改变，不过现在我的态度是恋爱婚姻这些东西并不是人生目标甚至不是人生必须要经历的的一个 milestone，所以我大概不太会刻意去追求，当然也并不持反对态度。对我来说一个人和两个人大概就是不同的生活方式吧，一个选择问题，孰优孰劣无法定论。客观来讲我一个人就能开开心心地过，事实上我的生活看起来好像是非常充实的，甚至有时候非常亲密的朋友也会觉得我好像就不可能有空虚无聊的时候，然而事实并非如此，我想这大概就好比你再有钱也会有买不起东西的时候吧？——不同的人会有不同的烦恼。同理，两个人的生活也是有取有舍吧，我一点也不否认爱情的强大魔力显然也是这宇宙中独一无二的一种存在。</p>
</blockquote>
<h2 id="总结和期望">总结和期望</h2>
<p>年底的忙碌程度超出了我的预期。本来希望赶在 2018 年的尾巴写完这篇总结，结果到接近写完的时候，2019 年的 1 月都已经快结束了。Anyway，2018 年依旧是非常充实的一年。有很多新的尝试和挑战。我还在年初组了一个合唱团，并当了一回合唱团的领唱，还进了次录音棚录唱。还有六月份终于跑去听了场喜欢了十三年的偶像王力宏的演唱会，唯一的遗憾是同行的人由喜欢的人换成了自己的哥哥。</p>
<p>19 年有几个目标：</p>
<ol>
<li>继续改善睡眠。</li>
<li>把《一本好书》里的推荐书单读完。</li>
<li>买车，并成为一个合格的司机。</li>
<li>完成至少一次说走就走的旅行。</li>
</ol>
<p>至于爱情，随缘吧。</p>
]]></content>
    <category scheme="http://hahack.com/tags/travel/" term="travel"/>
    <category scheme="http://hahack.com/tags/music/" term="music"/>
    <category scheme="http://hahack.com/tags/games/" term="games"/>
    <category scheme="http://hahack.com/tags/comment/" term="comment"/>
    <category scheme="http://hahack.com/tags/summary/" term="summary"/>
    <category scheme="http://hahack.com/categories/life/" term="life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用 BeamerStyleSlides 制作你的技术答辩 PPT]]></title>
    <link href="http://hahack.com/work/introducing-beamerstyleslides/"/>
    <id>http://hahack.com/work/introducing-beamerstyleslides/</id>
    <published>2018-12-27T15:46:15.000Z</published>
    <updated>2019-01-07T14:19:21.481Z</updated>
    <content type="html"><![CDATA[<h2 id="背景：ppt之痛">背景：PPT之痛</h2>
<p>年末，又到了很多朋友准备答辩晋升 slides 的时候。<q>PPT工程</q> 应该是很多技术人的天敌之一，不少人为了在工作之余折腾出一份既有内容又美观的 slides 弄得焦头烂额。</p>
<p>其实，大家对 <q>PPT工程</q> 之所以这么惶恐，主要是因为技术人更习惯跟代码打交道，更习惯用技术思维去解决问题。而做材料考察的是信息的提取整合能力、审美品味以及口头表达能力，而这些都不是做技术的必要条件。</p>
<p>然而，也不必对使用 slides 答辩过于深恶痛绝，它只是一个用来说你的故事的工具：我们不应该被工具所束缚，而应该把它用好，将它变成你的优势。我私下里也看过不少同事的答辩材料，发现了一个很有趣的现象：往往内容非常好的材料，美观度也很高，看起来赏心悦目。而内容一般的材料，排版、美观度也比较糟糕，缺乏美感。工程师的素养，在做 slides 花的心思上面也能够体现出来。</p>
<a id="more"></a>
<h2 id="为什么要做-beamerstyleslides">为什么要做 BeamerStyleSlides</h2>
<p>其实，做一个大方美观的 slides 并不简单，我在准备今年年中的答辩的时候，花费最多的时间居然是工具和模板主题的选择上。</p>
<p>做 slides 有非常多种选择，PowerPoint、Keynote、LaTeX+Beamer、reveal.js、Emacs org-mode、Jupyter Notebook……抛开过于花哨的 H5 系和不顺手的 Keynote，我的选择就在 PowerPoint 和 LaTeX Beamer 上。</p>
<p>LaTeX + Beamer 一开始是我的首选，因为 Beamer 的主题大方简洁，非常适合用作学术汇报和晋升述职。这是 beamer 的官方主题：<a href="http://www.hartwork.org/beamer-theme-matrix/" target="_blank" rel="external">http://www.hartwork.org/beamer-theme-matrix/</a> 可以看到这些主题全都非常精美大方。</p>
<p><img src="/images/introducing-beamerstyleslides/beamer.jpg" alt=""></p>
<p>我也用 Beamer 做过非常多的 slides ，对它的排版效果可以说是爱不释手：<a href="https://github.com/wzpan/wzpan.github.io/wiki/slides" target="_blank" rel="external">https://github.com/wzpan/wzpan.github.io/wiki/slides</a></p>
<p>正当我兴高采烈地写了很多页之后，我发现我忘了一个很严重的问题：Beamer 不支持直接插入视频。要播放视频，你需要先将视频转成帧图像，然后使用 animation 包来实现播放，而且只支持 Adobe Reader。体验非常糟糕。</p>
<p><img src="/images/introducing-beamerstyleslides/challenge.png" alt=""></p>
<p>于是我放弃了 LaTeX ，转回使用 PowerPoint 。但是我又花了非常多时间在寻找一个好看简洁的模板。我发现一个看上眼的都没有。</p>
<p>网上找了一些模板，都太过华丽，不符合工程师的气质：</p>
<p><img src="/images/introducing-beamerstyleslides/fashion1.jpg" alt=""></p>
<p><img src="/images/introducing-beamerstyleslides/fashion2.jpg" alt=""></p>
<p>最终我决定复刻一个 Beamer 的主题作为模板，有了一份称手的模板，写 slides 真的是效率大增，最终的效果个人是挺满意的。这里挑其中几页做个示例：</p>
<p><img src="/images/introducing-beamerstyleslides/josephpan.jpg" alt=""></p>
<p>为了让像我一样审美较差的码农也能用 powerpoint/keynote 做出媲美 LaTeX Beamer 的 slides，成为一名合格的PPT工程师，轻松应对答辩晋升、技术分享和学术交流的任务，我从答辩结束后就开始了一个名为 BeamerStyleSlides 项目：对 Beamer 的更多官方主题进行复刻，并且在 Github 上开源：<a href="https://github.com/wzpan/BeamerStyleSlides" target="_blank" rel="external">https://github.com/wzpan/BeamerStyleSlides</a> 。这就是 BeamerStyleSlides 的由来。</p>
<p>另外，选择在 Github 上开源还有一个目的：就是让更多的人参与进来，贡献他们的模板。有很多人私下里收藏了一些非常美观实用的模板，与其独享，不如共享。</p>
<h2 id="beamerstyleslides-介绍">BeamerStyleSlides 介绍</h2>
<p><img src="https://raw.githubusercontent.com/wzpan/BeamerStyleSlides/master/preview/tile.png" alt="BeamerStyleSlides"></p>
<p>BeamerStyleSlides 是 LaTeX Beamer 风格的幻灯片模板集。包含了PowerPoint和Keynote两套格式。尤其适用于晋升述职、技术分享和学术汇报。</p>
<ul>
<li>官方主页：<a href="http://www.hahack.com/BeamerStyleSlides/" target="_blank" rel="external">http://www.hahack.com/BeamerStyleSlides/</a></li>
<li>Github地址：<a href="https://github.com/wzpan/BeamerStyleSlides" target="_blank" rel="external">https://github.com/wzpan/BeamerStyleSlides</a></li>
</ul>
<h2 id="克隆方法">克隆方法</h2>
<ol>
<li>安装 git-lfs。为了节省仓库大小，项目使用 git-lfs 来对 <code>*.key</code> 和 <code>*.pptx</code> 文件进行版本控制。所以，在克隆前，要求先 <a href="https://git-lfs.github.com/" target="_blank" rel="external">安装好 git-lfs</a> 。</li>
<li>安装完成后再执行 git clone 操作：</li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/wzpan/BeamerStyleSlides.git</div></pre></td></tr></table></figure></p>
<h2 id="使用技巧">使用技巧</h2>
<ol>
<li>首先可以在 <a href="https://hartwork.org/beamer-theme-matrix/" target="_blank" rel="external">beamer-theme-matrix</a> 中找找看有没有心仪的样式；</li>
<li>在上面的主题列表中看看对应的主题是否已经完成了复刻。</li>
<li>如果有，可以点击查看预览图，看看效果是否满意。</li>
<li>一些底部带有包含作者信息（author）、标题（title）字段的主题，可以通过编辑母板修改对应字段的值。</li>
</ol>
<h2 id="设计思路">设计思路</h2>
<p>所有主题的风格尽力与 Beamer 所提供的风格保持一致。可以在 <a href="https://hartwork.org/beamer-theme-matrix/" target="_blank" rel="external">beamer-theme-matrix</a> 中查看对应的主题样式。</p>
<p>不过，我做了一些取舍：</p>
<ol>
<li>去掉了深色背景主题。个人认为深色背景主题在处理白底的图片时很不美观，所以我没有制作深色背景的 slides 的动力。当然，我愿意接受深色背景主题的pull request。</li>
<li>PowerPoint 和 Keynote 并没有提供类似 Beamer 那样酷炫的导航栏功能，所以带导航栏的主题都不会进行复刻。</li>
</ol>
<p>要注意的是模板并没有做到 100% 遵循原始的效果，毕竟 PowerPoint、Keynote 和 Beamer 各自的支持的能力有差异。我更希望做到的是在保留 Beamer 原有的风格的基础上因地制宜地做些调整。</p>
<h2 id="我需要帮忙">我需要帮忙！</h2>
<p>BeamerStylesSlides 的目标是复刻 Beamer 上的 252 套主题，而因为个人精力有限，目前大概以每周两套主题的龟速，暂时先完成了 51 套主题的复刻。如果你对这个项目感兴趣，欢迎 fork 这个项目并参与复刻。</p>
<p>参与方式：</p>
<ol>
<li>安装配置好 LaTeX + Beamer 环境，并安装好用于生成封面图的 imageMagicK。例如 Mac 下可以这么安装：</li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install imagemagick</div></pre></td></tr></table></figure></p>
<ol start="2">
<li><a href="https://github.com/wzpan/BeamerStyleSlides/tree/master/benchmark" target="_blank" rel="external">benchmark</a> 目录中包含了一份 LaTeX + Beamer 制作的 slides ，作为整套模板制作的参照。将里头的 <code>theme</code> 和 <code>colortheme</code> 分别修改为你要参与复刻的主题 collection 名和 colortheme 名：</li>
</ol>
<p><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="command">\usetheme</span><span class="special">{</span>Antibes<span class="special">}</span></div><div class="line"><span class="command">\usecolortheme</span><span class="special">{</span>lily<span class="special">}</span></div></pre></td></tr></table></figure></p>
<p>然后使用 <code>xelatex slides.tex</code> 编译得到 slides.pdf 文件。</p>
<ol start="3">
<li>对照这个 slides.pdf，编辑一个 pptx 母版，使之在排版、配色、列表项风格上尽量接近于这个 benchmark 。完成后保存，并导出一份 pdf 文件，以 colortheme + <code>.pdf</code> 的命名方式放进 preview 目录中，例如 <code>lily.pdf</code> 。</li>
<li>使用 keynote 导入这个 PPT，调整下个人经历这一节中的层级即可另存为 <code>.key</code> 模板。</li>
</ol>
<p><img src="/images/introducing-beamerstyleslides/adjust.jpg" alt="调整层级"></p>
<ol start="5">
<li><code>cd</code> 进入 preview 目录，执行如下命令生成封面图和预览图：</li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh montage.sh theme名 colortheme名</div></pre></td></tr></table></figure></p>
<p>例如：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh montage.sh Antibes lily</div></pre></td></tr></table></figure></p>
<ol start="6">
<li>编辑 <a href="http://README.md" target="_blank" rel="external">README.md</a> ，加入你复刻的主题，提交并给我发 pull request 。</li>
</ol>
<h2 id="如何贡献其他主题">如何贡献其他主题</h2>
<ul>
<li>欢迎 fork 这个项目，并通过 pull request 的形式贡献你的主题！
<ol>
<li>第三方模板请分别保存到 Keynote / PowerPoint 目录里的 Contrib 目录中；</li>
<li>比较省事的制作方式是先制作一个 PowerPoint 的模板，然后在 Keynote 里导入 PowerPoint 模板再另存为 Keynote 模板；</li>
<li>完成后别忘了在 <a href="https://github.com/wzpan/BeamerStyleSlides#%E7%AC%AC%E4%B8%89%E6%96%B9%E4%B8%BB%E9%A2%98" target="_blank" rel="external">第三方主题</a> 里添加你的大作。</li>
<li>主题的存放必须遵循按照现有的目录形式：</li>
</ol>
</li>
</ul>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[-] ~/Documents/projects/BeamerStyleSlides/</div><div class="line"> |-[-] Keynote</div><div class="line"> |  |-[-] Contrib</div><div class="line"> |  |  |-  mycustom.key  <span class="comment"># 你的主题名</span></div><div class="line"> |  |  ‘-  <span class="keyword">...</span></div><div class="line"> |  ‘-  <span class="keyword">...</span></div><div class="line"> |-[-] PowerPoint</div><div class="line"> |  |-[-] Contrib</div><div class="line"> |  |  |-  mycustom.pptx <span class="comment"># 你的主题名</span></div><div class="line"> |  |  ‘-  <span class="keyword">...</span></div><div class="line"> |  ‘-  <span class="keyword">...</span></div><div class="line"> |-[-] preview</div><div class="line"> |  |-  <span class="keyword">...</span></div><div class="line"> |  |-  Contrib-mycustom-cover.jpg  <span class="comment"># 你的主题封面图</span></div><div class="line"> |  |-  Contrib-mycustom.jpg        <span class="comment"># 你的主题预览图</span></div><div class="line"> |  ‘-  <span class="keyword">...</span></div><div class="line"> ‘-  README.md  <span class="comment"># 完成后编辑这个README，在第三方主题中插入你的主题说明。</span></div></pre></td></tr></table></figure></p>
<p>最后，祝愿参与晋升答辩的朋友都能取得最终的胜利！</p>
]]></content>
    <category scheme="http://hahack.com/tags/beamer/" term="beamer"/>
    <category scheme="http://hahack.com/tags/LaTeX/" term="LaTeX"/>
    <category scheme="http://hahack.com/tags/PowerPoint/" term="PowerPoint"/>
    <category scheme="http://hahack.com/tags/Keynote/" term="Keynote"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[公开课：使用Cocos Creator开发微信小游戏《2048》]]></title>
    <link href="http://hahack.com/codes/writing-2048-wechat-game-in-cocos-creator/"/>
    <id>http://hahack.com/codes/writing-2048-wechat-game-in-cocos-creator/</id>
    <published>2018-12-25T16:39:54.000Z</published>
    <updated>2019-05-03T17:48:02.317Z</updated>
    <content type="html"><![CDATA[<p>上个月抽了个时间，给腾讯课堂制作了一个免费公开课《使用Cocos Creator开发微信小游戏2048》，分享了使用 Cocos Creator 开发微信小游戏的经验。</p>
<p>如果你对微信小游戏开发感兴趣，欢迎前往观看。</p>
<p>（PS: 请忽略散发着寒光的头像……）</p>
<p><i class="fa fa-video-camera"></i> <a href="https://ke.qq.com/course/350627" target="_blank"> 课程免费观看地址 </a></p>
<p><i class="fab fa-github"></i> <a href="https://github.com/wzpan/2048" target="_blank"> 课程源码 </a></p>
<p><i class="fa fa-download"></i> <a href="https://share.weiyun.com/5k7jNfP" target="_blank"> slides 下载地址 </a></p>
<a id="more"></a>
<p>学习这门课之前需要先了解 Cocos Creator 的基本使用，以及具备一定的 JS 语法基础。如果你对这些没有足够的了解，那么看这门公开课会比较吃力。</p>
<p>如果你是这种情况，或者学完觉得意犹未尽，希望学习更多内容，那么我建议你可以去学习一下我们的另一门付费课程《<a href="https://ke.qq.com/course/326820?tuin=1b8113f4" target="_blank" rel="external">微信小游戏入门与实战</a>》，这门课汇集了我们团队在使用 Cocos Creator 开发微信小游戏上的经验，由我们多名成员在业余时间整理录制而成（我已经数不清为了达到质量要求而修改重录了多少遍 <code>T_T</code> ）。课程将会提供更全面而系统的教学内容。</p>
<p>有多<q>全面而系统</q>呢？可以感受下我在项目初期为这个课程系列设计的教学大纲 <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>严谨起见，这里加个免责说明：大纲只起到初步划定教学内容的作用，最终呈现的课程内容请以实际视频为准，因为各章讲师在讲解时会根据个人喜好做些调整。 </span></span></span>：</p>
<p><img src="/images/writing-2048-wechat-game-in-cocos-creator/mindmap.png" alt="微信小游戏入门与实战课程大纲"></p>
]]></content>
    <category scheme="http://hahack.com/tags/Cocos-Creator/" term="Cocos Creator"/>
    <category scheme="http://hahack.com/tags/Javascript/" term="Javascript"/>
    <category scheme="http://hahack.com/tags/Course/" term="Course"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[基于 Cocos 的高性能跨平台开发方案]]></title>
    <link href="http://hahack.com/codes/cocos-based-high-performance-cross-platform-app-developing/"/>
    <id>http://hahack.com/codes/cocos-based-high-performance-cross-platform-app-developing/</id>
    <published>2018-07-06T16:00:00.000Z</published>
    <updated>2018-07-07T03:52:04.096Z</updated>
    <content type="html"><![CDATA[<p>2018 年 6 月 <a href="https://gmtc.geekbang.org/" target="_blank" rel="external">GMTC 全球移动技术大会</a>在北京举办，大会旨在通过聚焦前沿技术与实践经验帮助参会者了解移动开发、前端领域最新的技术趋势与最佳实践。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/gmtc-2018.png" width="300" height="300" title="GMTC2018"></p>
<p>我作为讲师嘉宾也参与了这次大会，分享了《基于 Cocos 的高性能跨平台开发方案》。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/me-on-gmtc.jpg" width="500" height="500" title="我的GMTC首秀"></p>
<p>如下是整理后的演讲正文。</p>
<a id="more"></a>
<hr>
<p>大概从去年九月份开始，我们选择使用Cocos来作为我们一款产品 ABCmouse 的跨平台应用开发方案，在这个过程中，我们做了一系列的优化，也踩了一些坑，本文将对这个过程做一个回顾和总结。</p>
<p>本文的内容主要分三块来讲。首先简单介绍一下项目背景，接下来具体介绍下我们的实践过程，分享一些经验。最后给出新的开发方案和以前的效果对比。</p>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/cocos-based-high-performance-cross-platform-app-developing/audience.jpg" alt=" 现场观众"><b>附图 1</b>  现场观众</span></span></span></p>
<h2 id="项目背景">项目背景</h2>
<p>首先介绍一下我们的产品，ABCmouse 是美国知名的儿童英语在线学习领导品牌，在美国有超过百万家庭在使用，也获得了7万多个教师的推荐。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/abcmouse-legacy.png" alt="ABCmouse"></p>
<p>这个应用采用的是典型的 Hybrid App 跨平台开发方案，里头基本全是 H5 的页面。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/cocos-based-high-performance-cross-platform-app-developing/sashko-stuballo.jpg" alt=" Apollo GraphQL的开发者 Sashko Stuballo 也来了"><b>附图 2</b>  Apollo GraphQL的开发者 Sashko Stuballo 也来了</span></span></span></p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/hybrid-app.png" alt="ABCmouse是一款 Hybrid App"></p>
<p>Hybrid App 最大的问题就是性能问题，用户经常会在页面加载上等待非常多时间。</p>
<p>我们统计了 ABCmouse 各个场景的平均加载耗时，发现平均都要花费大约三到四秒的时间。漫长的等待时间也对用户的学习积极性带来影响。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/performance-legacy.png" alt="ABCmouse启动耗时统计"></p>
<p>从去年九月份开始，团队与 ABCmouse 的研发公司 Age of Learning 公司开展了战略合作，我们希望能够开发出一款针对中国儿童的英语学习应用——我们称之为 ABCmouse 腾讯版。我们希望它能提供更符合中国儿童使用习惯的学习路径，并在里头融入腾讯的社交元素，从而带动儿童外语学习的积极性。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/cocos-based-high-performance-cross-platform-app-developing/friends.jpg" alt=" 在GMTC上遇到很多老朋友"><b>附图 3</b>  在GMTC上遇到很多老朋友</span></span></span></p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/abcmouse-tencent.png" alt="ABCmouse腾讯版"></p>
<p>从技术上，我们希望新版的 ABCmouse 能够在表现力、性能、效率和社交四大方面都能有更好的表现（这里的表现力指的是产品的界面和交互，能够做到更吸引中国的小朋友）。</p>
<p>通过初期技术预研后，我们决定使用 Cocos 来改造这个项目：</p>
<ol>
<li>跨平台。Cocos 支持使用同一套代码构建生成 Web、iOS、Android 等几个端，最新的版本还支持发布到微信小游戏、Facebook Instant Games 和 QQ 玩一玩；</li>
<li>性能。Cocos 的原理是在 Activity 中绘制一个 OpenGL 的 SurfaceView ，并由其完成页面的渲染的。与基于 WebView 渲染的 Hybrid 应用相比，Cocos 的渲染速度更快，性能更好。</li>
<li>效率。借助可视化的 Cocos Creator 工具，界面的开发和资源的管理非常便捷，设计团队也可以参与进来设计界面和动效，提升开发效率。</li>
<li>表现力。ABCmouse 中包含了很多诸如游戏、画图、音乐等带游戏和娱乐性质的场景，而 Cocos 本身是为游戏开发设计的，更适合用在我们的产品中。</li>
</ol>
<h2 id="具体实践">具体实践</h2>
<p>在具体实践这一块，我准备分成架构篇、甜头篇、踩坑篇、优化篇四个部分来介绍。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/cocos-based-high-performance-cross-platform-app-developing/friends-2.jpg" alt=" 新认识的一帮来自腾讯、Facebook、Twitter、UC、搜狗的小伙伴。我们开玩笑说互联网社交圈快凑齐了。学会一个新词儿，叫做“局气”。"><b>附图 4</b>  新认识的一帮来自腾讯、Facebook、Twitter、UC、搜狗的小伙伴。我们开玩笑说互联网社交圈快凑齐了。学会一个新词儿，叫做“局气”。</span></span></span></p>
<h3 id="架构篇">架构篇</h3>
<p>一图胜千言。我们整个系统架构可以用这张图来概括。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/infrastructure.png" alt="新版ABCmouse的应用架构"></p>
<p>我们自底向上看，最底层是 native 层，Cocos2d-x 开发框架,在这一层提供了对 JavaScriptCore、SpiderMonkey、V8、ChakraCore 等多种可选的 JS 执行引擎的封装。在这基础上又架设了一层 JSB ，主要起到桥接作用。我们的应用也在底层封装了多种基础能力，包括支持直出的webview、自定义的视频播放器、音频播放器、支付、推送等。</p>
<p>再往上是 JS 层，在这一层 Cocos 提供了丰富的开发组件和 API，我们也扩展了多种组件，包括一些通用的UI组件、一个多端通用的音频播放器、一个带缓存和内存回收功能的图片加载器、常驻节点、上报、日志等组件。有些组件是依赖 native 层的。</p>
<p>Cocos 层和 Native 层就通过 callStaticMethod 和 evalString 来完成互相调用。</p>
<p>有了这些基础后，再往上则可以开展具体的场景开发了。</p>
<p>为了帮助大家更好地理解 Cocos 的跨平台原理，我们可以拿 Cocos 的渲染原理和 React Native 做一个对比。</p>
<p>Cocos 的渲染原理是在 UI 线程将场景文件理解成场景树，然后交给 GL 线程渲染。也就是说，用户看到的大部分场景都是使用 OpenGL 或者 WebGL 绘制的，即使在不同的平台，也能够有完全相同的表现。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/cocos-rendering.png" width="500" height="800" title="Cocos的跨平台绘制原理"></p>
<p>而 React Native 的渲染原理是将 JS/JSX 理解成 Virtual DOM，然后调用各自平台的 Widget 。由于不同的平台，底层的 Widget 表现是不同的，因此使用上可能会存在差异。这也是 React Native 为人诟病的一点。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/rn-rendering.png" width="500" height="800" title="React Native 的跨平台调用原理"></p>
<h3 id="甜头篇">甜头篇</h3>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/cocos-based-high-performance-cross-platform-app-developing/the-water-cube.jpg" alt=" 夜色中的水立方"><b>附图 5</b>  夜色中的水立方</span></span></span></p>
<p>采用 Cocos 作为我们的跨平台开发框架后，我们尝到了不少甜头。</p>
<p>首先是跨平台带来的便利。我们使用一套代码可以生成到安卓、iOS、Web、微信小游戏等多种平台，并且在多个端达到了高度一致的体验。在 React Native 上经常遇到的 UI 体验不一致的问题，在 Cocos 开发中基本没有遇到过。</p>
<p>由于Cocos支持构建小游戏版本的应用，所以我们的项目也提供了小游戏版本。上周末已经有很多爸爸在微信小游戏里收到了他们的孩子使用 ABCmouse 制作的贺卡。值得一提的是，小游戏版本是我们两个开发在花了一周左右的时间内移植完成的。这里头主要的移植工作在于接入微信小游戏的登录授权，接入 VideoPlayer 和 InnerAudioContext 以分别支持视频播放和音频播放。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/abcmouse-wxgame.png" alt="微信小游戏上的父亲节贺卡"></p>
<p>第二个甜头是开发效率的提升。</p>
<p>首先，Cocos 提供了可视化的 Cocos Creator ，使用它来管理和构建工程非常轻松。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/cocos-creator.png" alt="Cocos Creator"></p>
<p>其次，设计萌妹子也能直接使用 Cocos Creator 编辑动效，输出动效资源给开发，提高协作效率。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/cooperation.png" alt="设计妹子也使用 Cocos Creator 制作动画"></p>
<p>另外，Cocos Creator 支持直接在浏览器中预览调试场景，节省了大把构建编译的耗时。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/browser-debug.png" alt="直接使用浏览器调试场景"></p>
<p>第三个甜头是热更新带来的便利。</p>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/cocos-based-high-performance-cross-platform-app-developing/summer-palace.jpg" alt=" 颐和园摆渡"><b>附图 6</b>  颐和园摆渡</span></span></span></p>
<p>Cocos 同时支持脚本和资源的热更新，这给我们修复线上问题、发布运营活动带来了很大便利。</p>
<p>此外，Cocos 的热更新可以做到 hot reload，无需冷重启，很好的保证了用户的体验。并且，Cocos 的热更新支持高度可定制，可以很方便的定制满足业务需要的热更新流程。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/hot-upgrade.png" alt="ABCmouse 里的热更新"></p>
<p>第四个甜头是 Cocos 提供的强大的社区支持。Cocos 的开发团队来自中国，有着非常活跃的中文社区。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/cocos-forum.png" alt="Cocos 的中文论坛"></p>
<p>另外，使用 Cocos 开发小游戏也成了最主要的方式，可见 Cocos 的受欢迎程度，也侧面证明了这套开发框架的生命力。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/cocos-on-wxgame.png" alt="使用 Cocos 开发小游戏的占比"></p>
<h2 id="踩坑篇">踩坑篇</h2>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/cocos-based-high-performance-cross-platform-app-developing/summer-palace-lion.jpg" alt=" 排云门前的石狮子"><b>附图 7</b>  排云门前的石狮子</span></span></span></p>
<p>跨平台开发虽然方便，但是在一些具体的实践中难免也会踩到坑。</p>
<p>首先，Cocos 主要是面向游戏开发的，要使用它来开发应用，少不了需要开发一些 UI 组件。因此，我们在 Cocos 层开发了一系列的通用 UI 组件，包括对话框、选择器、表单、按钮、toast、loading 等组件，这些组件遵循一套规范化的接口标准，使用起来非常便捷灵活。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/ui-components.png" alt="ABCmouse里的通用UI组件"></p>
<p>开发完 UI 组件后，我们发现这些组件的加载也存在问题。和原生应用开发不同，这些UI组件本质上都是挂载在场景里头的节点，如果没有调度的话，可能存在同时弹出多种弹窗和对话框的情况，整个场景就会变得很混乱。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/dialogmanager-before.png" alt="没有调度的情况下，可能出现场景混乱"></p>
<p>为了解决这种问题，我们写了一个针对 Cocos 的弹窗调度器，统一由它来调度弹窗，避免了弹窗的混乱。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/dialogmanager-after.png" alt="有调度的情况"></p>
<p>我们接下来遇到的另一个坑是 VideoPlayer 的置顶问题。</p>
<p>前面提到，Cocos 的场景是在 GL 上绘制的。例如，对于 Android 平台，Cocos 开启了一个 OpenGL 的 SurfaceView 来进行场景绘制。而这个 GLSurfaceView 不能直接支持渲染视频，所以，Cocos 提供了一个 VideoPlayer 组件用于播放视频。这个 VideoPlayer 是独立且置顶的一层。</p>
<p>这带来的一个问题是：无法在视频上绘制 UI 。</p>
<p>比如我们希望视频播放器里头能加上我们自定义的按钮、进度条，如果是直接在 Cocos 层对 VideoPlayer 进行封装的话，会发现这些 UI 元素会被视频本身遮盖，达不到定制界面的目的。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/videoplayer-cocos.png" alt="VideoPlayer 的置顶问题"></p>
<p>最终我们放弃了直接使用 Cocos 提供的 VideoPlayer 组件，而是在底层为各个端开发视频播放器，并各自实现界面的定制。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/videoplayer-customized.png" alt="改为各端实现 VideoPlayer"></p>
<p>视频播放问题解决了，我们又遇到了音频播放的问题。</p>
<p>由于应用中有非常多的音乐、音效、语音，为了减小包大小，大部分的语音素材放在 CDN 上，需要的时候才从 CDN 上拉取播放。少部分常见的音效会直接打进应用包中。而 Cocos 自带的 AudioEngine 组件在 Native 端只支持本地资源的播放。因此，我们又封装了一个跨平台的音频播放器，可以自动根据指定的音频路径决定使用播放方式：</p>
<ul>
<li>对于 Web 端或者 Native 端的本地资源文件，直接使用 AudioEngine 来播放。</li>
<li>对于 Native 端的远程音频，使用 Native 的播放器来播放。</li>
<li>对于小游戏环境，则使用小游戏的 InnerAudioContext 来播放。</li>
</ul>
<p>由于对外的接口只有一套，开发者无需考虑具体的平台和底层播放器的选择。并且可以使用同样的接口来统一管理不同的音频。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/audioplayer.png" alt="跨平台的 AudioPlayer"></p>
<p>最后我们遇到的一个比较严重的问题是 local reference table overflow error 问题。</p>
<p>为了复用 Native 端的能力，我们在 Cocos 层大量地使用反射机制来调用 Native 端提供的方法。然而，我们经常会遇到 local reference table overflow error 错误导致的界面卡死问题。</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] JNI ERROR (app bug): local reference table overflow (max=512) </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] local reference table dump: </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] Last 10 entries (of 512): </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 511: 0x12e45170 java.lang.String "" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 510: 0x12dd33c0 java.lang.Class&lt;com.tencent.abcmouse.report.DcReport&gt; </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 509: 0x12e45180 java.lang.String "" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 508: 0x12f89490 java.lang.String "59" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 507: 0x135a4f40 java.lang.String "1522668817662" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 506: 0x12e89400 java.lang.String "onLoad" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 505: 0x12e451d0 java.lang.String "" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 504: 0x12c8bc00 java.lang.Class&lt; </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 503: 0x12e451f0 java.lang.String "" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 502: 0x134627f0 java.lang.String "1522668817664" </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] Summary: </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 1 of android.opengl.GLSurfaceView$GLThread </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 222 of java.lang.Class (7 unique instances) </span></div><div class="line"><span class="attribute">A/art</span>: <span class="string">art/runtime/indirect_reference_table.cc:138] 289 of java.lang.String (289 unique instances)</span></div></pre></td></tr></table></figure></p>
<p>最初，我们怀疑是反射调用使用得太频繁导致。因此，我们对诸如打 log、事件上报等 Native 方法进行了频率限制，例如使用缓冲的方法将多个 log 合并后再打印。</p>
<p>然而，虽然这个做法减少了界面卡死的发生，但依然没有彻底杜绝问题的再次出现，就像是一个定时炸弹一样，威胁着我们应用的稳定性。</p>
<p>通过阅读引擎的代码，我们发现 Cocos 的引擎在反射阶段处理字符串参数时，使用了 <code>NewStringUTF()</code> 方法将其转换为 JNI 层的字符串，然而在调用执行完成后并没有相应地使用 <code>DeleteLocalRef()</code> 释放该字符串的引用，从而导致了引用表的溢出。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> bool JavaScriptJavaBridge_callStaticMethod(se::State& s)</div><div class="line">{</div><div class="line">    ……</div><div class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">3</span>) {</div><div class="line">        ……</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (call.isValid() && call.getArgumentsCount() == (argc - <span class="number">3</span>)) {</div><div class="line">            ……</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) {</div><div class="line">                <span class="keyword">int</span> index = i + <span class="number">3</span>;</div><div class="line">                <span class="keyword">switch</span> (call.argumentTypeAtIndex(i)) {</div><div class="line">                    ……</div><div class="line">                    <span class="keyword">case</span> JavaScriptJavaBridge::ValueType::STRING:</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        std::string str;</div><div class="line">                        seval_to_std_string(args[index], &str);</div><div class="line">                        jargs[i].l = call.getEnv()-&gt;NewStringUTF(str.c_str());  <span class="comment">// 这里没有释放！！！</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            ok = call.executeWithArgs(jargs);            </div><div class="line">            <span class="keyword">if</span> (jargs) delete[] jargs;</div><div class="line">            ……</div></pre></td></tr></table></figure></p>
<p>了解到这个原因后，我们给 Cocos 的引擎提交了一个 pull request，修复了这个问题。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/pull-request-description.png" alt=""></p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/pull-request-commit.png" alt="pull request"></p>
<h2 id="优化篇">优化篇</h2>
<p>虽然 Cocos 比起纯 Hybrid 的方案在性能上已经占据了优势，但是比起 native 还是有一些差距的。下面就说说我们在开发过程中尝试过的一些优化，让我们的应用做到接近原生的体验。</p>
<h3 id="高性能的-scrollview">高性能的 ScrollView</h3>
<p>官方 ScrollView 组件需要配合 layout 组件，当一次加载大量的子节点组件，或者分帧加载单个子节点组件时，初始化 ScrollView 节点视图会比较慢，在加载完成前存在拖动掉帧的问题。另外，一次性加载所有节点，也会导致内存资源的浪费。</p>
<p>下图这个场景是 ABCmouse 里的二级资源页，由于一次性加载了太多子节点，当屏幕滚动时，帧率降到了 8 fps 左右，给人的感受是非常卡顿。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/scrollview-legacy.png" alt="官方 ScrollView 处理大量子节点导致滑动卡顿"></p>
<p>我们对 ScrollView 进行了重写，基本的优化思路是：一次仅加载页面可容纳的少量数目子节点。并在滚动过程中，回收不可视的子节点组件并重用。</p>
<p>具体来说，ScrollView 大多数情况下表现为列表组件和宫格组件，以列表组件为例，可以根据子节点数目和子节点大小，计算出整个 ScrollView 内容的宽高，同时计算出屏幕可视区域最多可以容纳的子节点行数 rows，加载时仅加载 rows + 2 个子节点组件，其中添加的 2 个字节点组件作为滚动回收缓冲。</p>
<p>下图是对上述思路的图例。当手势向上，内容往下滚动时，一旦最上排的子节点组件不可视，就立马将它们回收掉并将其重用于将要渲染的子节点组件中。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/scrollview-before-scrolling.png" alt="高性能 ScrollView：滚动前"></p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/scrollview-after-scrolling.png" alt="高性能 ScrollView：滚动后"></p>
<p>这么做的优点在于：一次仅加载页面可容纳的少量数目子节点，并且逐帧加载，能极大提升展示和滚动性能，另外大大减少了内存占用。</p>
<p>经过优化后，不管二级资源页场景里有多少元素需要展示，整体的帧率都维持在 60 fps 左右，非常流畅。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/scrollview-new.png" alt="高性能 ScrollView"></p>
<h3 id="内存优化">内存优化</h3>
<p>内存占用过高也是 Cocos 开发过程中很容易遇到的问题。如果没有优化好内存占用，很可能就会引发黑屏或者 OOM。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/black-screen.png" alt="内存不足导致黑屏"></p>
<p>要优化内存占用，有几个思路。第一个思路是把内存消耗大以及没有回收的元凶先找出来对症下药。</p>
<p>于是，我们仿照 Cocos 的监视器也写了一个内存监视器，利用它来找出疑似存在内存泄漏的场景。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/memory-calculator.png" alt="内存监视器"></p>
<p>对于每一个场景，我们也对每个节点的内存占用做了一个排名，找出靠前的，分析是否合理，并进行针对性的优化。比如把原图缩小，把无需透明像素的png图转换成JPG图，等等。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/calculate-memory.png" alt="节点内存排名"></p>
<p>第二个思路是为图片渲染开启纹理压缩，从而大幅度降低图片渲染的内存占用。Cocos 提供了 ETC1、PVR 等几种纹理压缩方案，其中，PVR 兼容性最好，内存消耗也最低，但是质量较差；ETC1 不支持 iOS 的低端机型，质量也较差。我们又对 Cocos2d-x 进行扩展，增加了 ETC2 纹理压缩，这种方案的优势比起 ETC1 而言，压缩质量更好。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/texture-compressors.png" alt="三种纹理压缩方式"></p>
<p>下图可以看到 ETC2 和 PVR 压缩质量和内存占用的直观对比。
对比原图，我们可以看出 ETC2 的压缩结果与原图相差不大，但内存减少了 75% 。而 PVR 的压缩结果相比 ETC2 言在细节方面少了很多，内存则减少了 87.5% 。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/etc2-vs-pvr.png" alt="PVR / ETC2 效果对比"></p>
<p>针对兼容性问题，我们设计了一种混合纹理压缩方案：对于高质量要求的纹理，如果该机型能支持ETC2，就使用ETC2纹理压缩；如果不支持，就将该纹理进行大小减半压缩；对于低质量要求的纹理，使用兼容性好的PVR纹理压缩。单图渲染的内存消耗可以降低接近 75%~87.5%。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/mixture-compress.png" alt="混合纹理压缩方案（专利申请中）"></p>
<p>纹理压缩是一项耗时的任务，所以我们把这项任务放在项目构建完后进行，而不是在客户端运行的时候才动态压缩。</p>
<p>我们编写了一个扩展工具，在构建完成后自动进行纹理压缩任务。后面我们发现这个工具压缩完一遍纹理要花费大概3分钟的时间，我们又改进成了增量压缩的方式，一次压缩任务缩短到10秒左右。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/compress-plugin.png" alt="纹理压缩工具（即将开源）"></p>
<h3 id="drawcall-优化">drawcall 优化</h3>
<p>每一帧的渲染耗时直接影响到整个应用的性能，而和渲染耗时相关的操作是 drawcall 。</p>
<p>什么是 drawcall 呢？我们可以看这张图来了解一下。在一帧的渲染过程中，场景会先被解析成场景树。场景树的每一个节点依次加入渲染队列中等待交付 GPU 渲染。GPU 接收渲染指令并执行的操作就叫做一次 drawcall。在一帧里头，drawcall 越少，性能当然就越好。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/drawcall-1.png" alt="理解 drawcall"></p>
<p>Cocos 针对 drawcall 优化已经提供了一种自动合并技术：比如，上图中的渲染指令 1、2 来自贴图 A，3、4 来自贴图 B ,5、6、7 来自贴图 C，这些指令会被分别合并优化，最终只产生 3 次 drawcall。我们要做的就是利用好这个自动合并技术。</p>
<p>首先可以找出浪费 drawcall 的节点对症下药。一般可以通过把节点的 active 属性设为 false 看看 drawcall 有没有大量减少来判断。</p>
<p>接下来我们可以利用好 Cocos 的合并技术。</p>
<ul>
<li>对于静态的 Sprite ，可以使用合并图集来减少 drawcall 。例如使用 Cocos Creator 自带的 AutoAtlas 或者第三方工具 TexturePacker 。</li>
<li>文本的动态绘制也是 drawcall 浪费的重灾区。对于 Label，可以使用 BMFont 位图字体来取代普通文本，减少 drawcall 。</li>
</ul>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/autoatlas.png" alt="Cocos 提供的 AutoAtlas 自动图集功能"></p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/bmfont-label.png" alt="使用 BMFont 位图字体优化 Label 的 drawcall"></p>
<p>目前这套优化方案还不能满足动态资源和动画的优化，我们也期待 Cocos 能够把 batching 技术做得更完善。</p>
<p>另外，还有另外一个需要注意的地方：小心避免跨层切换合图。Cocos 是按照节点层级顺序依次提交渲染指令的，如果不注重层级顺序，可能会导致贴图的切换从而浪费不必要的 drawcall 。</p>
<p>例如，下图中的渲染指令 4 使用的是贴图 C，直接卡在了渲染指令 3 和 5 之间，导致贴图 B 的渲染指令没法合并，从而浪费了多余的 drawcall。通过调整节点层级可以避免这个问题。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/drawcall-2.png" alt="避免跨层切换贴图"></p>
<h3 id="hybrid-页面优化">Hybrid 页面优化</h3>
<p>我们的应用里头目前依然存在一些原来的版本遗留下来的 H5 页面构成的场景，对于这些 H5 页面，我们也使用了一些比较常规的 Hybrid 优化技术，来达到首屏直出的要求。</p>
<p>因为已经有很多现有的优化方案了，所以这一块我并不打算细讲。简单为大家罗列几个技术点吧：</p>
<ul>
<li>一个是使用离线缓存，对一些常用的 H5 场景，也可以离线打包进应用里头，优化首次启动速度。</li>
<li>一个是并行加载在 WebView 启动的同时并行地去拉资源，这样可以避免等待 WebView 初始化耗时对页面加载的影响。另外，还可以对一些 H5 页面进行预加载，减少等待。</li>
<li>一个是可以对页面进行少量标注，只增量更新需要动态变的部分。</li>
</ul>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/hybrid-optimize.png" alt="Hybrid 页面优化技术点"></p>
<p>通过这一系列的优化，我们的应用里头的 H5 页面的加载耗时也能够控制在 1 秒以内。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/hybrid-optimized-result.png" alt="Hybrid 页面优化效果对比"></p>
<h2 id="整体效果对比">整体效果对比</h2>
<p>最后我们来看一下整体的改造效果。</p>
<p>项目整体的 Cocos 化率目前占到了 56%，剩下的还有 40% 的 H5 的页面（主要是一些小游戏），还有像视频这种 native 场景。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/cocos-rewrite-rate.png" alt="ABCmouse 中的场景占比，其中只有Games和Videos不是Cocos"></p>
<p>对比原来的场景启动耗时，经过一系列改造和优化后的场景都能控制在 1 秒内启动。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/performance-compare.png" alt="启动耗时对比（左：老版ABCmouse；右：新版ABCmouse）"></p>
<p>直接看数据不够直观，我们可以看一下原来加载耗时最长的一个场景，经过改造后做到了秒开。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/coloring-legacy.gif" alt="涂色场景-改造前"></p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/coloring-new.gif" alt="涂色场景-改造后"></p>
<p>而腾讯版本的包大小也比原来的版本小了 64% 。</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/size-compare.png" alt="老版本和新版本的包大小对比"></p>
<p>欢迎扫码体验新版本的 ABCmouse ：</p>
<p><img src="/images/cocos-based-high-performance-cross-platform-app-developing/wxgame-code.png" width="400" height="400" title="扫码体验ABCmouse的小游戏版本"></p>
]]></content>
    <category scheme="http://hahack.com/tags/ABCmouse/" term="ABCmouse"/>
    <category scheme="http://hahack.com/tags/Cocos/" term="Cocos"/>
    <category scheme="http://hahack.com/tags/跨平台/" term="跨平台"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[0行代码实现叮当的场景联动]]></title>
    <link href="http://hahack.com/codes/easiest-way-to-make-dingdang-watch-events/"/>
    <id>http://hahack.com/codes/easiest-way-to-make-dingdang-watch-events/</id>
    <published>2017-11-05T10:37:06.000Z</published>
    <updated>2018-07-06T17:27:30.007Z</updated>
    <content type="html"><![CDATA[<p>要让叮当能够监控一些关键事件并触发响应操作，除了编写插件之外，还有一个简单省事的方法：利用 <a href="https://ifttt.com/" target="_blank" rel="external">IFTTT</a> 。下面我举几个简单的示例，其他的应用场景你们可以尽情发挥想象力。</p>
<h2 id="什么是-ifttt">什么是 IFTTT</h2>
<p><a href="https://ifttt.com/" target="_blank" rel="external">IFTTT</a> 是一个被称为 “网络自动化神器” 的创新型互联网服务，它非常实用而且完全免费。它的全称是 If this then that，意思是“如果这样，那么就那样”。简单地讲，IFTTT 的作用就是，如果「这个」网络服务满足条件，那么就自动触发「那个」网络服务去执行一个动作。而条件和动作都是可以由用户自己去根据自身需求设置的。IFTTT 能将前后这两个不同的网络服务神奇般地连通来实现各种各样的功能，并且为你不间断地工作。</p>
<p>在阅读下面的文章前，建议先去注册一个 IFTTT 账号，为了方便关联叮当，建议使用叮当的收件邮箱注册。<a id="more"></a></p>
<h2 id="示例1：提醒睡觉">示例1：提醒睡觉</h2>
<p>不想被晚睡拖延症影响你第二天的工作？让叮当在每晚喊你去睡觉吧！</p>
<p>首先进入 IFTTT 的 <a href="https://ifttt.com/create" target="_blank" rel="external">创建页</a>，点击 [+This] 按钮：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/1.png" alt=""></p>
<p>在里头可以找到一个 Date &amp; Time 插件，这个插件用来在特定时间触发事件。</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/2.png" alt=""></p>
<p>我们点击它，进入插件的二级选择页面：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/3.png" alt=""></p>
<p>在这里我们选择 [Every day at] ，</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/4.png" alt=""></p>
<p>在接下来的界面中设定好触发时间。这就完成了触发事件的设置。</p>
<p>接下来我们完成响应。怎么让叮当去响应这个事件呢？答案就是利用<a href="http://bbs.hahack.com/t/topic/48/1" target="_blank" rel="external">叮当的邮箱检查机制</a>。了解了 <code>[echo]</code> 和 <code>[control]</code> 两个关键词的用途后，接下来我们就可以利用 IFTTT 发送标题为 <code>[echo] 主人，您得睡觉了</code> 的邮件到叮当的收件邮箱中，让叮当提醒您睡觉。</p>
<p>点击 [+that] 按钮，</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/6.png" alt=""></p>
<p>然后从插件列表中选择 Email 插件，选择 Send me an Email ：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/7.png" alt=""></p>
<p>Subject 就是邮件标题，填写您希望叮当通知你的内容，并带上 <code>[echo]</code> 前缀即可：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/8.png" alt=""></p>
<p>由于邮件只用作提醒，所以 Body 里头的正文没有什么用途，不用改。完成后点击 [Create action] 按钮即可。</p>
<p>简单几步，就实现了 0 行代码让叮当通知你睡觉了，是不是很方便？</p>
<h2 id="示例2：github-star-通知">示例2：Github Star 通知</h2>
<p>当你的 Github 项目收到别人的 star 时，是不是很有成就感？可以让叮当监控 Github 上的 star 事件，然后通知你，给你打打鸡血。</p>
<p>首先先确定 star 事件的捕获方法。Github 为 star 等与你相关的事件提供了 RSS 订阅地址。地址就放在 Github 首页的 Activities 页面的底部：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/9.png" alt=""></p>
<p>点击 [Subscribe to your news feed] 链接，我们可以看到所有首页的事件。通过阅读该 RSS 源，可以发现与用户的 star 有关的事件都带有 <code>starred 账户名/</code> 的关键词。</p>
<p>针对 RSS 订阅， IFTTT 提供了 RSS 插件：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/10.png" alt=""></p>
<p>其中的 [New feed item matches] 项目可用于监控特定形式的 RSS 条目，并触发事件。</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/11.png" alt=""></p>
<p>因此我们可以添加如下的 Applet，详细流程参考上面的例子，不再赘述：</p>
<p>this 的设置：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/12.png" alt=""></p>
<p>that 的设置：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/13.png" alt=""></p>
<h2 id="示例3：天气报警">示例3：天气报警</h2>
<p>希望叮当在即将下雨的时候主动提醒你外出带伞？可以使用 IFTTT 的 Weather Underground 服务插件：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/14.png" alt=""></p>
<p>该插件提供了十几种天气事件监控服务：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/15.png" alt=""></p>
<p>在这里可以选择 [Current condition changes to] 服务，设定当下雨时触发邮件事件：</p>
<p>this 的设置：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/16.png" alt=""></p>
<p>that 的设置：</p>
<p><img src="/images/easiest-way-to-make-dingdang-watch-events/17.png" alt=""></p>
]]></content>
    <category scheme="http://hahack.com/tags/dingdang/" term="dingdang"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[我在平安的两年]]></title>
    <link href="http://hahack.com/work/my-2-years-at-pingan/"/>
    <id>http://hahack.com/work/my-2-years-at-pingan/</id>
    <published>2017-07-17T07:00:20.000Z</published>
    <updated>2019-01-05T16:12:06.898Z</updated>
    <content type="html"><![CDATA[<p>我是在 2015 年 5 月 20 日离开的百度，次日就来到了平安。当时平安的这个团队叫做移动开发二队。在百度的最后一天，我在朋友圈发了张合照，写了句“再见，我爱你”。很多人不理解我为什么在百度干了一年就走了，而且去的是平安这个并不以技术见长的公司。其实原因很简单：跟对的团队做对的事情。</p>
<p>说是“对的事情”是因为平安正处于技术转型期，其间会有大量的技术需求可以放手去做。而来平安这个团队的首要任务是开发完善底层的技术框架，有机会接触比较核心的技术，这对我的技术成长很有好处。</p>
<p>说是“对的团队”是因为我对平安这个团队的了解。平安那边的老大锋哥也是原先我们百度 LBS 团队的研发 leader，而 leader 定一也是之前在百度的时候合作非常愉快的一个同事。再加上鑫哥 <a href="http://www.jianshu.com/u/4ef984470da8" target="_blank" rel="external">@ASCE1885</a> 每周一更的技术周报，让我觉得这个团队是非常尊重技术的团队，而我过去应该能有更多发挥的机会。</p>
<p>于是，在锋哥的几次劝说下，我来到了平安。时间过得很快，一转眼的功夫，我也已经在平安待了两年的时间。从团队初建，到发展壮大，我和这个团队携手共同成长。对平安，对金融壹账通，对这个团队，我有说不尽的感激。如今我即将告别平安，走向一段新的旅程。在启程之前，我想对这两年走过的路做一个回顾。</p>
<p>我这两年的工作基本是两条线的思路：主线任务保证做得漂亮，然后主动从日常工作中找问题和需求，做点支线任务。</p>
<a id="more"></a>
<h2 id="2015年秋">2015年秋</h2>
<h3 id="主线：离线缓存">主线：离线缓存</h3>
<p>我刚去平安的时候就被安排去做应用端的离线缓存。那时候我们的手机应用里有大量的 H5 页面，在线加载非常耗时。而我在这之前其实并没有移动开发的经验，这么重要的一个框架功能全权交给我去设计和实现，心里还是没底的。所幸平安的入职流程很长，十天半个月都拿不到账号上不到网，所以 leader 也没指望我很快能完成这个项目。于是我刚去的头两个月自己一个人保持了 997 的全勤，拼命恶补移动端的开发知识。当时腾讯的 AlloyKit 提出了一种比较理想的 H5 离线缓存的方案，页面静态资源通过打包 APK 的方式解决了首次加载问题，另外还允许更新这些缓存资源。我就在这个想法的基础上结合团队的实际需要进行设计和完善。在这段期间，我和定一以及后台的同事马文经常会在细节上展开讨论，从基本的流程、包管理、插件ID分配、自动打包、资源加密等方面都进行了认真的思考和设计。大概两个月后，我们的离线缓存就正式上线了，插件的加载速度和以前相比有了质的提升，得到了团队的认可。我拿着这个第一次参加了公司的 3A 论坛技术峰会，认识了公司里头来自不同团队的大佬。</p>
<p><img src="/images/my-2-years-at-pingan/hfcache.png" alt="离线缓存"></p>
<h3 id="支线">支线</h3>
<p>在百度的期间我最大的收获在于对潜在的需求有着非常灵敏的嗅觉。当时的平安才刚面临技术转型，一些内部系统难免有不尽完善的地方，这对于来自 BAT 这类有着完善的内部系统的公司的同事而言很难适应。和大多数花时间吐槽环境的同事不同，我觉得这是一个好机会，这代表内部就有很多需求。所以，利用空余时间，我也做了一些“支线任务”，提高团队的效率。</p>
<h4 id="日报助手">日报助手</h4>
<p>第一个让我们觉得麻烦的是每天的日报，科技要求我们每天写一篇日报，汇报当天的工作，并以此来作为确认考勤的依据。但实际的情况是，我们平常已经通过站会来确认沟通每天的工作了，日报便沦为了一种形式：填了没人看，但不填又影响考勤。所以我写了一个工具，在月底的时候跑一遍，就能一次性帮我们到日报平台上填写完整个月的日报，这样就节省了很多同事的时间。这个工具在内部一直工作良好，直到我们从科技独立出去，无需填写日报了才停止使用。</p>
<h4 id="wiki">Wiki</h4>
<p>团队里头也没有像样的 Wiki 平台，所以我用 Gollum 搭了个 Wiki 。为了方便在文档中插图，我又搭了一个相册平台，可以在上面上传照片并插到 Wiki 中。这两个平台一直使用到我们把代码由 SVN 切换到 Gitlab 时改用 Gitlab 的 Wiki 才结束服务。</p>
<p><img src="/images/my-2-years-at-pingan/wiki.png" alt="wiki"></p>
<h4 id="任意门日志分析平台">任意门日志分析平台</h4>
<p>当时我们有一个叫做“任意门”的项目，它的线上问题一直是使用 Excel 这种原始方式来跟进处理的，缺乏一个统一的问题跟进平台。而因为任意门是一个 SDK ，问题可能来自各种宿主应用，这些 Excel 报表的格式也有所不同，很影响问题的处理和定位。于是我又用了一个星期为任意门团队写了一个线上问题处理系统，可以导入 Excel 存到数据库中，然后提供一个报表页面，用于展示问题的描述、堆栈信息、出现次数、处理情况、宿主ID等数据。这个平台给开发维护任意门的同事带来了很大的便利。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/prices.jpg" alt=" 这两年拿过的各种奖杯奖牌"><b>附图 1</b>  这两年拿过的各种奖杯奖牌</span></span></span></p>
<p><img src="/images/my-2-years-at-pingan/log-analysis.png" alt="日志分析平台"></p>
<p>本份工作顺利完成，再加上一些工具和平台加成，我在刚去的第一个季度就拿了团队的杰出贡献奖，奖品是一部 iPhone 6S 。</p>
<h2 id="2015年冬">2015年冬</h2>
<h3 id="主线：rn热更新">主线：RN热更新</h3>
<p>之后我们团队进行了业务的调整，大部分人（包括我）转去做银行一账通的项目，代号 F 项目。这个项目的目标就是低成本地生成中小银行的直销银行 APP ，可想而知这对核心框架的稳定性、可定制性和交付能力带来非常大的挑战。为了节省人力成本以及提高业务交付能力，我们经过评估后，决定采用 React Native 的开发模式，核心功能都尽量封装成 RN 层可调用的模块，再通过 RN 热更新来提升业务交付能力。RN 热更新的设计和实现就成了我在平安的第二个季度的主线任务。</p>
<p>当时 Android 版本的 RN 才刚刚发布，RN 热更新还处于尝试阶段，一开始的思路是使用反射修改 <code>PathClassLoader</code> 来修改 bundle 包的路径。v0.15.0 开始 <code>ReactInstantManager</code> 新增了 <code>setJSBundleFile</code> 方法，可以在程序运行时执行 Bundle 包的位置，这就给实现热更新提供了更大的便利。RN 热更新本身技术倒没有什么特别的难度，后面出现的 Microsoft code-push 也给我们提供了有价值的参考。不过，技术实现往往不是最困难的地方，最困难的地方是落地。我们花费了较多时间在热更新平台的增量更新、图片热更新、图片精度选择性下发、包版本管理、跨版本升级支持等问题上。一直做到年前，这个项目正式上线，为应用的运营能力提供了强有力的支持。凭借着 RN 热更新我也拿了一个公司的创新奖。</p>
<p><img src="/images/my-2-years-at-pingan/rnupdate.jpg" alt="RN热更新"></p>
<h3 id="支线-v2">支线</h3>
<p>在第二个季度我也照旧从日常工作中找了一些问题，做了一些支线任务。</p>
<h4 id="百宝箱">百宝箱</h4>
<p>第一个问题就是团队的文件共享问题。在 F 项目中，开发、测试、运营、产品需要经常共享 UED 、设计稿等文档。这些文件共享都是通过邮件的形式，而公司的邮件有附件大小限制，并且邮件只保留一个月的时间，超过这个时间的会被归档，只能从公司的邮件找回平台中去找。所以经常出现诸如附件找回困难、附件上传失败的问题。所以我在内网搭了一个网盘“百宝箱”，可以很方便的让各个成员在内网共享文档。这个网盘很快得到成为了团队文档交流的主要方式，直到公司推广了 Jira 才退出了历史。</p>
<p><img src="/images/my-2-years-at-pingan/treasure-box.png" alt="内部网盘"></p>
<h4 id="星黎殿">星黎殿</h4>
<p>第二个问题是我们内网上的平台越来越多，缺乏一个统一的门户站点。所以我和一个实习生写了一个内部门户“星黎殿”，这个门户收录了我们日常使用的各种站点平台，并提供检索功能。这样，只需要将这个门户保存到书签就相当于保存了所有常用的站点的书签了。</p>
<p><img src="/images/my-2-years-at-pingan/bookmark.png" alt="内部门户"></p>
<h4 id="壹瓴阁">壹瓴阁</h4>
<p>平常大家的线上技术交流较少，所以我又用 discourse 搭建了一个内部技术交流论坛，为了鼓励同事们多发点文章，我搞了几个月的有奖征文活动，并且给每个小组都设立了文章数量指标，于是这个论坛同样受到了同事们的欢迎 <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>甚至有同事在上面发布了征婚广告 </span></span></span>。</p>
<p><img src="/images/my-2-years-at-pingan/bbs.png" alt="内部技术论坛"></p>
<h4 id="金科大白">金科大白</h4>
<p>另外我发现的一个需求是图书馆的管理。我们团队自己搞了个小型图书馆，采用的是人工管理图书借阅的方式。由于缺乏自动化，借出去的书除非定期轮询一下，否则很难知道哪些书已经到期该归还。所以我带着几个实习生写了个基于公司内部聊天工具“天下通”的聊天机器人“金科大白”，可以与它对话查询和借阅书籍，当书籍借阅到期时，将自动邮件通知还书。这个机器人也给后面我开发内部群管家机器人以及叮当机器人带来了灵感。</p>
<p><img src="/images/my-2-years-at-pingan/manager.png" alt="金科大白"></p>
<h4 id="二队网站">二队网站</h4>
<p>年前我还带了两个实习生做了一个我们团队的内部网站，主要用来展示团队在做的东西，以及一些可以对外开放的文档。后来我们从科技独立了出去，原来的团队随即更名，这个项目就胎死腹中了。</p>
<p><img src="/images/my-2-years-at-pingan/site.png" alt="二队网站"></p>
<p>不过在这个过程中，我们却做了一个更有价值的东西。由于网站本身使用 Hexo 来编写，为了方便检索文档，我带着其中一个实习生写了个生成检索源的库 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 并开源在 Github 上。这个库后来成了一个非常流行的 Hexo 插件，NPM 月均下载量一度达到 2000 次/月。</p>
<p>主线 + 支线双开，所以年底我被公司授予“一狼当先”创新员工奖。年底绩效沟通，leader 给我定级 A 档。</p>
<h3 id="生活">生活</h3>
<p>平时的工作虽然比较忙，公司的文体活动还是挺丰富的。在团队里头可以申请俱乐部，于是我常年混迹在桌球俱乐部、游泳俱乐部、户外俱乐部中打酱油。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/me-and-ukulele.jpeg" alt=" 我和我的Ukulele"><b>附图 2</b>  我和我的Ukulele</span></span></span></p>
<p>年底的时候公司的行政美女黎老板给我安排了一个的政治任务——年会表演。但纯粹上台唱歌实在无趣，所以我在年会前的一个月开始学习 Ukulele 。就跟学习一门新的语言范式一样，一开始面对陌生的东西依然会有一种恐惧感，但坚持下来很快就会发现它的确非常简单，很容易做到拿谱即弹，这也增强了我挑战新鲜事物的信心。放一段为年会准备的弹唱曲目吧：<a href="http://www.miaopai.com/show/7atrQSZrhxgF2OPsauSy3-XHbrM1wtNB.htm" target="_blank" rel="external"><i class="fa fa-video-camera"></i> 秒拍：一小段I’m Yours</a> 。</p>
<h2 id="2016年">2016年</h2>
<p>到了 2016 年，我们正式从平安科技独立了出来，成立了平安金科。后来公司名字又做了几次调整，到我离职时，公司的名字改成了“上海壹账通金融科技有限公司”。</p>
<h3 id="主线">主线</h3>
<h4 id="git-迁移">Git 迁移</h4>
<p>平安的内部版本控制一直使用的是 SVN ，但 SVN 对分支和子模块的支持不给力，所以年前我们做了个决定，搭了内部的 Gitlab ，然后把整个工程代码拆分成主工程和多个子模块，然后全部迁移到 Gitlab 中托管。为了简化代码迁移的复杂度，我写了个内部工具 svn-git-transfer ，只需要配置好源 SVN 地址和目标 Gitlab 仓库地址，即可一键完成所有模块到 Gitlab 的同步，并保留了原先的所有提交记录。有了这个工具，我们只用了一天就完成了代码的迁移，然后大家高高兴兴的回家过年了。</p>
<p>年后回公司，我们遇到了更加头疼的一个问题：Git 的子模块极容易出错。具体可以参见我的一篇博文《<a href="/work/enterprise-class-git-version-control-1/">化繁为简的企业级 Git 管理实践（一）：多分支子模块依赖管理</a>》。于是，在和同事们充分讨论之后，我们决定放弃子模块的 commit id ，采用我们自定义的一个 modules.json 的文件来维护子模块的版本。于是我用了几天时间完成了内部代码管理工具 fmanager 的第一个版本。这个工具将繁琐的子模块管理化繁为简，得到了同事们的一致好评。在之后我对这个工具不断的修改完善，加入了诸如分支切换、多分支 cherry-pick、Code Review、代码风格检查、Git-LFS 支持、钩子自动安装等，并且支持通过改配置文件动态增删子模块。</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">fmanager - F 项目专用 Git 管理工具</div><div class="line"></div><div class="line">- 开发者：潘伟洲 &lt;panweizhou500@pingan.com.cn&gt;</div><div class="line">- 版本：v2<span class="number">.0</span></div><div class="line">- 使用方法:</div><div class="line"></div><div class="line">$ ./fmanager pull [-l modules.json路径] [-t 线程数] [<span class="comment">--fast]	更新当前分支的主工程，并将每个子模块的代码更新到指定分支的最新状态。</span></div><div class="line">$ ./fmanager update						和 ./fmanager pull 完全等效。只是一个别名。（缩写：up）</div><div class="line">$ ./fmanager pull-rn [-t 线程数]				更新 React Native 及其子模块 (缩写：pullrn)。</div><div class="line">$ ./fmanager init [-l modules.json路径] [-t 线程数]		重新根据 modules.json 的配置初始化工程，移除所有不在列表中的子模块。</div><div class="line">$ ./fmanager checkout &lt;分支名&gt; [-l modules.json路径]		切换到某个银行分支，同时完成子模块的代码切换。（缩写：co）</div><div class="line">$ ./fmanager cherry-pick &lt;commit <span class="property">id</span>&gt; &lt;分支列表&gt;			cherry-pick 某个 commit <span class="property">id</span> 到分支列表。（缩写：cpick）</div><div class="line">    分支列表格式：逗号隔开，中间不带空格。</div><div class="line">    举例：</div><div class="line">        ./fmanager cpick <span class="number">023e937</span>d JiLinBank,WeiHaiBank,TaiShanBank</div><div class="line">$ ./fmanager cherry-push &lt;commit <span class="property">id</span>&gt; &lt;分支列表&gt; 			cherry-pick 某个 commit <span class="property">id</span> 到分支列表，并推送这些分支。（缩写：cpush）</div><div class="line">$ ./fmanager submodule update [-l modules.json路径] &lt;模块名列表&gt;	更新指定子模块的代码到所处分支的最新状态。（缩写：sub）</div><div class="line">$ ./fmanager showbranch 					查看当前主工程和所有子模块的所属分支。（缩写：br）</div><div class="line">$ ./fmanager status 						查看当前主工程和所有子模块的修改状态。（缩写：st）</div><div class="line">$ ./fmanager <span class="command">log</span> 						查看当前主工程和所有子模块的当前分支/标签和最新提交。</div><div class="line">$ ./fmanager tag-diff [<span class="comment">--detail]				生成当前modules.json配置的各个模块与各自最新标签的比对结果（只支持x.x.x形式的标签） （缩写：td）</span></div><div class="line">    参数说明：</div><div class="line">        <span class="comment">--detail					# 生成的结果包含代码的diff，默认只展示文件改动</span></div><div class="line">    举例：</div><div class="line">        ./fmanager tag-diff				<span class="comment"># 生成文件改动的diff</span></div><div class="line">        ./fmanager tag-diff <span class="comment">--detail | less		# 生成文件改动的diff，并在less中查看（比一次性全部打印到终端更流畅）</span></div><div class="line">        ./fmanager tag-diff <span class="comment">--detail &gt; ~/res.md		# 生成文件改动的diff并保存到 res.md 文件中</span></div><div class="line">$ ./fmanager master &lt;模块名|仓库地址&gt;		                查看当前工程下某个模块的仓库的 master 名单，目前只支持 <span class="number">10.20</span><span class="number">.11</span><span class="number">.218</span> 下的的仓库</div><div class="line">    举例：</div><div class="line">        ./fmanager master PAFFUIKit                      <span class="comment"># 查看 PAFFUIKit 模块的 master 名单</span></div><div class="line"></div><div class="line">$ ./fmanager login						登录 Phabricator 代码评审平台</div><div class="line">$ ./fmanager setup						将当前工程引入代码评审</div><div class="line">$ ./fmanager diff [<span class="comment">--create | --update]				提交一个代码评审任务</span></div><div class="line">    举例：</div><div class="line">        ./fmanager diff					<span class="comment"># 提交代码评审，并自动判断当前仓库是否需要新建一个评审任务，还是追加到现有的评审任务</span></div><div class="line">        ./fmanager diff <span class="comment">--create			# 提交代码评审，并强制要求新建一个评审任务</span></div><div class="line">        ./fmanager diff <span class="comment">--update			# 提交代码评审，并强制要求追加到现有的评审任务中</span></div><div class="line">$ ./fmanager <span class="type">list</span>						查看所有提交过的评审任务的状态</div><div class="line">$ ./fmanager browse 评审<span class="property">id</span>					打开评审<span class="property">id</span>对应的评审页面</div><div class="line">    举例：</div><div class="line">        ./fmanager browse D3			        <span class="comment"># 打开 id 为 D3 的评审任务的评审页面</span></div><div class="line">$ ./fmanager push						push 代码到 Gitlab 。将自动根据当前是否引入代码评审选择适合的方式</div><div class="line">    举例：</div><div class="line">        ./fmanager push					<span class="comment"># push 代码</span></div><div class="line">        ./fmanager push <span class="comment">--revision D3			# push 评审 id 为 D3 的代码</span></div><div class="line">$ ./fmanager amend [<span class="comment">--revision revision_id] [--show]		修改某个评审任务的信息（只对接入评审的仓库有效）</span></div><div class="line">    举例：</div><div class="line">        ./fmanager amend <span class="comment">--revision D3			# 修改 id 为 D3 的评审任务信息</span></div><div class="line">        ./fmanager amend <span class="comment">--revision D3 --show		# 打印 id 为 D3 的评审任务信息（不修改）</span></div><div class="line">$ ./fmanager land						push 命令的别名，与 push 命令完全等同</div><div class="line">$ ./fmanager faq &lt;类型&gt;						查看各种 faq</div><div class="line">    举例：</div><div class="line">        ./fmanager faq                            <span class="comment"># 打开 faq 菜单</span></div><div class="line">        ./fmanager faq fmanager                   <span class="comment"># 同上，打开 fmanager 的 faq</span></div><div class="line">        ./fmanager faq git                        <span class="comment"># 打开 git 的 faq</span></div><div class="line">        ./fmanager faq rn                         <span class="comment"># 打开 RN 红屏的 faq</span></div><div class="line">        ./fmanager faq react-native               <span class="comment"># 同上，打开 RN 红屏的 faq</span></div><div class="line">        ./fmanager faq jenkins                    <span class="comment"># 打开构建站的 faq</span></div><div class="line">        ./fmanager faq anydoor-android            <span class="comment"># 打开任意门 Android SDK 的 faq</span></div><div class="line">        ./fmanager faq anydoor-ios                <span class="comment"># 打开任意门 iOS SDK 的 faq</span></div><div class="line">$ ./fmanager tips						显示每日一贴。</div><div class="line">$ ./fmanager <span class="command">say</span> &lt;要说的话&gt;					用 fmanager 的吉祥物说一句话。</div><div class="line">$ ./fmanager commits-<span class="keyword">since</span> &lt;时间&gt; 				查看当前主工程和所有子模块自某个时间点开始的所有提交。（缩写：cs）</div><div class="line">    举例：</div><div class="line">        ./fmanager commits-<span class="keyword">since</span> yesterday        <span class="comment"># 统计从昨天开始到现在的所有commit</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">16</span>:<span class="number">00</span>            <span class="comment"># 统计从今天下午4点到现在的所有commit</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">4</span> o clock pm     <span class="comment"># 和上面示例完全等效</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">2016</span>-<span class="number">08</span>-<span class="number">18</span>       <span class="comment"># 统计从2016年8月18日到现在的所有commit</span></div><div class="line">        ./fmanager commits-<span class="keyword">since</span> <span class="number">2016</span>-<span class="number">08</span>-<span class="number">18</span>-<span class="number">16</span>:<span class="number">00</span> <span class="comment"># 统计从2016年8月18日下午4点到到现在的所有commit</span></div><div class="line">$ ./fmanager switch-sdk &lt;(Android)要切换到的framework分支|（iOS）要切换的模式,SDKMode、SourceMode&gt;               把当前工程的framework切换到SDK模式/源码模式</div><div class="line">    举例：</div><div class="line">        ./fmanager switch-sdk Source        <span class="comment">#  把当前工程的framework切换到源码模式,</span></div><div class="line">                                            <span class="comment">#  如果当前已是源码分支，则切回SDK分支拉取最新modules.json配置后再切回源码，保证源码是最新</span></div><div class="line">        ./fmanager switch-sdk SDK           <span class="comment">#  把当前工程的framework切换到SDK模式</span></div><div class="line">        ./fmanager switch-sdk Source <span class="comment">--update  # 把当前工程的framework切换到源码模式</span></div><div class="line">                                                <span class="comment"># 如果当前已是源码分支，则直接按照当前framework/modules.json更新源码所有基础模块代码</span></div><div class="line">        ./fmanager switch-sdk Source <span class="comment">--current  # 按照当前工程的framework的分支切换到源码模式，默认会先切回外层modules.json配置的framework分支</span></div><div class="line">$ ./fmanager lfs	<span class="comment"># 使用 lfs 管理二进制文件</span></div><div class="line">    举例：</div><div class="line">        ./fmanager lfs install              <span class="comment"># 安装 lfs ，必须执行一遍才能使用 lfs</span></div><div class="line">        ./fmanager lfs track <span class="string">"*.zip"</span>        <span class="comment"># 把所有 zip 类型文件都用 lfs 来管理</span></div><div class="line">        ./fmanager lfs ls-files             <span class="comment"># 列举所有使用 lfs 管理的文件</span></div></pre></td></tr></table></figure></p>
<p>这些功能使它成为了团队日常开发中必备的工具，也因此获得了一个季度优秀工具奖以及公司创新奖。</p>
<p>除了技术上的问题，迁移 Git 也给团队的学习接受能力提出了挑战。由于我对 Git 比较熟悉，所以我自然承担了在团队中推广 Git 的角色。一开始的时候，找我解决代码拉取问题的人需要排一条很长的队伍。我也忙得几乎顾不上干其他事情。为了减轻负担，我先是进行了几场 Git 的使用技术分享。之后我在 Gitlab 上写了份 FAQ ，然后把团队遇到的各种常见问题都放到 FAQ 上。一旦帮同事解决了新的问题，我都会要求他去负责把解决办法添加到 FAQ 上，久而久之 FAQ 上的问题集就非常完善了。除此之外，先前为团队搭建的技术论坛也成了我用来推广 Git 技术的平台，我在上面写了几篇 Git 的教程，也对团队成员的学习起到了一定的帮助作用。我甚至把一些常用的 Git 技巧和 fmanager 做了整合，于是每次使用 fmanager 后，都会随机出现类似下面这样的卖萌 ASCII 图和贴士：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">  _____________________________________________________________________________________</div><div class="line">/ 你知道吗：要了解某个site用了哪些模块，每个模块使用什么tag  </div><div class="line"> ，可以访问模块可视化平台。                    </div><div class="line"><span class="command">\ </span>http://xx.xx.xx.xx:8081/modulevis/</div><div class="line">  -------------------------------------------------------------------------------------</div><div class="line">   <span class="command">\</span></div><div class="line">    <span class="command">\</span></div><div class="line">        .--.</div><div class="line">       |o_o |</div><div class="line">       |:_/ |</div><div class="line">      //   <span class="command">\\</span> <span class="command">\\</span></div><div class="line">     (|     | )</div><div class="line">    /'<span class="command">\\</span>_   _/`<span class="command">\\</span></div><div class="line">    <span class="command">\\</span>___)=(___/</div><div class="line"></div><div class="line">         tux</div><div class="line"></div><div class="line">  __________________________________________________________________________________</div><div class="line">/ 你知道吗：传说多看看 Gitlab 上的 FAQ 可以成为                     </div><div class="line"> Git 高手：                                           </div><div class="line"><span class="command">\ </span>http://xx.xx.xx.xx/FFProject/FFWiki/wikis/git-faq</div><div class="line">  ----------------------------------------------------------------------------------</div><div class="line">      <span class="command">\ </span>                   / <span class="command">\ </span> //<span class="command">\</span></div><div class="line">       <span class="command">\ </span>   |<span class="command">\_</span>__/|      /   <span class="command">\/</span>/  <span class="command">\\</span></div><div class="line">            /0  0  <span class="command">\_</span>_  /    //  | <span class="command">\ </span><span class="command">\</span></div><div class="line">           /     /  <span class="command">\/</span>_/    //   |  <span class="command">\ </span> <span class="command">\</span></div><div class="line">           @_^_@'/   <span class="command">\/</span>_   //    |   <span class="command">\ </span>  <span class="command">\</span></div><div class="line">           //_^_/     <span class="command">\/</span>_ //     |    <span class="command">\ </span>   <span class="command">\</span></div><div class="line">        ( //) |        <span class="command">\/</span>//      |     <span class="command">\ </span>    <span class="command">\</span></div><div class="line">      ( / /) _|_ /   )  //       |      <span class="command">\ </span>    _<span class="command">\</span></div><div class="line">    ( // /) '/,_ _ _/  ( ; -.    |    _ _<span class="command">\.</span>-<span class="special">~</span>        .-<span class="special">~</span><span class="special">~</span><span class="special">~</span>^-.</div><div class="line">  (( / / )) ,-<span class="special">{</span>        _      `-.|.-<span class="special">~</span>-.           .<span class="special">~</span>         `.</div><div class="line"> (( // / ))  '/<span class="command">\ </span>     /                 <span class="special">~</span>-. _ .-<span class="special">~</span>      .-<span class="special">~</span>^-.  <span class="command">\</span></div><div class="line"> (( /// ))      `.   <span class="special">{</span>            <span class="special">}</span>                   /      <span class="command">\ </span> <span class="command">\</span></div><div class="line">  (( / ))     .----<span class="special">~</span>-.<span class="command">\ </span>       <span class="command">\-</span>'                 .<span class="special">~</span>         <span class="command">\ </span> `. <span class="command">\^</span>-.</div><div class="line">             ///.----..&gt;        <span class="command">\ </span>            _ -<span class="special">~</span>             `.  ^-`  ^-_</div><div class="line">               ///-._ _ _ _ _ _ _<span class="special">}</span>^ - - - - <span class="special">~</span>                     <span class="special">~</span>-- ,.-<span class="special">~</span></div><div class="line">                                                                  /.-<span class="special">~</span></div><div class="line">                        dragon                                                                  </div><div class="line"></div><div class="line">  __________________________________________________</div><div class="line">/ 你知道吗：如果只需要更新 React Native </div><div class="line"> 的代码，而不需要更新 native 的代码，可以使用</div><div class="line"> ./fmanager pullrn 命令。     </div><div class="line"><span class="command">\ </span>                          </div><div class="line">  --------------------------------------------------</div><div class="line">                             (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                           (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                         (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                        (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                      (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                     (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                    (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                   (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">                  (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">   _____         (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)</div><div class="line">  /     <span class="command">\ </span>      (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)    |<span class="command">\/</span><span class="command">\/</span><span class="command">\/</span>|     /<span class="command">\ </span>/<span class="command">\ </span> /<span class="command">\ </span>              /<span class="command">\</span></div><div class="line"><span class="command">\/</span><span class="command">\/</span>     |      (<span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span><span class="special">#</span>)    |      |     | V  <span class="command">\/</span>  <span class="command">\-</span>--.    .----/  <span class="command">\-</span>---.</div><div class="line"> |  (o)(o)       (o)(o)(<span class="special">#</span><span class="special">#</span>)    |      |      <span class="command">\_</span>        /       <span class="command">\ </span>         /</div><div class="line"> C   .---_)    ,_C     (<span class="special">#</span><span class="special">#</span>)    | (o)(o)       (o)(o)  &lt;__.   .--<span class="command">\ </span>(o)(o) /__.</div><div class="line">  | |.___|    /____,   (<span class="special">#</span><span class="special">#</span>)    C      _)     _C         /     <span class="command">\ </span>    ()     /</div><div class="line">  |  <span class="command">\_</span>_/       <span class="command">\ </span>    (<span class="special">#</span>)       | ,___|     /____,   )  <span class="command">\ </span>     &gt;   (C_)   &lt;</div><div class="line">  /_____<span class="command">\ </span>       |    |         |   /         <span class="command">\ </span>    /----'    /___<span class="command">\_</span>___/___<span class="command">\</span></div><div class="line"> /_____/ <span class="command">\ </span>      OOOOOO        /____<span class="command">\ </span>         ooooo             /|    |<span class="command">\</span></div><div class="line">/         <span class="command">\ </span>    /      <span class="command">\ </span>     /      <span class="command">\ </span>       /     <span class="command">\ </span>          /        <span class="command">\</span></div><div class="line"></div><div class="line">  HOMER          MARGE         BART            LISA               MAGGIE</div></pre></td></tr></table></figure></p>
<p><span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/teacher.jpeg" alt=" 由于 Git 的分享做的比较好，教师节的时候我被评上了公司的“十佳讲师”。收获小卡片一张。"><b>附图 3</b>  由于 Git 的分享做的比较好，教师节的时候我被评上了公司的“十佳讲师”。收获小卡片一张。</span></span></span></p>
<p>这些技术推广策略对团队普及 Git 起到了非常有效的推动作用。过了一个月后，找我的人就变得很少了。多数人也从 Git 的新手慢慢变成了老手，也能够帮忙解决新人们的 Git 相关的问题了。</p>
<p>还有一个避不开的问题就是分支管理方案。因为我们的业务模型比较复杂，Git-Flow 和 Github-Flow 都无法满足我们的需求。而没有一个统一的分支方案，就好比没有一个成文的交通规则，老司机也开不了车。于是有很长一段时间，我们都聚在会议室里头激烈地讨论分支管理方案，见我的另一篇博文 《<a href="/work/enterprise-class-git-version-control-3/">化繁为简的企业级 Git 管理实战（三）：分支管理策略</a>》。这个过程虽然很痛苦，但是却很能够锻炼你的思维，以及考虑问题的完整程度。而且，你会感觉到你真正成为了团队里头一个领域的游戏规则的制定者，更加能感受到你对于这个团队的价值。</p>
<p>到了年中，我们使用 Git 来管理代码已经非常稳定可靠，Git 的迁移可以说非常成功。我们也因此获得了团队的优秀项目奖。</p>
<h4 id="三合一更新器">三合一更新器</h4>
<p>在下半年，我终于有时间回归到客户端开发了。我们遇到一个问题是几种更新的弹窗抢占问题。我们的 APP 已经包含了 Native 热修复、RN 热更新和 H5 离线缓存三个层级的更新能力。但这三种更新各自为政，可能发生弹窗抢占。此外，几种依赖可能存在依赖关系：比如 RN 层的某个接口可能依赖 Native 层相应的改动，这时候如果 RN 先更新成功了，而 Native 端又修复失败，就会导致应用崩溃。所以我承担设计了三合一更新器，将三层的更新交由一个更新器来统一调度，三层更新都允许设置静默、建议、强制三种更新优先级，并在必要时刻允许对优先级进行提升。这个三合一更新器优化了用户的更新体验，也消除了三层更新没有同步完成导致应用崩溃的潜在隐患。</p>
<h4 id="code-review-推动">Code Review 推动</h4>
<p>除了三合一更新之外，下半年我们开始思考如何更好地引入 Code Review 来规范化我们的工作。</p>
<p>在这之前，我已经通过 pre-commit 客户端钩子和 pre-receive 远程钩子来自动禁止了不规范的代码提交进我们的仓库。但代码风格只是最低层次的要求。有些代码本身的风格并没有问题，但是实现的思路与需求存在偏差，或者实现时对一些特殊情况欠考虑，这些 bad case 都无法通过静态分析的手段禁止提交，只能靠人工审核。所以，一个 Code Review 平台是很有必要的。</p>
<p>我先尝试了 ReviewBoard ，这个平台的优点是易于搭建，而且也有相应的 CLI 工具配套。但我发现这个平台似乎只支持 post review ，即 push 到仓库之后才发起 review 。而我们更希望做到 pre review，在 push 前就必须通过 code review ，否则禁止 push 。所以我决定弃用 ReviewBoard 。</p>
<p>之后我尝试了 Phabricator ，据说是 Facebook 内部使用的 Code Review 平台。我在搭建试用了几分钟后就觉得这个就是我们要的平台：</p>
<ol>
<li>基于 LAMP 架构，部署简单；</li>
<li>无需像 Gerrit 那样强绑定代码仓库；</li>
<li>多次 commit 自动合并成一个；</li>
<li>提供了配套的 CLI 工具 Arcanist；</li>
<li>平台开放 API （尽管不怎么完善）；</li>
<li>类似 Facebook 的 UI，颜值够高，容易上手。</li>
</ol>
<p><img src="/images/my-2-years-at-pingan/phabricator.png" alt="Phabricator"></p>
<p>还是那句话，技术实现不是难点，难的是推广。为了在团队中推广 Code Review，我做了几个工作：</p>
<ol>
<li>把 Arcanist 集成进了 fmanager ，把常用的 diff、land 命令也变成了 fmanager 的子命令，降低了工具的学习成本；</li>
<li>写了个 pre-push 钩子，根据当前模块是否存在 .arcanist 文件判断是否接入了 Code Review，然后在 commit 前根据 commit message 判断当前 commit 是否已经过 review ，从而禁用未经 review 的代码提交；</li>
<li>对 Code Review 记录做了跟踪和分析，评选出了有价值的 Review 记录并进行奖励。调动了大家参与 Review 的热情。</li>
</ol>
<p>为了方便查询和自己相关的 Code Review 的进展，我还写了个 Alfred 的 Workflow，输入自己的账号即可查询所有相关的 Review 任务：</p>
<p><img src="/images/my-2-years-at-pingan/workflow.png" alt="Phabricator Workflow"></p>
<p>这个 Code Review 平台内测不到两周，我们的 Code Review 数量就破百了，两个月后，团队的 Code Review 数量就突破了一千。这个平台也拿到了该季度的优秀项目奖。</p>
<h3 id="支线-v3">支线</h3>
<h4 id="加班统计平台">加班统计平台</h4>
<p>年初我发现团队里的一个痛点：每个月月初我们都需要到内网导出打卡记录，然后从中手动筛选出加班的那些天，再整理成一份报销表格给行政的同事申请加班补贴。手动筛选加班的打卡记录不仅耗时，而且很容易出错，尤其是当天是特殊节假日的时候。每次整理加班记录，可能要花费二十分钟的时间。而这些工作完全可以交给机器自动完成。</p>
<p>所以我写了一个内部使用的加班统计平台，从内网导出的打卡记录只需要交给平台进行一下分析，马上就可以生成一份符合要求的加班统计表格，并且还考虑了特殊节假日以及漏打卡的情况。原先要花费二十分钟完成的事情，只需要交给这个平台，一分钟左右即可导出需要的表格。</p>
<p><img src="/images/my-2-years-at-pingan/summary-1.png" alt="加班统计平台"></p>
<p>为了吸引同事们使用，我又加了加班数据排名以及可视化的功能，可以很直观的看出近期加班的情况。</p>
<p><img src="/images/my-2-years-at-pingan/summary-4.jpeg" alt="加班统计平台-排名系统"></p>
<p><img src="/images/my-2-years-at-pingan/summary-3.jpeg" alt="加班统计平台-可视化"></p>
<p>这个平台也是我首次尝试收费的一个服务，可选择一年授权和长期授权两种激活码，并提供首次免费试用。有 100 多位同事在试用成功后就购买了我的服务。</p>
<h4 id="模块配置可视化平台">模块配置可视化平台</h4>
<p>由于我们同时开发维护多个 APP ，数量一多，要查出每个 APP 的某个模块在使用什么版本就变得很繁琐了。</p>
<p>所以我写了一个模块配置可视化平台，支持多条件的检索模块的配置信息。</p>
<p><img src="/images/my-2-years-at-pingan/modulevis.png" alt="模块配置可视化平台"></p>
<p>为了保证数据是最新的，我给主工程的 Git 仓库加了 post-receive 远程钩子：每次检测到主工程的 modules.json 发生修改，在服务端的 post-receive 钩子就会把新的 modules.json 配置情况同步到可视化平台中。</p>
<h4 id="代码同步工具">代码同步工具</h4>
<p>在我们成功迁移到 Git 管理代码后，公司也开始普及 Git，搭了一个公司的 Gitlab 。在正式发布前，科技的工程管理团队甚至邮件向我咨询了 Git 管理的一些经验心得。</p>
<p>尽管公司的 Gitlab 有更大的团队来维护和支持，我们并不愿意把我们的代码迁移到公司的服务上。最主要的原因是我们自己的 Gitlab 可以更方便的定制，迁移到公司的 Gitlab 就没有这么高的权限了。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/piano.jpeg" alt=" 年会电子琴弹唱"><b>附图 4</b>  年会电子琴弹唱</span></span></span></p>
<p>虽然自己的 Gitlab 定制起来很爽，但稳定性和单点问题也成了隐患。我们甚至遇到过 Gitlab 所在的服务器发生维护而导致我们一整天无法正常拉取和推送代码的情况，简直是一场噩梦。为了避免单点问题带来的灾难，我写了一个全自动代码同步工具，能够在每天凌晨把我们的 Gitlab 的组织、代码、成员、分支保护等东西都同步到公司的 Gitlab 中，而且无需管理员权限。见 《<a href="/work/enterprise-class-git-version-control-4/">化繁为简的企业级 Git 管理实战（四）：多 Gitlab 数据同步</a>》。这个工具给我们的代码安全提供了一个强有力的保障，也因此获得了该季度的优秀工具奖。</p>
<p>年中和年底的两次绩效沟通，leader 又继续给我评级了 A 档。同时我被评为了公司的年度优秀员工。</p>
<h3 id="生活-v2">生活</h3>
<p>有了去年的 Ukulele 弹奏的基础，今年的年会我决定玩点其他的乐器。于是我在九月份买了一台卡西欧入门电子琴，开始学习电子琴弹唱。</p>
<p>电子琴弹唱和 Ukulele 弹唱完全是不同级别的难度。Ukulele 的弹唱基本就是弹和弦搞定，而电子琴弹唱可以说是吉他指弹 + 演唱的难度了，要在几个月内达到拿得出手的水平非常困难。好在现在的电子琴的教学软件都做的非常人性化，我只需学好指法，然后照着软件给出的演示进行肌肉记忆，整首歌硬记下来也是可能的。年会上，我弹唱了偶像王力宏的经典歌曲《你不知道的事》（<a href="https://kg.qq.com/node/play?s=KKeq5gK_O1XgmKZ5" target="_blank" rel="external"><i class="fa fa-video-camera"></i> 练习视频：你不知道的事</a>），算是把大伙糊弄过去了。</p>
<h2 id="2017年">2017年</h2>
<h3 id="主线：人工智能">主线：人工智能</h3>
<p>到了 2017 年，我们的框架变得稳定，不像上一年有诸多需求。于是我们进入了舒适区，过上了朝九晚六的生活。但这种情况对于我而言并不见得是好事：需求变少了，人也会跟着变懒，久而久之就没有成长了。既然业余时间变多了，我决定把时间用来学点 AI 的相关的知识。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/my-2-years-at-pingan/udacity.jpeg" alt=" 顺手给课程提了几个建议和bug，收到了 Udacity 寄来的小礼物。"><b>附图 5</b>  顺手给课程提了几个建议和bug，收到了 Udacity 寄来的小礼物。</span></span></span></p>
<p>机器学习对数学的要求比较高，所以我先花了半个月的时间看了可汗学院的《线性代数》课程，写了<a href="/categories/#math">几篇学习笔记</a>。然后又看完了 Udacity 上的《机器学习入门》，并做完了全部练习。这门课讲的非常生动，极大地帮助我加深了对机器学习如何解决实际问题的理解。</p>
<p>在锋哥的鼓励下，我带头成立了一个人工智能兴趣小组。我们一共开展了 6 次分享，涵盖了 TensorFlow、贝叶斯分类、线性回归、K-means 聚类、自然语言处理、对话机器人实现等多个 topic 。另外我申请购买了一台高性能的深度学习机，自己搭建了 Jupyter Notebook 和支持 GPU 加速的 TensorFlow 环境，可以供小组成员在 Notebook 上做感兴趣的实验。</p>
<p><img src="/images/my-2-years-at-pingan/notebook.png" alt="我们的notebook"></p>
<p>之后我想尝试将分类的技术用在我们内部的 issue tracker 来判断是否重复提 bug 。由于我们的框架同时对接了多款 App ，一旦框架出现了一个 bug，多个 App 上都会报相同的问题。如果能通过机器学习的技术来分辨出是否重复提 bug ，那么就能减少开发在 follow issue 上面花费的时间。判断是否重复提 bug 和判断文本内容相似度类似，可以对文本统计 TFIDF 词频信息，然后利用余弦相似度来判断相似程度。所以，我写了个爬虫，把我们的 Redmine 平台上的数据按照格式爬了下来，总共爬了接近两万条 bug 数据。但过了几天公司开始推 Jira 作为新的 issue tracker，我们的 Redmine 就停止使用了。这个项目就只能搁浅了。</p>
<p>虽然我们并没有真正用机器学习算法做出什么成果，但这个过程中积累的一些机器学习的知识也将为我日后的工作方向带来收益。</p>
<h3 id="支线-v4">支线</h3>
<h4 id="图灵">图灵</h4>
<p>我为团队做的一个比较好玩的项目是微信聊天机器人“图灵”。这是基于 <a href="https://github.com/liuwons/wxbot" target="_blank" rel="external">wxbot</a> 和 <a href="http://www.tuling123.com/" target="_blank" rel="external">图灵机器人 API</a> 做的一个微信群聊天机器人。</p>
<p>起初它是为了取代<a href="#%E9%87%91%E7%A7%91%E5%A4%A7%E7%99%BD">金科大白</a>而做的一个新的管家项目，因此它可以实现诸如询问内网站点地址、恶劣天气通知、群成员生日提醒、新人入群欢迎、活动报名征集、考勤异常提醒等功能。</p>
<p><img src="/images/my-2-years-at-pingan/birthday.jpeg" alt="群成员生日提醒"></p>
<p>大伙对图灵非常稀奇，刚推出的短短两天，它就被群里的同事 @ 了 800 多次。</p>
<p><img src="/images/my-2-years-at-pingan/at_count.jpeg" alt="火爆的图灵"></p>
<p>后面我发现把图灵和项目管理结合可以产生更多意想不到的效果。例如，我们的框架的源码和 SDK 是分开分支进行版本控制的。以往要构建 SDK ，需要先切到源码分支，执行构建脚本，然后再切到 SDK 分支上更新 SDK 。过程比较繁琐。我给图灵加上了构建框架 SDK 的功能。要构建某个分支的 SDK，只需要跟图灵说一声即可：</p>
<p><img src="/images/my-2-years-at-pingan/sdk-build.jpeg" alt="使用图灵构建SDK"></p>
<p>交给机器人构建 SDK 是如此方便，于是 @图灵 构建 SDK 成了我们日常构建框架 SDK 的主要方式。</p>
<p>李开复说，“5秒以下的工作将会被人工智能替代”。我也在工作中尽量找出 5 秒内可以用微信机器人取代的活，并交由它去完成。于是我给图灵实现了诸如苹果APP审核状态跟踪、项目日报查询、Jenkins 构建站任务跟踪、个人bug通知查询、线上 App 下载地址查询等功能，这些功能为项目的日常管理带来了很大便利。</p>
<h4 id="开源项目">开源项目</h4>
<p>由于今年加班时间变少了，我也有了更多时间投入在开源项目中。我的问题开始由“这个团队需要什么”转变为“外面的世界需要什么”。</p>
<p>在 5 月份的时候我决定自己动手做一个智能音箱，一方面来自于自己生活中的需求，另一方面也是因为找不到一个比较成熟可用的中文的开源智能音箱项目。于是我买来了硬件设备，花了三个星期的时间完成了<a href="http://github.com/wzpan/dingdang-robot" target="_blank" rel="external">叮当</a>的第一个版本。由于树莓派+智能音箱毕竟是小众项目，所以我一开始并不期望这个项目能得到多少关注。然而，随着 QQ 用户群人数的不断壮大，越来越多的朋友安装了叮当，并且真正将它投入在了日常的使用上。发布不到 10 天，star 数量就突破了 100 个，有两天登上了当天 Python 的 Github Trending。截至本文发布，叮当的 QQ 用户群已经达到了 117 人， Github Star 数量为 211 个。</p>
<p><img src="/images/my-2-years-at-pingan/trending.jpg" alt="叮当登上Github Trending"></p>
<p>叮当也给我的职业生涯带来了新的变化。在发布叮当后的第三天，腾讯团队找上了我问我是否考虑他们的工作机会。考虑到在这边已经处于舒适区，我决定去了解一下情况。</p>
<p><img src="/images/my-2-years-at-pingan/tencent-contact.png" alt="来自腾讯的工作机会"></p>
<p>经过了三轮技术面试和一轮通道面试，我拿到了 offer 。拿到 offer 的时候，我非常纠结。最大的原因来自对现在团队的不舍。但考虑到工作方向和个人的职业规划，我最终还是提了离职。</p>
<p>在项目交接期间，我又写了一个基于 Github issue 的评论脚本 <a href="https://github.com/wzpan/comment.js" target="_blank" rel="external">comment.js</a> ，用来取代 Disqus、网易云跟贴这类社会化评论系统。有趣的是，在我发布 comment.js 一周后，网易云跟贴宣布停止服务。有种自己在船沉了之前造出了飞机的感觉 <code>:-D</code> 。</p>
<p><img src="/images/my-2-years-at-pingan/163-yun-gen-tie.png" alt="网易云跟贴停止维护"></p>
<h2 id="总结">总结</h2>
<p>白驹过隙，在平安的两年时光已走到了尾声。除了不舍，更多的是对团队的感激。谢谢锋哥的知遇之恩，谢谢定一的悉心栽培，谢谢技术大神鑫哥的指点，谢谢所有合作过的同事，谢谢团队对我的信任。</p>
<p>在平安的两年时间里，我一共获得了一次年度优秀员工奖项，一次年度创新员工奖项，一个杰出贡献奖，两个工具奖，两个项目奖，四个创新奖，参与申请了八项专利，三次绩效考核都保持了 A 档。如果要我总结点经验：</p>
<ol>
<li>关于KPI：KPI 只是对你的基本期望。不要把自己的工作局限在 KPI 所设立的范围里头。而应该多从工作中发现问题，然后带头去解决问题。当然，你所发现和解决的问题应该对整个团队带来收益，否则只能被定性成“边边角角”的活。另外，拿到差的绩效也不要难过，更重要的是你在工作中学到了什么。</li>
<li>关于择业：在百度的老大说过一句让我受益匪浅的话：“找工作，一看方向，二看团队，三看公司，四看钱”。方向和团队对你的个人成长有非常重要的影响。我的两次跳槽，都是按照这个标准做出的慎重选择。</li>
<li>关于沟通：少吐槽，多做事情。经常吐槽会让人觉得你融入不进这个团队。与其花时间吐槽，不如想想能不能做点什么东西改善现状。</li>
<li>关于技术：把握好深度和广度之间的度。知识面广，学习能力好的人在工作前几年会比较混得开，因为工作上手得快，工作难度也不会很高，产出就会比别人多。然而随着工作年限的增长，外界对你的知识深度的要求也会越来越高。我去腾讯面试的时候，有不少深一点的技术问题没有答上来。虽然最终我还是拿到了 offer ，但我知道很大原因是开源项目加的分。所以，工作年限越大，更应该注重对自身技术领域的深耕，以免再次择业时面临被动。</li>
</ol>
<p>雄关漫道真如铁，而今迈步从头越。在即将奔赴新的单位前，我也以此文告诫自己：</p>
<ol>
<li>一切从头开始，多跟周围的朋友学习；</li>
<li>在未来至少要专心投入两年，把自己的技术学得更精深。</li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/职场感悟/" term="职场感悟"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用叮当声控智米电风扇]]></title>
    <link href="http://hahack.com/codes/use-dingdang-to-control-smart-mi-fan/"/>
    <id>http://hahack.com/codes/use-dingdang-to-control-smart-mi-fan/</id>
    <published>2017-07-15T11:42:22.000Z</published>
    <updated>2018-07-06T17:27:30.018Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p><a href="http://github.com/wzpan/dingdang-robot" target="_blank" rel="external">dingdang-robot</a> （以下简称“叮当”），是我在今年5月20号开源的一个中文智能音箱项目。</p>
<p>起初，我只是抱着一个好玩的心态做这个项目，并不期望这个项目能得到多少关注。然而，随着 QQ 用户群人数的不断壮大，越来越多的朋友安装了叮当，并且真正将它投入在了日常的使用上。很多朋友也提出了各种好玩的建议、想法，甚至为叮当贡献了插件或者捐赠了这个项目，让我觉得这个项目是很有价值的，也让我知道，我能做的还有很多东西。因此，我并不是开源了叮当之后就撒手不管了，而是利用业余时间不断完善叮当，又陆续发布了 8 个小版本，使得叮当在响应速度和功能丰富程度上都有了很大提升：</p>
<ul>
<li>自 v0.1.1 起，邮件通知也增加了 echo 功能，用户可以发送带 <code>[echo]</code> 前缀的邮件给叮当接入的邮箱，从而实现让叮当朗读标题的消息，而不是提醒有新的邮件。利用这个功能，可以很方便地和 ifttt 结合，当满足某个条件时让图灵通知这个事件。例如，我将 ifttt 的 <a href="https://ifttt.com/date_and_time" target="_blank" rel="external">Date &amp; Time</a> 触发器和 <a href="https://ifttt.com/email" target="_blank" rel="external">Email</a> 做了联动，实现定时在每天晚上 11 点发送邮件通知我睡觉；</li>
<li>自 v0.1.2 起，叮当的响应速度有了很大提升；</li>
<li>v0.1.3 增加了 snowboy 离线唤醒 STT 引擎，目前有 PocketSphinx 和 snowboy 两套离线唤醒引擎可供选择；</li>
<li>v0.1.4 增加了 SendQR 插件，可以让叮当将微信的登录二维码发送到邮箱。<a href="https://github.com/hhao" target="_blank" rel="external">@hhao</a> 也给叮当写了个可以获取二维码图片文件的服务器插件。另外，邮箱增加了 <code>[control]</code> 前缀支持，用户可以发送带 <code>[control]</code> 前缀标题的邮件，该标题里的内容会被当成一句指令交给叮当执行，从而实现类似微信的远程控制叮当的功能；</li>
<li>v0.1.5 开始，可以微信控制音乐播放了；</li>
<li>v0.1.7 开始，所有插件都可以通过在插件配置里头通过 <code>enable</code> 选项开关；</li>
<li>叮当的官方+第三方插件数量由 6 个增加到了 13 个。</li>
</ul>
<p>除了完善已有的功能，我也正试图让叮当往智能家电控制中心的方向上发展。</p>
<p>如今很多智能音箱除了用来听歌对话之外，还扮演了家庭中的一个控制中心的角色。不过，由于各家采用的接入协议有所区别，A 家的智能家电并不见得能得到 B 家的智能音箱的支持。而由于叮当是开源的项目，对其进行定制，接入控制家电所需的协议，从而实现声控大部分的智能家电是完全可能的。今天我就分享一下如何用叮当控制智米电风扇。</p>
<a id="more"></a>
<h2 id="智米风扇声控插件">智米风扇声控插件</h2>
<p>先上视频。这个视频演示了使用叮当实现对智米风扇的电源开关、摇头开关、自然风开关、风量调节、预约关机的声控：</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://www.miaopai.com/show/1NZnXdBMryZsDvyshBNdoPHNBHUHTEjW.html" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<p><embed src="http://player.youku.com/player.php/sid/XMjg5NDAwOTUxMg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"></p>
<p>插件的主页：<a href="https://github.com/wzpan/dingdang-smart-mi-fan" target="_blank" rel="external">https://github.com/wzpan/dingdang-smart-mi-fan</a> 。</p>
<h3 id="安装插件">安装插件</h3>
<p>先安装 python2-miio ：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install python2-miio</div></pre></td></tr></table></figure></p>
<p>之后，克隆本项目到任意目录：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/wzpan/dingdang-smart-mi-fan.git</div></pre></td></tr></table></figure></p>
<p>再将里头的 <a href="http://SmartMiFan.py" target="_blank" rel="external">SmartMiFan.py</a> 拷贝至 /home/pi/.dingdang/custom 目录。</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp dingdang-smart-mi-fan/SmartMiFan.py /home/pi/.dingdang/custom/</div></pre></td></tr></table></figure></p>
<p>如果没有 custom 目录，就先创建它然后再执行上面的拷贝命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /home/pi/.dingdang/custom</div></pre></td></tr></table></figure></p>
<p>然后，确保你的智米电风扇已开机并和叮当所在的机器处于同一个局域网下。然后执行以下命令获取风扇的 <code>host</code> 和  <code>token</code>:</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">miio2 discover</div></pre></td></tr></table></figure></p>
<p>最后在 /home/pi/.dingdang/profile.yml 中添加如下配置：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 智米风扇</span></div><div class="line">smart_mi_fan:</div><div class="line">    host: <span class="string">"192.168.1.106"</span></div><div class="line">    <span class="keyword">token</span>: <span class="string">"32e9af2050bc9d6f599c061733effee0"</span></div><div class="line">    angle: <span class="number">60</span>  <span class="comment"># 摇头的角度范围。可选值为 30/60/90/120</span></div></pre></td></tr></table></figure></p>
<p>完成后重启叮当即可使用本插件。</p>
<h3 id="指令列表">指令列表</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>相同指令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开风扇</td>
<td>启动风扇</td>
<td>打开风扇</td>
</tr>
<tr>
<td>关闭风扇</td>
<td>-</td>
<td>关闭风扇</td>
</tr>
<tr>
<td>开启自然风</td>
<td>启动自然风</td>
<td>切换到自然风模式</td>
</tr>
<tr>
<td>关闭自然风</td>
<td>关闭自然风</td>
<td>切换到普通模式</td>
</tr>
<tr>
<td>开始摇头</td>
<td>开启摇头</td>
<td>开始摇头</td>
</tr>
<tr>
<td>停止摇头</td>
<td>结束摇头，关闭摇头</td>
<td>结束摇头</td>
</tr>
<tr>
<td>加大风速</td>
<td>加快风速，加大风量，加大风力</td>
<td>加大风扇转速</td>
</tr>
<tr>
<td>减少风速</td>
<td>减慢风速，减少风量，减小风力</td>
<td>降低风扇转速</td>
</tr>
<tr>
<td><code>$num</code> <code>$unit</code> 后关闭风扇</td>
<td><code>$num</code> 是数字，<code>$unit</code> 可以是秒/分钟/小时</td>
<td>预约关机</td>
</tr>
</tbody>
</table>
<h2 id="开发心得">开发心得</h2>
<p>下面说说开发心得。小米的智能家电使用的是 miio 协议。在编写这个插件之前，我先试用了 <a href="https://github.com/homeassistantchina" target="_blank" rel="external">@homeassistantchina</a> 提供的 HomeAssistant 的智米风扇插件 <a href="https://github.com/homeassistantchina/custom_components/blob/master/custom_components/fan/smart_mi_fan.py" target="_blank" rel="external">smart_mi_fan.py</a>，这个插件在 HomeAssistant 里头的体验非常不错：</p>
<p><img src="/images/use-dingdang-to-control-smart-mi-fan/smart-mi-fan-hass.png" alt="HASS的智米风扇插件"></p>
<p>通过阅读这个插件，我发现这个插件依赖了一个封装了 miio 协议的 Python 3 的库 python-miio 。再阅读 python-miio 的源码，可以发现这个库就是通过 socket 来实现和家电的通讯的。整个发送消息的逻辑写成了一个 <code>send</code> 函数：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, command, parameters=None)</span></span></div></pre></td></tr></table></figure></p>
<p>使用这个函数非常简单，只需要传入要发送的指令即可。</p>
<p>通过阅读 <code>smart_mi_fan.py</code> 的源码，不难发现 miio 的指令主要是两个类型：</p>
<ol>
<li>
<p>获取属性。获取风扇的温度、角度、电源、风速等属性。通过发送 <code>get_prop</code> 指令并带上需要获取的属性名即可得到这些属性的值。具体有如下这些：</p>
<ul>
<li><code>temp_dec</code>：温度；</li>
<li><code>humidity</code>：湿度；</li>
<li><code>angle</code>：角度；</li>
<li><code>speed</code>：风速；</li>
<li><code>poweroff_time</code>：预约关机的时间（秒）；</li>
<li><code>power</code>：是否开机；</li>
<li><code>ac_power</code>：是否使用交流电供电；</li>
<li><code>battery</code>：电池剩余电量；</li>
<li><code>angle_enable</code>：是否摇头；</li>
<li><code>speed_level</code>：正常风风速等级；</li>
<li><code>natural_level</code>：自然风风速等级；</li>
<li><code>child_lock</code>：儿童锁；</li>
<li><code>buzzer</code>：是否有声音反馈；</li>
<li><code>led_b</code>：LED指示灯的亮度。</li>
</ul>
</li>
<li>
<p>设置属性。设置某个属性的值。通过发送 <code>set_属性名</code> 指令并带上值即可对该属性进行控制。</p>
</li>
</ol>
<p>了解了这个套路后，我只需要照着写一个叮当的插件，即可实现让叮当声控智米风扇的目标。</p>
<p>不过，在完成这个目标前，我还遇到了一个问题：python-miio 只能在 Python 3 环境中使用，而叮当是使用 Python 2 编写的。于是我对 python-miio 进行了 Python 2 版本的移植，发布为 <a href="https://pypi.python.org/pypi/python2-miio/0.0.3" target="_blank" rel="external">python2-miio</a> 。为了避免两个版本的 <code>miio</code> 命令行工具冲突，我把 python 2 版本的 <code>miio</code> 更名为 <code>miio2</code> 。</p>
<p>插件的编写过程也很轻松，和写其他的叮当插件一样的套路，所以整个插件我只用了一个晚上的时间就写好了。如果你看过我之前写的一篇编写叮当插件的教程《<a href="/codes/how-to-write-dingdang-plugin/">手把手教你编写叮当机器人插件</a>》，那么阅读风扇声控插件的源码也不会很困难，这里就只放上源码链接：<a href="https://github.com/wzpan/dingdang-smart-mi-fan/blob/master/SmartMiFan.py" target="_blank" rel="external">https://github.com/wzpan/dingdang-smart-mi-fan/blob/master/SmartMiFan.py</a>。</p>
<p>最后就是插件的发布问题。考虑到这个插件比较私人——大部分用户并没有智米风扇，因此我并没有把它丢进 dingdang-contrib 中，而是单独创建了一个仓库来托管。对于需要使用这个插件的人，只需要将它放到个人的插件目录 /home/pi/.dingdang/custom 中，即可让该插件生效<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。这样的好处是无需改动 contrib 目录，也不会影响 contrib 目录的更新。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><code>custom</code> 目录的支持在叮当 v0.1.9 开始引进。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/dingdang/" term="dingdang"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Comment.js：一个纯JS实现的静态站点评论系统]]></title>
    <link href="http://hahack.com/codes/comment-js/"/>
    <id>http://hahack.com/codes/comment-js/</id>
    <published>2017-07-02T12:48:07.000Z</published>
    <updated>2018-07-06T17:27:30.007Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>我的博客最早是使用 Disqus 来实现评论功能的。Disqus 被墙了之后，改成了多说。今年年初，多说也正式关闭了，于是我被逼着又开始寻找其他的替代评论系统。</p>
<p>我先是试用了网易云跟贴、畅言等几种类似的社会化评论系统。畅言要求站点必须备案，而我实在没有为了评论去申请备案的动力。网易云跟贴的管理后台上有很多不明觉厉的功能，但好像都没多大用处。最致命的问题是我不小心把我的站点绑定到了另一个网易账户，而不是我常用的微博账户。这样的话，我每次回贴就得退登到微博账户，要管理贴子的时候又得切回管理员账户，非常不方便。然而网易云跟贴并没有提供解绑的功能。于是我给他们提了需求，然而一直到现在都没有回复。再加上有了多说作为前车之鉴，我对国内的免费评论服务已经失去了信心。今天把A换成B，难以保证日后B也关闭了，被逼着又换到C，实在是懒得折腾下去啊。于是，我放弃了换用类似的评论系统的念头。</p>
<p>之后我找到了 <a href="https://github.com/posativ/isso" target="_blank" rel="external">isso</a> 项目，它是一个 Python 实现的开源评论服务。这个服务需要搭建在自己的服务器上。官方的简介简明扼要：“a Disqus alternative”。出于对 Python 的好感，我把站点的评论功能迁移到了 isso 。然而，我对 isso 也并不是很满意。首先它的功能其实也非常弱，不支持 Markdown 语法，不支持 Gravatar 头像，也没有一个像样的管理后台，搭建和配置的过程也比较费时，远达不到开箱即用的程度。再加上 isso 需要服务器运营，为了一个评论系统而去购买服务器确实太奢侈了。用了几个月后，我又萌生了换掉它的念头。</p>
<a id="more"></a>
<h2 id="项目介绍">项目介绍</h2>
<p>我的想法来源于一些基于 Github issue 的博客。其实 Github 的 issue 本身就是一个非常完善的评论系统，有完善的管理后台，灵活的通知设置，而且 Github 是开放 API 的。只要我能把 Github 的 issue 与博客的页面打通，把 issue 上的内容显示在我的博客上，然后在需要评论的时候点击跳转到 Github 的 issue 页，就实现了一个基本可用的评论系统了。</p>
<p>comment.js 就是基于这个想法实现的一个评论系统，它的核心代码只有 400 行左右，却能够用来实现评论会话和最新评论列表的两个功能。比起已有的社会化评论系统，它有如下几个优点：</p>
<ol>
<li>完善的评论管理系统。基于 issue 的评论，支持 Markdown ，支持 Gravatar。</li>
<li>开箱即用的邮件通知功能。Github 的邮件通知功能非常完善，不像 isso 那样还得配置邮件通知服务。</li>
<li>无需搭建后台。直接用现成的 issue 作为后端，不像 isso 那样还需要自己搭个后台，搞定数据库。</li>
<li>接入简单。获取评论会话和获取最新列表各自对应一个函数。</li>
<li>代码简单。这意味着你也可以很快上手脚本代码，对这个脚本进行定制。</li>
<li>除了 Github issue 之外，comment.js 也支持使用 OSChina issue 作为后端<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，即使 Github 被墙，也能通过修改参数迅速切换到其他备选站点，比起说关闭就关闭的评论服务可靠多了。</li>
</ol>
<ul>
<li>项目主页：<a href="https://github.com/wzpan/comment.js" target="_blank" rel="external">https://github.com/wzpan/comment.js</a></li>
<li>Demo
<ul>
<li><a href="http://wzpan.github.io/comment.js#comment-thread" target="_blank" rel="external">评论会话Demo</a></li>
<li><a href="http://wzpan.github.io/comment.js#recent-comments" target="_blank" rel="external">最新评论列表Demo</a></li>
</ul>
</li>
</ul>
<h2 id="接入方法">接入方法</h2>
<p>comment.js 依赖几个 JS 前端库：</p>
<ul>
<li>jQuery - 用于 Ajax 请求以及将评论内容插入到页面中。</li>
<li>marked - Markdown 支持。</li>
<li>timeago.js - 时间文本格式化。</li>
<li>spin - 用于在加载评论数据前先绘制一个 loading 动画（可选）。</li>
<li>highlight.js - 用于代码高亮（可选）。</li>
</ul>
<h3 id="0-添加静态资源文件">0. 添加静态资源文件</h3>
<p>在页面中添加这些资源：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- stylesheet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"path_to_comment_css/comment.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- for IE support --&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lte IE 9]&gt;</span></div><div class="line">    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.5.9/es5-shim.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.5.7/es5-sham.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- javascripts --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.6/marked.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/timeago.js/3.0.2/timeago.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- loading spin indicator(optional) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- syntax highlighting(optional) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  marked.setOptions({</div><div class="line">  highlight: <span class="function"><span class="keyword">function</span> <span class="params">(code, lang)</span> </span>{</div><div class="line">     <span class="keyword">return</span> hljs.highlightAuto(code).value;</div><div class="line">  }</div><div class="line">  });</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Highlighting</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> markdowns = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'markdown'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;markdowns.length;i++){</div><div class="line">       <span class="keyword">if</span>(markdowns[i].innerHTML) markdowns[i].innerHTML =marked(markdowns[i].innerHTML);</div><div class="line">    }</div><div class="line">  }</div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, Highlighting, <span class="literal">false</span>);</div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, Highlighting, <span class="literal">false</span>);</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- comment.js --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"path_to_comment_js/comment.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="1-注册-oauth-app">1. 注册 OAuth App</h3>
<p>为了避免 API 被恶意滥用，Github API （以及 OSChina API）设定了一个<a href="https://developer.github.com/v3/#rate-limiting" target="_blank" rel="external">API调用频率限制</a>。为了提高频率限额，建议 [注册一个 Oauth App](Register a OAuth application](<a href="https://github.com/settings/applications/new" target="_blank" rel="external">https://github.com/settings/applications/new</a>)。</p>
<p>完成注册后，你将得到一个 <code>client id</code> 以及一个 <code>client_secret</code> ，先将这两个值记下来，后面我们会用到。</p>
<p>（提示：注册 App 的时候你可能会对 <code>Authorization callback URL</code> 这一项目感到困惑，一般填写你的站点地址即可。例如 <a href="http://hahack.com" target="_blank" rel="external">http://hahack.com</a> ）</p>
<h3 id="2-获取评论会话">2. 获取评论会话</h3>
<p>第一步，在页面中添加一个 DIV ，用于展示评论会话内容。</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"comment-thread"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二步（可选），如果希望在加载完数据前先展示一个loading动画，还可以添加一个用于动画的 DIV ：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"loading-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最后，调用 <code>getComments()</code> 方法，获取该页面对应的 issue 包含的所有评论，然后展示到我们指定的 DIV 中：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="keyword">var</span> opt = {</div><div class="line">       type: <span class="string">"github"</span>,</div><div class="line">       user: <span class="string">"wzpan"</span>,</div><div class="line">       repo: <span class="string">"comment.js"</span>,</div><div class="line">       no_comment: <span class="string">"No comments yet. Press the button and go to comment now!"</span>,</div><div class="line">       go_to_comment: <span class="string">"Go to comment"</span>,</div><div class="line">       issue_id: <span class="string">"1"</span>,</div><div class="line">       btn_class: <span class="string">"btn"</span>,</div><div class="line">       comments_target: <span class="string">"#comment-thread"</span>,</div><div class="line">       loading_target: <span class="string">"#loading-spin"</span>,</div><div class="line">       client_id: <span class="string">"xxxxxx"</span>,</div><div class="line">       client_secret: <span class="string">"xxxxxx"</span></div><div class="line">   };</div><div class="line">   getComments(opt);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li><code>type</code>: 要作为后端的站点。目前支持 <code>Github</code> 和 <code>OSChina</code> 。</li>
<li><code>user</code>: 您的 Github 用户名。</li>
<li><code>repo</code>: 您用作评论后端的仓库名。</li>
<li><code>no_comment</code>: 当没有评论时，展示的提示消息。</li>
<li><code>go_to_comment</code>: “去留言” 按钮的按钮文本。</li>
<li><code>issue_title</code>: 您当前页面对应的 issue 标题。也可以使用 <code>issue_id</code> ，二者只选其一。</li>
<li><code>issue_id</code>: 您当前页面对应的 issue id。也可以使用 <code>issue_title</code>，二者只选其一。</li>
<li><code>btn_class</code>: “去留言”按钮的 CSS 样式名。</li>
<li><code>comments_target</code>: 用于展示评论内容的容器。例如我们上面所写的 <code>comment-thread</code> DIV 。</li>
<li><code>loading_target</code>（可选）：用于展示 loading 动画的容器。例如我们上面所写的 <code>loading-spin</code> DIV 。</li>
<li><code>client_id</code>（可选但建议）:您注册的 OAuth App 的 client id。</li>
<li><code>client_secret</code>（可选但建议）：您注册的 OAuth App 的 client secret。</li>
</ul>
<p>效果参见本页面下方的留言区。</p>
<h3 id="3-获取最新评论列表">3. 获取最新评论列表</h3>
<p>评论列表用于获取你最近的若干条评论，效果可以参见 <a href="http://hahack.com" target="_blank" rel="external">站点首页</a> 右侧的最新留言区。</p>
<p>要获取最新评论列表的方法也大同小异。首先写一个 DIV 用于加载获取得到的评论列表数据：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"recent-comments"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后可以调用 <code>getRecentCommentsList()</code> 方法，获取最近评论列表并展示到指定的 DIV 中。</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="keyword">var</span> opt = {</div><div class="line">       type: <span class="string">"github"</span>,</div><div class="line">       user: <span class="string">"wzpan"</span>,</div><div class="line">       repo: <span class="string">"comment.js"</span>,</div><div class="line">       recent_comments_target: <span class="string">"#recent-comments"</span>,</div><div class="line">       count: <span class="number">5</span>,</div><div class="line">       client_id: <span class="string">"xxxxxx"</span>,</div><div class="line">       client_secret: <span class="string">"xxxxxx"</span></div><div class="line">   };</div><div class="line">   getRecentCommentsList(opt);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li><code>type</code>: 要作为后端的站点。目前支持 <code>Github</code> 和 <code>OSChina</code> 。</li>
<li><code>user</code>: 您的 Github 用户名。</li>
<li><code>repo</code>: 您用作评论后端的仓库名。</li>
<li><code>recent_comments_target</code>: 用于展示最新评论列表的容器。例如我们上面所写的 <code>recent-comments</code> DIV 。</li>
<li><code>count</code>: 列表的最大长度。</li>
<li><code>client_id</code>（可选但建议）:您注册的 OAuth App 的 client id。</li>
<li><code>client_secret</code>（可选但建议）：您注册的 OAuth App 的 client secret。</li>
</ul>
<h2 id="开发心得">开发心得</h2>
<p>下面照例总结下项目的开发心得。虽然整个项目只有几百行的代码，但这个过程中还是不可避免的遇到一些困难。</p>
<h3 id="关于选型和项目命名">关于选型和项目命名</h3>
<p>一开始的想法只是给 Hexo 写一个插件，让其能够实现评论功能。最理想的情况是类似 <a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 那样，npm install 一下，然后 _config.yml 里添加下配置就完事。通过阅读 Hexo 的文档后我发现 <a href="https://hexo.io/docs/helpers.html" target="_blank" rel="external">helper</a> 似乎比较适合用作这个目的：把核心功能写成一个 helper ，然后在模板文件里直接执行这个 helper ，得到的数据还能进一步再模板中调诸如 <a href="https://hexo.io/docs/helpers.html#markdown" target="_blank" rel="external">markdown</a> 等其他现成的 helper， 这样还能实现 Markdown 支持。于是我最初的项目仓库名叫做 hexo-helper-github-comment 。</p>
<p>等我实现了 <code>getComments()</code> 方法后，我发现我的想法是错误的：helper 只适用于同步执行的操作，不适合网络请求这种异步操作。这带来的问题就是模板文件里已经成功执行了 helper 了，也返回了数据，但此时 renderer 早已经完成了模板的渲染了，而异步返回的评论数据却不再能够被渲染。</p>
<p>之后我想在 NodeJS 中加入 jQuery，用 jQuery 来操纵 DOM ，而不再依赖 renderer 。但这个方案似乎也不可行。因为在模板文件中，DOM 还没有创建，jQuery 拿不到实际的 DOM 。</p>
<p>所以最终我改成了纯 JS 的方案，把请求的方式也从 request-promise 改成了 AJAX ，然后在模板文件中直接跑 JS ，让 JS 完成请求，此时的 DOM 是已创建的，可以使用 jQuery 来操纵页面。虽然这样做就不能直接用 Hexo 现成的 markdown helper 了，但由于是纯 JS 实现，这个库也就可以在任何静态站点中使用，变得更加通用了。于是我把仓库名改成了 github-comment 。</p>
<p>又后来，我准备开源的前一天，在微博上先公开了关于这个项目的信息。有些人也表示了 Github 将来也可能被墙的质疑。于是我花了几分钟时间，也加入了对 OSChina 的支持。这个仓库名似乎也不只是基于 Github 了，于是我又把仓库名改成了 comment.js 。</p>
<h3 id="关于取舍">关于取舍</h3>
<p>我最纠结的部分，在于要不要把评论框也写进来。</p>
<p>直接在页面中写评论，减少了页面的跳数，当然是一大收益。但这样做也有几个问题：</p>
<ol>
<li>功能可用性和项目的复杂度的取舍。Github 的编辑框其实包含了非常多的功能，例如支持拖拽的附件添加、表情、预览、快捷键等等，如果不把这些功能加进来，编辑框的功能就显得很鸡肋，远不如在 Github 中评论有趣；如果加进来，整个项目的代码就远不止 400 行这么简单了。</li>
<li>通用性和专用程度的取舍。为了避免 Github 单点问题，comment.js 还支持 OSChina 作为备选评论系统。加入 Github 的这些编辑功能，是否会影响对其他站点后端的兼容性又是个问题。</li>
<li>界面美观程度和版权的取舍。现在的评论会话界面几乎照搬了 Github 的样式，因为点击“去留言”按钮实际上直接跳到了 Github ，相当于为 Github 做了引流，给了一个大大的版权说明，也就没有了侵权的担忧。如果界面完全隔离了 Github，也隐藏了 Github 的版权信息，反而有点滥用平台的感觉<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</li>
</ol>
<p>有意思的是，当我刚发布 comment.js 的时候，我才发现几个月前已经有人做了一个类似的项目：<a href="https://imsun.github.io/gitment/" target="_blank" rel="external">gitment</a>，真是心有灵犀啊。这个项目与我的项目的最大区别就在于它实现了内置的编辑框，并且目前只支持 Github 。如果你认为评论框必不可少，那么建议使用 gitment；反之如果你觉得点击按钮跳到 Github 页面似乎也还能接受，担心 Github 单点问题，而且觉得保证代码的简单和通用性更重要的话，那么不妨使用 comment.js 。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>目前 OSChina 的 API 在浏览器端会出现 CORS 错误。我已经给 OSChina <a href="https://git.oschina.net/oschina/git-osc/issues/5843" target="_blank" rel="external">提交了工单</a>，待后台添加 CORS 支持后就可以使用 OSChina 作为后端。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>话说回来直接照搬界面确实不太好，后面我会对评论会话的UI进行调整，避免侵权。 <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/comment-js/" term="comment.js"/>
    <category scheme="http://hahack.com/tags/Disqus/" term="Disqus"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[手把手教你编写叮当机器人插件]]></title>
    <link href="http://hahack.com/codes/how-to-write-dingdang-plugin/"/>
    <id>http://hahack.com/codes/how-to-write-dingdang-plugin/</id>
    <published>2017-05-28T12:23:40.000Z</published>
    <updated>2018-07-06T17:27:30.012Z</updated>
    <content type="html"><![CDATA[<p><a href="http://hahack.com/codes/dingdang-robot-intro/" target="_blank" rel="external">叮当</a> 是一款可以工作在 Raspberry Pi 上的开源中文语音对话机器人/智能音箱项目，目的是让中国的Hacker们也能快速打造类似 Amazon Echo 的个性化的智能音箱。</p>
<p>由于叮当是完全开源的，编写插件来满足自己的个性化需求就成了使用叮当的最大乐趣。您可以自由地接入自己需要的服务，让叮当更好的为您服务。</p>
<p>这篇文章将一步步教你如何编写一个天气插件，并最终发布到 dingdang-contrib 中。</p>
<p>交互示例：</p>
<ul>
<li>用户：天气</li>
<li>叮当：深圳天气。今天：晴。最高气温：25～30摄氏度；明天：晴。26～31摄氏度；后天：小雨。最高气温：23～29摄氏度。</li>
</ul>
<a id="more"></a>
<h2 id="准备工作">准备工作</h2>
<h3 id="安装-dingdang-contrib">安装 dingdang-contrib</h3>
<p>首先需要确保您已安装了叮当的第三方插件库 <a href="https://github.com/dingdang-robot/dingdang-contrib" target="_blank" rel="external">dingdang-contrib</a> ：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/pi/.dingdang</div><div class="line">git clone http://github.com/wzpan/dingdang-contrib contrib</div><div class="line">pip install -r contrib/requirements.txt</div><div class="line"><span class="built_in">sudo</span> apt-get install sox  <span class="comment"># 用于播放音乐</span></div><div class="line"><span class="built_in">sudo</span> apt-get install libsox-fmt-mp3 <span class="comment"># 添加 sox 的 mp3 格式支持</span></div></pre></td></tr></table></figure></p>
<p>接下来可以在这个插件库中开发您的插件。</p>
<h3 id="了解天气-api">了解天气 API</h3>
<p>要实现天气预报功能，少不了要了解一下天气 API 。通过搜索，我找到了一款免费的天气 API —— <a href="https://www.seniverse.com/" target="_blank" rel="external">心知天气</a> 。心知天气提供了天气、空气质量、生活指数等多种数据信息。其中<a href="https://www.seniverse.com/doc#daily" target="_blank" rel="external">逐日天气预报</a>是免费的，可以利用来实现天气预报查询插件。</p>
<p>选择心知天气的另一个理由是他们的 API 文档非常详细，还提供了多种语言的 <a href="https://github.com/seniverse/seniverse-api-demos" target="_blank" rel="external">demo</a> <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>连 common-lisp 都有，点个赞！ </span></span></span> 。下面是官方提供的一个 Python 版的示例：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> utils.const_value <span class="keyword">import</span> API, KEY, UNIT, LANGUAGE</div><div class="line"><span class="keyword">from</span> utils.helper <span class="keyword">import</span> getLocation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchWeather</span><span class="params">(location)</span>:</span></div><div class="line">    result = requests.get(API, params={</div><div class="line">        <span class="string">'key'</span>: KEY,</div><div class="line">        <span class="string">'location'</span>: location,</div><div class="line">        <span class="string">'language'</span>: LANGUAGE,</div><div class="line">        <span class="string">'unit'</span>: UNIT</div><div class="line">    }, timeout=<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> result.text</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    location = getLocation()</div><div class="line">    result = fetchWeather(location)</div><div class="line">    print(result)</div></pre></td></tr></table></figure></p>
<p>其中，<code>API</code> 是 API 的地址，逐日天气预报的 API 地址是 <a href="https://api.seniverse.com/v3/weather/daily.json" target="_blank" rel="external">https://api.seniverse.com/v3/weather/daily.json</a> ；<code>KEY</code> 则是心知天气的 API 密钥，每个注册账户都可以得到一个密钥；<code>location</code> 是城市名，例如深圳就是 <code>深圳</code> 或者 <code>shenzhen</code>；而 <code>language</code> 和 <code>unit</code> 分别表示语言和单位，由于是可选参数，这里不做详细介绍。有兴趣的朋友请阅读官方文档。</p>
<p>整段代码也没有什么特别好说的：先是定义了一个 <code>fetchWeather</code> 函数，该函数使用 requests 模块发起 API 请求，请求超时设置为 1 秒。之后调用这个函数并打印返回的结果。</p>
<h2 id="编写天气插件">编写天气插件</h2>
<p>了解了心知天气的 API 后，编写插件就是一件水到渠成的事情了。</p>
<p>编写插件主要要考虑以下几个问题：</p>
<ul>
<li>插件应该使用哪些关键词作为用户指令？</li>
<li>需要暴露哪些配置项？</li>
<li>如何处理用户的输入并得到需要的信息？</li>
</ul>
<p>下面我们将在编写这个插件的过程中解决这些问题。</p>
<h3 id="新建插件文件">新建插件文件</h3>
<p>首先在 <code>~/.dingdang/contrib</code> 中创建一个新的文件 <a href="http://Weather.py" target="_blank" rel="external">Weather.py</a> ：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8-*-                                                                                                                                                         # 天气插件</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Standard module stuff                                                                                                                                                     WORDS = []</span></div><div class="line">SLUG = <span class="string">"SLUG"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(text, mic, profile, wxbot=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Responds to user-input, typically speech text</div><div class="line">    Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">        mic -- used to interact with the user (for both input and output)</div><div class="line">        profile -- contains information related to the user (e.g., phone</div><div class="line">        number)</div><div class="line">        wxbot -- wechat bot instance</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        Returns True if the input is related to weather.</div><div class="line">        Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>这个是插件的模板文件。一个标准的插件至少包含 <code>WORDS</code>，<code>SLUG</code>，<code>isValid</code> 函数和 <code>handle</code> 函数四个部分。下面将一一介绍。</p>
<h3 id="关键词设置">关键词设置</h3>
<p><code>WORDS</code> 是一个关键词列表，用于存储这个插件的指令关键词（的拼音）。当 Active Listening 的 SST 引擎设置成离线引擎时，这里设置的关键词会被自动添加到 PocketSphinx 的语音指令集中，从而使得 PocketSphinx 能识别出这个指令。</p>
<p><code>WORDS</code> 的另一个作用是作为是否插件的判断标准。如果 contrib 目录中的某个 <code>.py</code> 文件没有 <code>WORDS</code> 变量，那么这个文件就会被当成无效插件，而不会响应它。</p>
<p>与关键词有关的还有 <code>isValid</code> 函数，该函数用于判断用户输入的指令是否要用这个插件来处理。如果 <code>isValid</code> 返回结果为 <code>true</code> ，<code>handle</code> 函数就会被调用，以处理指令。对于天气插件，关键词可以设置为天气，即只要包含“天气”的输入都使用本插件做处理。因此，可以将 <code>WORDS</code> 和 <code>isValid</code> 函数改写成：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">WORDS = [<span class="string">"TIANQI"</span>]</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        Returns True if the input is related to weather.</div><div class="line">        Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="string">u"天气"</span> <span class="keyword">in</span> text</div></pre></td></tr></table></figure></p>
<h3 id="slug-设置">SLUG 设置</h3>
<p><code>SLUG</code> 是该插件的标识符，它主要用作在 <code>profile.yml</code> 中标识该插件的配置头。例如，对于天气插件，可以设置 SLUG 为 “weather”，</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SLUG = <span class="string">'weather'</span></div></pre></td></tr></table></figure></p>
<p>那么在 profile.xml 中如果要添加天气插件的配置，就应该以 <code>weather</code> 字段开头添加配置信息：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="label">weather:</span></div><div class="line">   配置项<span class="number">1</span>：值</div><div class="line">   配置项<span class="number">2</span>：值</div></pre></td></tr></table></figure></p>
<p>每一个插件都有一个默认的可选配置项 <code>enable</code>，用来决定是否开启或关闭这个插件。默认值为 true ，即开启该插件。</p>
<h3 id="handle-函数实现">handle 函数实现</h3>
<p>接下来需要实现 <code>handle()</code> 函数。</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(text, mic, profile, wxbot=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Responds to user-input, typically speech text</div><div class="line">    Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">        mic -- used to interact with the user (for both input and output)</div><div class="line">        profile -- contains information related to the user (e.g., phone</div><div class="line">        number)</div><div class="line">        wxbot -- wechat bot instance</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>这个函数接收四个参数：</p>
<ul>
<li><code>text</code> 是STT识别到的用户指令；</li>
<li><code>mic</code> 是麦克风和喇叭模块，最常用的是通过调用 <code>mic.say()</code> 函数来让喇叭说话；</li>
<li><code>profile</code> 是用户配置信息，它是一个字典，记录了 <code>~/.dingdang/profile.yml</code> 的全部内容；</li>
<li><code>wxbot</code> 是一个微信机器人实例，可以利用它给用户发送微信消息。<a href="">Camera</a> 插件提供了通过微信发送照片给用户的例子。</li>
</ul>
<p>我们可以把心知的 Demo 给出的 <code>fetchWeather</code> 函数做一点调整，放进代码中方便复用：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_weather</span><span class="params">(api, key, location)</span>:</span></div><div class="line">    result = requests.get(api, params={</div><div class="line">    <span class="string">'key'</span>: key,</div><div class="line">        <span class="string">'location'</span>: location</div><div class="line">    }, timeout=<span class="number">3</span>)</div><div class="line">    res = json.loads(result.text, encoding=<span class="string">'utf-8'</span>)</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure></p>
<p>显然，<code>KEY</code> 和 <code>location</code> 应该作为用户的配置项，允许用户在配置文件中进行设置。因此我们可以在 profile.yml 配置文件中添加如下配置：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 天气</span></div><div class="line"><span class="preprocessor"># 使用心知天气的接口</span></div><div class="line"><span class="preprocessor"># https://www.seniverse.com/</span></div><div class="line">weather:</div><div class="line">    key: <span class="string">'etxzx9abupxplhic'</span> # 心知天气<span class="constant"> API </span>Key</div><div class="line">    location: <span class="string">'深圳'</span></div></pre></td></tr></table></figure></p>
<p>接下来在 <code>handle</code> 函数中调用 <code>fetch_weather</code> 函数，得到天气信息：</p>
<p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(text, mic, profile, wxbot=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Responds to user-input, typically speech text</div><div class="line">    Arguments:</div><div class="line">        text -- user-input, typically transcribed speech</div><div class="line">        mic -- used to interact with the user (for both input and output)</div><div class="line">        profile -- contains information related to the user (e.g., phone</div><div class="line">        number)</div><div class="line">        wxbot -- wechat bot instance</div><div class="line">    """</div><div class="line">    logger = logging.getLogger(__name__)</div><div class="line">    <span class="comment"># get config                                                                                                                                                                   if 'weather' not in profile or \</span></div><div class="line">       <span class="keyword">not</span> profile[SLUG].has_key(<span class="string">'key'</span>) <span class="keyword">or</span> \</div><div class="line">       <span class="keyword">not</span> profile[SLUG].has_key(<span class="string">'location'</span>):</div><div class="line">        mic.say(<span class="string">'天气插件配置有误，插件使用失败'</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    key = profile[SLUG][<span class="string">'key'</span>]</div><div class="line">    location = profile[SLUG][<span class="string">'location'</span>]</div><div class="line">    WEATHER_API = <span class="string">'https://api.seniverse.com/v3/weather/daily.json'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        weather = fetch_weather(WEATHER_API, key, location)</div><div class="line">        logger.debug(<span class="string">"Weather report: "</span>, weather)</div><div class="line">        <span class="keyword">if</span> weather.has_key(<span class="string">'results'</span>):</div><div class="line">            daily = weather[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'daily'</span>]</div><div class="line">            day_text = [<span class="string">u'今天'</span>, <span class="string">u'明天'</span>, <span class="string">u'后天'</span>]</div><div class="line">            responds = <span class="string">u'%s天气：'</span> % location</div><div class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> range(len(day_text)):</div><div class="line">                responds += <span class="string">u'%s：%s，%s到%s摄氏度。'</span> % (day_text[day], daily[day][<span class="string">'text_day'</span>], daily[day][<span class="string">'low'</span>], daily[day][<span class="string">'high'</span>])</div><div class="line">            mic.say(responds)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            mic.say(<span class="string">'抱歉，我获取不到天气数据，请稍后再试'</span>)</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        logger.error(e)</div><div class="line">        mic.say(<span class="string">'抱歉，我获取不到天气数据，请稍后再试'</span>)</div></pre></td></tr></table></figure></p>
<p>完成后，可以重启下叮当，看看插件是否能正常工作。</p>
<h2 id="发布插件">发布插件</h2>
<p>插件正常工作后，可以将该插件发布到 <a href="https://github.com/dingdang-robot/dingdang-contrib" target="_blank" rel="external">dingdang-contrib</a> ，让更多人用上您的插件。</p>
<p>首先先访问 <a href="https://github.com/dingdang-robot/dingdang-contrib" target="_blank" rel="external">dingdang-contrib 的 Github 主页</a> ，点击右上角的 【fork】 按钮，将仓库 fork 到自己的账户。如果之前已经 fork 过，这一步可以跳过。</p>
<p>fork 完仓库后，在您的账户下也会有一个 dingdang-contrib 项目，点击绿色的 【Clone or download】 按钮，记下新的仓库的地址。</p>
<p><img src="/images/how-to-write-dingdang-plugin/fork-repo.png" alt="复制新的仓库地址"></p>
<p>之后在树莓派中执行如下命令，添加新的仓库地址：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.dingdang/contrib</div><div class="line">git remote add mine 新的仓库地址</div></pre></td></tr></table></figure></p>
<p>将新建的插件提交推送到您的 dingdang-contrib 仓库中：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add Weather.py</div><div class="line">git commit -m <span class="string">"新增天气插件"</span></div><div class="line">git push -u mine master</div></pre></td></tr></table></figure></p>
<p>完成后访问您的 dingdang-contrib 仓库主页，可以看到一个创建 pull request 的提示：</p>
<p><img src="/images/how-to-write-dingdang-plugin/pull-request-hint.png" alt="创建pull request的提示"></p>
<p>点击 【compare and pull request】 按钮，进入 pull request 创建页面，申请将您的改动合并到 dingdang-contrib 项目中：</p>
<p><img src="/images/how-to-write-dingdang-plugin/pull-request.png" alt="创建一个 pull request"></p>
<p>在里头认真填写插件的用途、使用示例和配置项。完成后点击 【Create pull requset】 ，完成创建，等待 <a href="https://github.com/dingdang-robot" target="_blank" rel="external">dingdang-robot</a> 组织的审核。</p>
<p><img src="/images/how-to-write-dingdang-plugin/pull-request-created.png" alt="创建一个 pull request"></p>
<p>一旦审核通过，您的插件就发布成功了。</p>
<p>为了让更多人了解您的插件的用途，还应该到 <a href="https://github.com/dingdang-robot/dingdang-contrib/wiki" target="_blank" rel="external">dingdang-contrib 的 Wiki</a> 中添加该插件的用途。先在首页中增加一条插件记录：</p>
<p><img src="/images/how-to-write-dingdang-plugin/wiki-home-edit.png" alt="增加插件记录"></p>
<p>完成后首页就增加了您创建的插件的记录：</p>
<p><img src="/images/how-to-write-dingdang-plugin/wiki-home.png" alt="增加插件记录"></p>
<p>点击该插件的链接，进入插件详情页创建页面，填入和刚刚创建 pull request 时相同的内容，即插件的用途、使用示例和配置项即可（也可以根据需求增加更多信息）。</p>
]]></content>
    <category scheme="http://hahack.com/tags/dingdang/" term="dingdang"/>
    <category scheme="http://hahack.com/tags/Raspberry-Pi/" term="Raspberry Pi"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[叮当：一个开源的中文智能音箱项目]]></title>
    <link href="http://hahack.com/codes/dingdang-robot-intro/"/>
    <id>http://hahack.com/codes/dingdang-robot-intro/</id>
    <published>2017-05-22T05:43:21.000Z</published>
    <updated>2019-01-07T15:20:38.503Z</updated>
    <content type="html"><![CDATA[<p>这个项目其实来源于我生活中的一个需求：我每天晚上都会去厨房做一个面包当明天的早餐，当我把用料按顺序准备好放进面包机时，我需要准确预约到明天早上我吃早餐的时间。然而，几乎每次在这个时候我都没有带手机在身边，而是都放在客厅里充电，这时只能跑去客厅看时间。虽然厨房到客厅只有几步之遥，但自己又是懒癌患者，每天都要这么来回奔波就觉得很不方便。要解决这个问题当然有很多种方法，比如直接买个小时钟放在厨房。不过我更希望“连看都不用看”，直接有人告诉我时间。所以，我需要一个像 Amazon Echo 那样的智能音箱。</p>
<p>然而，不论是 Amazon Echo 、Google Home 还是微软 Cortana 音箱，在国内的使用都是个问题。虽然国内也有类似的智能音箱产品，但我没有用过这些产品，不知道可定制性如何。比如，如果我需要开发个功能让它告诉我某种面包的配方是什么，这些产品就不一定能做到了。考虑再三，我决定自己动手写一个。整个项目用了差不多三个星期的业余零碎时间。</p>
<p>先放上项目主页：<a href="http://dingdang.hahack.com" target="_blank" rel="external">http://dingdang.hahack.com</a></p>
<p>下面分享一下我在开发这个项目过程中的心得。</p>
<a id="more"></a>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>如果您在使用微信或者其他客户端程序阅读本文时发现视频无法播放，请改为在浏览器中打开。</p>
</div></p>
<h2 id="硬件">硬件</h2>
<p>首先要解决的是硬件问题。我选择在 Raspberry Pi 上开发。于是我买了块 Raspberry Pi 三代主板。麦克风和音响方面，出于美观的目的，买了个自带音响的 USB 全向会议麦克风。整套设备看起来就像这样：</p>
<p><img src="/images/dingdang-robot-intro/devices1.jpg" alt="简化体"></p>
<p>后面觉得这个麦克风自带的音响音质太一般了，所以我又外接了一个小音箱。然后再插了一个摄像头，用来实现拍照功能。最终的完全体进化成了这样：</p>
<p><img src="/images/dingdang-robot-intro/devices2.jpg" alt="完全体"></p>
<p>硬件有了，接下来就得开始写软件了。主要的框架借鉴了 <a href="jasperproject.github.io">Jasper 项目</a>，并加入了我自己的定制和想法。这里说说一些有意思的部分。</p>
<h2 id="指令接收">指令接收</h2>
<p>智能音箱要解决的一个最重要的问题就是如何接收指令。这里头主要涉及两个问题：</p>
<ol>
<li>被动唤醒（Passive Listening），即“什么时候开始听”。这个阶段只监听唤醒词。当听到唤醒词时，进入主动聆听。</li>
<li>主动聆听（Active Listening），即“什么时候结束听”。这个阶段主动聆听用户的任何语音指令，然后对听到的内容进行分析处理。</li>
</ol>
<p>被动唤醒阶段的基本策略是：每次以 16000 的采样率录制 1024 个采样作为一个采样集，然后对采样集进行信号强度估计，当某个采样集信号强度大于一个阈值时，就认为可能接受到了指令。然后持续录制多 1 秒时间，再转交给语音识别模块。当语音识别模块认为是唤醒词时，进入主动聆听阶段。</p>
<p>主动聆听的策略与被动唤醒基本相似，每次以 16000 的采样率录制 1024 个采样作为一个采样集，然后对采样集进行信号强度估计，当某个采样集信号强度低于一个阈值约 1 秒的时间时，就认为用户已说完了指令。当然还要考虑环境吵杂，一直处于聆听的可能。因此可以再加一个超时保护，超过 12 秒就结束聆听。</p>
<h2 id="语音处理">语音处理</h2>
<p>说说STT（语音识别）引擎和TTS（文本转文本）引擎的选择。由于被动唤醒会试图识别所有听到的内容，出于隐私保护的目的，应该使用离线的语音识别引擎，因此我选择的是 <a href="https://github.com/cmusphinx/pocketsphinx" target="_blank" rel="external">PocketSphinx</a> 。而对于主动聆听，由于是在唤醒阶段才会进行转换，进入主动聆听前会有蜂鸣提示，用户也会清楚此时叮当正在听他们说话，相对来说隐私泄露的可能性就比较低，因此我选择的是在线的百度 STT 语音识别服务，也省下了扩展语音识别模型的工夫，有利于更好地实现插件可扩展。TTS 引擎方面同样也先支持了百度的语音合成。</p>
<p>在实际测试中，PocketSphinx 的识别出乎意料的好。由于我的离线指令集只有几个候选唤醒词，PocketSphinx 对这些唤醒词的识别非常灵敏，甚至有时候其他声音也可能被误当成唤醒词而唤醒叮当。但即使被意外唤醒了，不去理会叮当就可以了。</p>
<p>相比之下，百度的语音识别就比较迟钝了。有时候明明我发音很清晰了，还是会识别成另外的含义。通过在百度的语音识别平台<a href="https://github.com/wzpan/dingdang-robot/wiki/configuration#%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%87%86%E7%A1%AE%E5%BA%A6" target="_blank" rel="external">上传自定义的语音识别词库</a> 可以提高识别的准确率。另外，由于我用的是 Restful API，网速比较差的时候响应也比较慢。我在家用的是 10M 带宽的网络，反应速度还算可以接受。我准备后面尝试接入更多的语音识别平台，看看识别速度和准确度方面能否有所提升。</p>
<p>下面这个视频是我与叮当对话的演示。我把唤醒词设置成了“小梅”：</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://www.miaopai.com/show/-yeEBNJlvrQ-UNZzaglxr2s9JQU8TZNy.htm" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<center>
<embed src="http://player.youku.com/player.php/sid/XMjg0OTQ1OTkxNg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</center><br>
<p>一个问题是当回答内容比较长（比如问叮当当天的新闻）时，合成语音的耗时会变得很长，给人的感受是叮当的响应很慢。所以我加了个 <code>read_long_content</code> 的选项。当内容过长时，改成发送到用户的邮箱或者微信。下面这段音频是一个例子：</p>
<p><i class="fa fa-music"></i><a href="http://onmw7y6f4.bkt.clouddn.com/%E9%95%BF%E5%86%85%E5%AE%B9%E5%8F%91%E5%BE%AE%E4%BF%A1.mp3" target="_blank"> 长内容发微信 (270.37KB) </a></p>
<p><img src="/images/dingdang-robot-intro/long_content.png" alt="微信接收长内容"></p>
<h2 id="插件">插件</h2>
<p>叮当最好玩的部分当然就是玩插件了，通过写插件可以让叮当接入各种各样的服务，完成各种各样的事情。我在叮当里也内置了几个插件<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。为了方便用户扩展，我把 <code>~/.dingdang/contrib</code> 设定为第三方插件目录，允许让用户在里头编写插件并提交到 <a href="https://github.com/wzpan/dingdang-contrib" target="_blank" rel="external">dingdang-contrib</a> 项目共享。</p>
<ul>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#time" target="_blank" rel="external">Time</a>：顾名思义就是询问时间的，先满足我的个人需求。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#echo" target="_blank" rel="external">Echo</a>：简单的回声/传话功能。当接入微信时，可以利用这个功能实现远程给家里发语音消息。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#email" target="_blank" rel="external">Email</a>：询问邮箱中有多少未读邮件。在这之前用户需要先配置好邮箱账户。另外，叮当还有个定期消息检查机制，每 30 秒会执行一次邮件检查，如果有未读邮件，将会在当次运行会话中给用户语音播报一次。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#camera" target="_blank" rel="external">Camera</a>：用于调起摄像头拍照（如果安装了摄像头的话）。如果接入了邮箱或微信，照片将发送到用户的邮箱或微信中（选择哪种取决于配置中 prefers_email 的值）。</li>
<li><a href="https://github.com/wzpan/dingdang-robot/wiki/plugins#unclear" target="_blank" rel="external">Unclear</a>：用于处理未知的问题。如果接入了对话机器人（例如图灵机器人），将转交给对话机器人应答；否则将给予类似 “我没听清楚” 这样的回复。</li>
</ul>
<p>下面这个视频是 Camera 插件的演示<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://v.youku.com/v_show/id_XMjc3OTc0MDczMg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<center>
<embed src="http://player.youku.com/player.php/sid/XMjc3OTc0MDczMg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</center><br>
<p>另外，如果接入了微信，还可以让叮当安静地拍一张家里的照片，而不发出任何声音。下面这个视频演示了如何使用微信与家里的机器人交互，包括远程控制拍照。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>使用手机阅读本文的用户，如果看不到视频，可以点击<a href="http://v.youku.com/v_show/id_XMjc3OTcyOTE1Mg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="external">这个链接</a>前往观看。</p>
</div></p>
<center>
<embed src="http://player.youku.com/player.php/sid/XMjc3OTcyOTE1Mg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</center><br>
<p>这对于需要远程监控家里的情况的用户而言就非常方便了，比如家里有小孩的情况。</p>
<h2 id="音乐播放">音乐播放</h2>
<p>既然是智能音箱，当然少不了播放音乐的功能。所以我额外写了个播放网易云音乐的插件 <a href="https://github.com/wzpan/dingdang-contrib/wiki/neteasemusic" target="_blank" rel="external">NetEaseMusic</a> 。出于版权考虑，并不集成进官方插件中，而是放进 dingdang-contrib 里头。</p>
<p>这个插件的实现比较复杂。普通的插件接受到指令，响应完就退出了。而为了能支持各种指令控制音乐播放，这个插件在接收到播放控制指令后并不退出插件，而是进入一个播放器模式，这个模式主动聆听得到的指令只会在播放控制指令集中匹配，其他的插件指令都不起作用。只有当用户要求退出播放时才回到普通模式。NetEaseMusic 的播放控制指令如下：</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>相同指令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>播放音乐</td>
<td>-</td>
<td>进入音乐播放模式。在音乐播放模式下，其他的插件功能将不可用。</td>
</tr>
<tr>
<td>下一首</td>
<td>切歌, 下一首歌, 下首歌</td>
<td>切换到下一首歌。如果没有下一首歌，就回到列表中第一首歌</td>
</tr>
<tr>
<td>上一首</td>
<td>上一首歌，上首歌</td>
<td>切换到上一首歌。如果没有上一首歌，就跳到列表中最后一首歌</td>
</tr>
<tr>
<td>大声点</td>
<td>大点声，大声</td>
<td>调高播放音量</td>
</tr>
<tr>
<td>小声点</td>
<td>小点声，小声</td>
<td>降低播放音量</td>
</tr>
<tr>
<td>随机播放</td>
<td>-</td>
<td>随机播放列表中的音乐</td>
</tr>
<tr>
<td>顺序播放</td>
<td>-</td>
<td>顺序播放列表中的音乐</td>
</tr>
<tr>
<td>暂停播放</td>
<td>-</td>
<td>暂停音乐的播放</td>
</tr>
<tr>
<td>播放</td>
<td>继续</td>
<td>继续音乐的播放</td>
</tr>
<tr>
<td>榜单</td>
<td>-</td>
<td>播放推荐榜单</td>
</tr>
<tr>
<td>歌单</td>
<td>-</td>
<td>播放用户的歌单（如果有多张，将只播放第一张）</td>
</tr>
<tr>
<td>结束播放</td>
<td>退出播放，停止播放</td>
<td>退出音乐播放模式。</td>
</tr>
<tr>
<td>搜索</td>
<td>查找</td>
<td>搜索歌曲/歌手。将自动播放搜索结果。</td>
</tr>
<tr>
<td>什么歌</td>
<td>-</td>
<td>正在播放的是什么歌</td>
</tr>
</tbody>
</table>
<p>实现这个插件的过程中还参考了 Vellow 的 MusicBox 项目<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>以及 yaphone 的 <a href="https://github.com/yaphone/RasWxNeteaseMusic" target="_blank" rel="external">RasWxNeteaseMusic</a> 。为了方便重用，我把 MusicBox 的核心 API 抽离了出来封成了一个 <a href="https://github.com/wzpan/MusicBoxApi" target="_blank" rel="external">MusicBoxApi 库</a> 。比较坑爹的是就在我准备发布叮当的前几天，老的获取音乐地址的方式彻底不能用了，而<a href="https://github.com/darknessomi/musicbox/wiki/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%96%B0%E7%89%88WebAPI%E5%88%86%E6%9E%90%E3%80%82" target="_blank" rel="external">新的接口</a>批量获取的地址不知道为什么是乱序的，于是我只能在播放每首歌前都调用一下新版的获取地址的 POST 接口，又增加了一点响应时间<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>。</p>
<p>下面这段音频是使用叮当控制音乐播放的演示：</p>
<p><i class="fa fa-music"></i><a href="http://onmw7y6f4.bkt.clouddn.com/%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90.mp3" target="_blank"> 播放音乐 (2.3MB) </a></p>
<p>完成了音乐播放功能后，叮当的好玩程度提高了很多。以前要听歌，至少得把电脑或者手机打开。现在只需要喊一声叫叮当播放歌曲就可以了。想换歌、搜索歌曲、调节音量都是说句话就搞定的事情，生活幸福指数大幅提升 <code>^_^</code> 。</p>
<h2 id="总结和后续">总结和后续</h2>
<p>对于有 Coding 能力的 Hacker 而言，自己动手做一个智能音箱，不仅可以当做业余练手项目，还可以自由地定制硬件模块，并实现自己需要的各种功能，这远比直接购买一个 Amazon Echo 有趣得多。</p>
<p>后面我计划做的事情有：</p>
<ul>
<li>尝试接入更多的 STT / TTS 服务，优化叮当的响应时间；</li>
<li>结合 NLP 技术实现更复杂的指令识别，比如提醒功能；</li>
<li>加入人体感应模块等传感器，把它变得更加智能。</li>
</ul>
<p>更重要的，我更希望能有其他有兴趣的朋友参与进来，一同开发完善这个智能音箱项目。我相信，这种个性化服务的产品本身就应该是完全可定制的。而您的加入可以使叮当变得更智能！</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>完整的插件信息可以在<a href="https://github.com/wzpan/dingdang-robot/wiki/plugins" target="_blank" rel="external">这里</a>找到。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>能支持拍照的智能音箱估计没多少吧？这就是自己开发智能音箱的好处，想接什么模块就接什么模块。想实现什么功能就实现什么功能。 <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p>Github 上搜索关键词“musicbox” 可以找到好几个类似的仓库，其实都是基于 Vellow 最初的那个版本的修改。我实际上参考的是 <a href="https://github.com/darknessomi/musicbox/wiki" target="_blank" rel="external">darknessomi 的版本</a> ，但我认为最大的功劳还是该给 Vellow 。 <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p>如果您知道如何批量获取播放地址且保持原来的列表顺序，还请告诉我方法。 <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/dingdang/" term="dingdang"/>
    <category scheme="http://hahack.com/tags/Raspberry-Pi/" term="Raspberry Pi"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（五）：二进制大文件的版本控制]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-5/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-5/</id>
    <published>2017-04-19T09:22:53.000Z</published>
    <updated>2018-07-06T17:27:30.009Z</updated>
    <content type="html"><![CDATA[<p>毫无疑问，Git 非常适合用于代码文件的版本控制。对于纯代码仓库，由于每次实际提交都是增量内容，即使仓库经历了几十次提交，整个仓库的大小往往都不会大幅增加。</p>
<p>而对于存在二进制文件的仓库，情况就变了：Git 并不能很好地支持二进制文件的增量提交，每次更新一个二进制文件，就相当于把这份文件的完整内容再往仓库里扔。久而久之，这个仓库就会变得非常大，影响代码拉取速度。</p>
<p>举一个实际的例子，为了加快应用的构建速度，我们团队的框架先会编译成 SDK ，再交由上层构建应用。框架 SDK 也是一个独立的 Git 仓库，里头包含了大量的二进制包：</p>
<p><img src="/images/enterprise-class-git-version-control-5/framework.png" alt="Framework SDK"></p>
<p>由于框架也有多个分支，每个分支的迭代速度比较快，SDK 仓库的体积在三个月的时间内就膨胀到了 1G 。<a id="more"></a></p>
<p><img src="/images/enterprise-class-git-version-control-5/before.png" alt="改造前的framework仓库"></p>
<p>如此庞大的仓库体积让第一次拉代码的同事叫苦不迭。一次全新的 clone ，即使拉取速度达到了 5.01 MB/s，在 framework 这个模块上就需要花上大约 7 分钟的时间：</p>
<p><img src="/images/enterprise-class-git-version-control-5/http-clone.png" alt="HTTP拉取仓库"></p>
<p>当很多人同时拉代码时，还有很大概率因为 HTTP 超时而拉取失败：</p>
<p><img src="/images/enterprise-class-git-version-control-5/fail.png" alt="HTTP超时"></p>
<p>为了解决这个问题，我先后尝试了几种方案。</p>
<h2 id="方案一：改用-ssh">方案一：改用 SSH</h2>
<p>第一个思路非常 intuitive ：既然 HTTP 的拉取不稳定，那改成 SSH 如何呢？SSH 的长连接总比 HTTP 稳定吧？</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git remote remove origin  <span class="comment"># 删除原来的http仓库地址</span></div><div class="line"><span class="variable">$ </span>git remote add origin git<span class="variable">@your</span>-site.<span class="symbol">com:</span>your-group/your-repo.git  <span class="comment"># 改成新的ssh仓库地址</span></div></pre></td></tr></table></figure></p>
<p>这个思路被证实是有效的。通过修改这几个模块的仓库地址为 SSH ，仓库的拉取成功率提升了很多，出现 RPC Failed 的情况也变少了。</p>
<p>然而，这种方案依然无法解决拉取速度慢的问题，完整的拉取该模块的耗时并不比 HTTP 方式快（甚至可能更慢）：</p>
<p><img src="/images/enterprise-class-git-version-control-5/ssh-clone.png" alt="SSH拉取仓库"></p>
<p>另外，这种方式要求每个人都配好 SSH Keys ，否则拉取仓库时也会直接报错。这对于刚接触 Git 的同事而言又增加了一点 cognitive load 。</p>
<h2 id="方案二：单分支克隆">方案二：单分支克隆</h2>
<p>第二个思路是在初次拉取的时候不完整克隆整个工程，而是只克隆一个分支，这样也能减少 N 倍的时间。Git 允许带上 <code>--single-branch -b &lt;分支名&gt;</code> 选项，指定只拉取某一分支：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">$ git clone --single-branch -b &lt;分支名&gt;</span> <span class="symbol">http:</span>/<span class="regexp">/your-site.com/your</span>-group/your-repo.git</span></div></pre></td></tr></table></figure></p>
<p>用这种方法确实减少了一定的时间，但耗时依然可能很长。以我们的框架 SDK 仓库为例，单纯拉一个 master_dev 分支也要 3 分钟左右的时间。</p>
<p><img src="/images/enterprise-class-git-version-control-5/single-branch-clone.png" alt="单分支克隆"></p>
<p>没有数量级别的减少，也就意味着不久之后单个分支的拉取时间也会超过现在整个仓库的完整克隆时间。</p>
<h2 id="方案三：浅克隆">方案三：浅克隆</h2>
<p>大部分人使用 SDK 时并不需要检出历史版本，对这些人而言，只需要拿到需要的一个快照就可以满足构建需求了。因此方案三就是限定克隆时的深度来加快拉取速度。Git 允许带上 <code>--depth &lt;深度&gt;</code> 来指定拉取深度。例如只拉取分支最新的快照：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">$ git clone --single-branch -b &lt;分支名&gt;</span> --depth <span class="number">1</span> <span class="symbol">http:</span>/<span class="regexp">/your-site.com/your</span>-group/your-repo.git</span></div></pre></td></tr></table></figure></p>
<p>由于只拉取最新快照，用这种方式的拉取速度就快了很多。以我们的框架 SDK 仓库为例，拉 master_dev 最新的快照只需要不到 6 秒的时间。</p>
<p><img src="/images/enterprise-class-git-version-control-5/shallow-clone.png" alt="浅克隆"></p>
<p>浅克隆虽然能够解决代码拉取的问题，但可想而知这样拉取下来的仓库是不完整的，它缺失了所有历史记录，也不能在这个仓库上提交新的内容。对于框架的开发人员，为了能够提交新内容，依然需要花长时间去克隆完整的仓库。因此浅克隆依然不是一个完美的方案。</p>
<h2 id="方案四：使用-git-lfs">方案四：使用 Git-LFS</h2>
<p>虽然 Git 本身并不能很好地支持二进制大文件的版本控制，但幸运的是已经出现了一些扩展能够帮助 Git 胜任这些工作。我所选择的扩展就是由 Github 团队开发的 <a href="https://git-lfs.github.com" target="_blank" rel="external">Git-LFS</a> 。</p>
<p>Git-LFS 的原理并不复杂：大文件不再支持添加到仓库中，而是存储到另外的 LFS 服务器上。仓库中只保留这些文件的文本链接。当拉取仓库时，Git-LFS 的钩子将自动把这些文本链接恢复成 LFS 中的实际内容。一图胜千言：</p>
<p><img src="/images/enterprise-class-git-version-control-5/git-lfs.png" alt="Git-LFS原理"></p>
<h3 id="服务端配置">服务端配置</h3>
<p>选择 Git-LFS 的一个首要原因是 Gitlab 原生提供了对 Git-LFS 的支持<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>有趣的是，就在我写这篇文章的时候，<a href="https://git-lfs.coding.me/" target="_blank" rel="external">Coding 也宣布了对 Git LFS 的支持</a>。 </span></span></span> 。要在 Gitlab 中开启 Git-LFS 非常简单：</p>
<ol>
<li>编辑 /opt/gitlab/gitlab.rb 文件，找到 <code>Git LFS</code> 项目；</li>
<li>将 <code>gitlab_rails['lfs_enabled']</code> 项目设置成 <code>true</code>；</li>
<li>将 <code>gitlab_rails['lfs_storage_path']</code> 项目设置为本地的一个已存在目录。这个目录就是实际的 LFS 存储目录。</li>
<li>执行 <code>gitlab-ctl reconfigure</code> 重新配置 Gitlab；</li>
<li>执行 <code>gitlab-ctl restart</code> 重启 Gitlab ，使配置生效。</li>
</ol>
<p>至此服务端就配置完成了。</p>
<h3 id="工具安装">工具安装</h3>
<p><a href="https://github.com/git-lfs/git-lfs/releases/latest?utm_source=gitlfs_site&amp;utm_medium=downloads_link&amp;utm_campaign=gitlfs" target="_blank" rel="external">下载</a> Git LFS 。解压完后执行：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git lfs install</div></pre></td></tr></table></figure></p>
<p>完成工具的安装。这步骤只需要做一次。这个步骤实际做的事情是给 git 加上 lfs 命令，另外还创建了 post-checkout、post-commit、post-merge、pre-push 几个全局钩子。当我们在一个使用 LFS 的仓库执行诸如 <code>checkout</code>、<code>commit</code>、<code>merge</code>、<code>push</code> 的 Git 操作时，将触发这些钩子自动地维护用 LFS 管理的文件。</p>
<h3 id="仓库改造">仓库改造</h3>
<p>接下来就可以开始改造仓库，把大文件都改用 LFS 来管理。</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git lfs track <span class="string">"*.jar"</span></div><div class="line"><span class="variable">$ </span>git lfs track <span class="string">"*.so"</span></div><div class="line"><span class="variable">$ </span>git lfs track <span class="string">"*.aar"</span></div></pre></td></tr></table></figure></p>
<p>这几步执行完会在仓库中创建一个 .gitattribute 文件：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat <span class="string">.gitattributes</span></div><div class="line">*<span class="string">.jar</span> filter=<span class="keyword">lfs</span> diff=<span class="keyword">lfs</span> merge=<span class="keyword">lfs</span> -text</div><div class="line">*<span class="string">.so</span> filter=<span class="keyword">lfs</span> diff=<span class="keyword">lfs</span> merge=<span class="keyword">lfs</span> -text</div><div class="line">*<span class="string">.aar</span> filter=<span class="keyword">lfs</span> diff=<span class="keyword">lfs</span> merge=<span class="keyword">lfs</span> -text</div></pre></td></tr></table></figure></p>
<p>Git 的钩子就是根据这个文件来确定当前仓库是否有使用 LFS 管理的文件的。所以这个文件一定要确保添加进仓库中：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> .gitattributes</div></pre></td></tr></table></figure></p>
<p>完成后像往常一样暂存和提交文件即可：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git add foo.jar</div><div class="line"><span class="variable">$ </span>commit -m <span class="string">"Add jar file"</span></div><div class="line"><span class="variable">$ </span>git push origin master</div></pre></td></tr></table></figure></p>
<p>要注意的是，这个改造过程只会把当前这次 commit 的指定类型文件改成用 LFS 才存储，而不会影响所有历史记录。对于我们的 SDK 仓库，仓库本身已经非常庞大，直接这么改造是没有任何瘦身效果的。所以最好的做法就是重新创建一个仓库，把各个分支最新的快照同步过来。</p>
<p><img src="/images/enterprise-class-git-version-control-5/after.png" alt="改造后的SDK仓库"></p>
<p>由图可以看出，重新创建的这个仓库，把大部分的二进制大文件都改用了 LFS 来存储，整个仓库的大小从 1G 减小到 3M 不到！</p>
<p>测试对这个新的仓库进行克隆，由于本身仓库很小，一下子就克隆下来了。之后 Git LFS 的全局钩子将自动将当前仓库里的 LFS 链接文件恢复成真正的文件：</p>
<p><img src="/images/enterprise-class-git-version-control-5/lfs-clone.png" alt="克隆 Git LFS 仓库"></p>
<p>由于这个仓库的二进制包多达64个，整个克隆过程的时间主要花在下载这些二进制包，总耗时约为 43 秒。虽然没有浅克隆快，但这样的方式拉下来的仓库是完整的仓库，而且对普通开发者而言是完全透明的操作（他们甚至不需要知道 LFS 是什么），因此是更加理想的方案。</p>
<h3 id="git-lfs-的踩坑之旅">Git-LFS 的踩坑之旅</h3>
<p>虽然 Git-LFS 很好地解决了大文件的版本控制问题，但实际应用到实际团队中时也不见得能顺风顺水。在我将它推广到团队的项目中时，就遇到了几个水土不服的问题。下面整理一下，方便后来人。</p>
<h4 id="1-警惕钩子覆盖">1. 警惕钩子覆盖</h4>
<p>第一个遇到的问题就是钩子的覆盖问题。前面我们提到 Git-LFS 其实是利用全局钩子来关联 Git 与 LFS 的。当你的工程中也加了钩子时，这时候就要格外小心了。</p>
<p>以我们的工程为例，我给每个子模块都加了个 pre-push 钩子用来做 push 前检查：</p>
<ol>
<li>如果子模块接入了 Code Review，检查要 push 的提交是否都经过了 Code Review；</li>
<li>如果是 React Native 子模块，检查本地的 React Native 打包是否成功；</li>
<li>检查如果要推送到一个新分支，检查目标分支名是否包含非 ASCII 字符。</li>
</ol>
<p>问题来了，这个 pre-push 钩子的优先级会高于全局的那个 Git LFS 钩子，因此使得 Git LFS 的 pre-push 失去作用。而这个钩子非常重要：它的作用是在 push 的时候把用 Git LFS 跟踪管理的文件上传到 LFS 服务器上。如果这些文件没有上传成功，别人拉取仓库就会报如下错误：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Downloading hotfix/plugin/commons-io-2.4.jar (180.80 KB)</div><div class="line">Error downloading object: hotfix/plugin/commons-io-2.4.jar (cc6a41dc3eaacc9e440a6bd0d2890b20d36b4ee408fe2d67122f328bb6e01581)</div><div class="line"></div><div class="line">Errors logged to /Users/xxxx/Desktop/App_Android_master_dev/.git/modules/framework/xxxx/xxxx/lfs/objects/logs/20170417T212952.282306976.log</div><div class="line">Use `git lfs logs last` to view the log.</div><div class="line">error: external filter git-lfs smudge -- %f failed 2</div><div class="line">error: external filter git-lfs smudge -- %f failed</div><div class="line">fatal: hotfix/plugin/commons-io-2.4.jar: smudge filter lfs failed</div></pre></td></tr></table></figure></p>
<p>解决办法就是将 Git LFS 钩子的内容与自定义钩子相结合。这是我对 Git LFS 的 pre-push 钩子的改写：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/sh</span></div><div class="line"></div><div class="line">basepath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</div><div class="line">command -v git-lfs &gt;/dev/null <span class="number">2</span>&gt;&<span class="number">1</span> || { <span class="built_in">echo</span> &gt;&<span class="number">2</span> <span class="string">"\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/pre-push.\n"</span>; <span class="keyword">exit</span> <span class="number">2</span>; }</div><div class="line">git lfs pre-push <span class="string">"<span class="variable">$@</span>"</span> && <span class="variable">$basepath</span>/pre-push-custom</div></pre></td></tr></table></figure></p>
<p>最后一行的作用就是先执行 git lfs pre-push 确保正确上传 LFS tracking 的文件，然后再执行 hooks 中的 pre-push-custom 钩子进行其他自定义的检查。</p>
<h4 id="2-zip-包下载的-bug">2. zip 包下载的 bug</h4>
<p>Gitlab 对 Git-LFS 也存在着不足。当我完成了几个大仓库的改造之后，我发现新的仓库在本地可以顺利编译，但在构建站却死活编译不了，报了类找不到的错误：</p>
<p><img src="/images/enterprise-class-git-version-control-5/compile-problem.jpeg" alt="编译问题"></p>
<p>本地构建和构建站构建在代码拉取上面有一个区别：为了加快代码拉取速度，我们在构建站并不使用克隆仓库的方式来拉取代码，而是采用下载 Zip 包的方式。所以我把这个仓库的 Zip 包下载了下来：</p>
<p><img src="/images/enterprise-class-git-version-control-5/download-zip.png" alt="下载zip包"></p>
<p>这个类是在其中一个 jar 包里定义的，而解压发现 jar 包明明已经下载下来了：</p>
<p><img src="/images/enterprise-class-git-version-control-5/problem-file.png" alt="问题jar包"></p>
<p>尝试使用 JD-Gui 打开这个 jar 包，发现这个包打不开。</p>
<p><img src="/images/enterprise-class-git-version-control-5/open-failed.png" alt="jar包无法打开"></p>
<p>那这个文件究竟是什么东西？打印它的内容，真相浮出水面：</p>
<p><img src="/images/enterprise-class-git-version-control-5/whats-this.png" alt="jar包只是个链接文本"></p>
<p>这是个链接文件！说明 Gitlab 并没有将它恢复成实际的文件内容！仔细观察这些二进制文件，我发现它们的大小全部都在 130 字节左右，这意味着这些文件全都没有被恢复。</p>
<p><img src="/images/enterprise-class-git-version-control-5/file-size.png" alt="全部文件都是链接"></p>
<p>不幸的是，由于下载下来的内容不再是个 Git 仓库，这些链接文件已无法恢复成实际的文件内容。</p>
<p><img src="/images/enterprise-class-git-version-control-5/cannot-restore.png" alt="文件无法恢复"></p>
<p>我认为这个是 Gitlab 的问题，于是给 Gitlab 提了一个 <a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/31082" target="_blank" rel="external">bug</a> ，而一个开发人员告诉我类似的问题在去年 3 月份<a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/14261" target="_blank" rel="external">已经有人提过</a>，而目前还未修复 <code>--bb</code> <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>Coding 也有相同的问题，哈哈。 </span></span></span> 。</p>
<p>找到这个原因后，对症下药就简单了：既然下载 Zip 包的方式没法恢复大文件的内容，那就改成用浅克隆。于是我改写了下构建站的代码拉取脚本，将使用 Git LFS 管理大文件的几个模块由下载 zip 的方式改成浅克隆，终于解决了编译问题！</p>
<h2 id="总结">总结</h2>
<p>本文列举了几种二进制大文件导致仓库过大的解决方案。其中，使用 Git-LFS 的方案是一种比较理想的选择。但在实际使用中，一定要小心处理 Git-LFS 可能带来的问题，希望本文的若干踩坑总结也能对读者有所帮助。</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/Gitlab/" term="Gitlab"/>
    <category scheme="http://hahack.com/tags/LFS/" term="LFS"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（四）：多 Gitlab 数据同步]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-4/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-4/</id>
    <published>2017-04-12T07:45:29.000Z</published>
    <updated>2018-07-06T17:27:30.009Z</updated>
    <content type="html"><![CDATA[<h2 id="需求描述">需求描述</h2>
<p>在继续写数学系列前，我想切回去之前的 Git 系列写点东西。我想写系列文章也可以像操作系统的进程调度一样，一个系列暂时写不动了，先 <q>保存现场</q> 跳去另一个 topic 写点东西，同时也给自己留点 buffer 再酝酿一下这个暂时 <q>中断</q> 的系列。等这个系列酝酿够了，再 <q>恢复现场</q> ，继续还这个系列的技术债。</p>
<p>对于一个规模较大的企业，存在多个 Gitlab 站点是很常见的事情。</p>
<p>比如，我们团队在公司发布统一的 Gitlab 之前早已经搭了一个团队用的 Gitlab ，当公司开始推 Git 时，由于我们已经对自己团队的 Gitlab 做了大量的定制，因此并不打算迁移到公司的 Gitlab 。</p>
<p>自己搭建 Gitlab 的好处是可以随心所欲的进行定制，像加远程钩子之类的东西想加就加。但缺点就是平台的维护成本也落到了自己身上。相比之下，公司 Gitlab 则没有什么维护成本，服务的稳定性由更专业的运维人员保证，也不用考虑扩容的问题，但灵活定制就别想了。如果能够实现 Gitlab 间的数据自动同步，我们可以没有顾忌的使用自己的 Gitlab 平台，一旦出现问题，再无痛迁移到公司的 Gitlab 。这样一方面避免了单点问题，节省了维护成本；另一方面也能尽可能保证灵活可定制。本文想讨论的就是多个 Gitlab 站点间的数据同步问题。</p>
<a id="more"></a>
<p>要实现数据同步，Gitlab 官方提供了一套 <a href="https://docs.gitlab.com/omnibus/settings/backups.html" target="_blank" rel="external">备份恢复机制</a> 。但这套机制并不能很好地满足我们的需求：</p>
<ol>
<li>需要两台机器的管理员权限。进行备份和恢复的机器都需要能 SSH 进去执行操作。而我们是不可能拥有公司 Gitlab 的管理员权限的；</li>
<li>会覆盖目标站点的数据。在恢复数据时，目标站点原有的一切数据都会被覆盖。而公司的 Gitlab 有很多个团队的数据，我们的同步不能影响到其他团队的数据；</li>
<li>Gitlab 版本兼容问题。Gitlab 的备份机制要求原站点和目标站点的 Gitlab 版本兼容，否则将恢复失败。而我们的 Gitlab 版本和公司的 Gitlab 版本并不相同，日后存在一方升级导致无法同步的可能。</li>
</ol>
<p>出于以上的考虑，我们自己设计了一套同步工具。与 Gitlab 官方的备份恢复机制相比，它具有以下一些优点：</p>
<ol>
<li>无需 ssh 账户权限。所有操作都通过 Gitlab API 和 Git 操作完成，不用 ssh 登录到机器进行操作；</li>
<li>同步数据类型灵活。可以选择同步组织、仓库代码、wiki、组织成员关系、权限控制信息等类型的数据；</li>
<li>不覆盖目标站点数据。只对目标站点相同组织内的数据进行同步，不影响其他团队的数据；</li>
<li>没有 Gitlab 版本兼容问题。同步过程利用了 Gitlab API ，而 Gitlab API 比 Gitlab 稳定，因此版本兼容问题比较少见。即使出现 API 接口的变更，也可以通过升级工具的接口调用来实现兼容。</li>
</ol>
<p>下面将逐步说明整套同步的方案。为了方便描述，我把同步原 Gitlab 站点称为 A Gitlab，把同步目标站点称为 B Gitlab 。</p>
<p>数据的自动同步主要经历如下几步：</p>
<ol>
<li>同步所有组织，如果建立了新组织，将自动给 B Gitlab 添加该组织；</li>
<li>同步所有组织的所有仓库的代码和 wiki 到 B Gitlab 。</li>
<li>同步所有用户的组织关系。</li>
<li>同步所有仓库的权限控制信息。</li>
</ol>
<h2 id="组织同步">组织同步</h2>
<p>利用 Gitlab API 列举出 A Gitlab 中的所有 groups，然后在 B Gitlab 中自动新建不存在的组织。</p>
<p>列举 Gitlab 的所有组织：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> /groups</div></pre></td></tr></table></figure></p>
<p>返回示例：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">1</span></span>,</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"Foobar Group"</span></span>,</div><div class="line">    "<span class="attribute">path</span>": <span class="value"><span class="string">"foo-bar"</span></span>,</div><div class="line">    "<span class="attribute">description</span>": <span class="value"><span class="string">"An interesting group"</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>根据这个可以获取组织名（name）、组织路径（path）和组织描述（description）。</p>
<p>同样使用类似接口获取 B Gitlab 的所有组织。如果发现 A Gitlab 的某个组织在 B Gitlab 里不存在，可以在 B Gitlab 新增一个组织：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">POST</span> /groups</div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>name（必须）- 组织名</li>
<li>path（必须）- 组织路径</li>
<li>description（可选）- 可选组织描述</li>
</ul>
<h2 id="仓库代码同步">仓库代码同步</h2>
<p>同步所有组织的所有仓库的代码和 wiki 文档到 B Gitlab 。</p>
<p>获取一个组织的所有仓库信息接口：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /groups/<span class="symbol">:id/projects</span></div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>archived (可选) - 只找出已被归档的项目</li>
<li>order_by (可选) - 选择基于 <code>id</code>, <code>name</code>, <code>path</code>, <code>created_at</code>, <code>updated_at</code> 或 <code>last_activity_at</code> 字段来排序。默认使用 <code>created_at</code> 。</li>
<li>sort (可选) - 选择升序还是降序排列。默认为降序。</li>
<li>search (可选) - 构造一个搜索条件过滤数据。</li>
<li>ci_enabled_first (可选) - 将结果根据是否带有 <code>ci_enabled</code> 字段来排序。</li>
</ul>
<p>返回示例：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">4</span></span>,</div><div class="line">    "<span class="attribute">description</span>": <span class="value"><span class="literal">null</span></span>,</div><div class="line">    "<span class="attribute">default_branch</span>": <span class="value"><span class="string">"master"</span></span>,</div><div class="line">    "<span class="attribute">public</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">visibility_level</span>": <span class="value"><span class="number">0</span></span>,</div><div class="line">    "<span class="attribute">ssh_url_to_repo</span>": <span class="value"><span class="string">"git@example.com:diaspora/diaspora-client.git"</span></span>,</div><div class="line">    "<span class="attribute">http_url_to_repo</span>": <span class="value"><span class="string">"http://example.com/diaspora/diaspora-client.git"</span></span>,</div><div class="line">    "<span class="attribute">web_url</span>": <span class="value"><span class="string">"http://example.com/diaspora/diaspora-client"</span></span>,</div><div class="line">    "<span class="attribute">tag_list</span>": <span class="value">[</span></div><div class="line">      <span class="string">"example"</span>,</div><div class="line">      <span class="string">"disapora client"</span></div><div class="line">    ],</div><div class="line">    "<span class="attribute">owner</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="number">3</span></span>,</div><div class="line">      "<span class="attribute">name</span>": <span class="value"><span class="string">"Diaspora"</span></span>,</div><div class="line">      "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"Diaspora Client"</span></span>,</div><div class="line">    "<span class="attribute">name_with_namespace</span>": <span class="value"><span class="string">"Diaspora / Diaspora Client"</span></span>,</div><div class="line">    "<span class="attribute">path</span>": <span class="value"><span class="string">"diaspora-client"</span></span>,</div><div class="line">    "<span class="attribute">path_with_namespace</span>": <span class="value"><span class="string">"diaspora/diaspora-client"</span></span>,</div><div class="line">    "<span class="attribute">issues_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">merge_requests_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">builds_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">wiki_enabled</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">snippets_enabled</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span>,</div><div class="line">    "<span class="attribute">last_activity_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span>,</div><div class="line">    "<span class="attribute">creator_id</span>": <span class="value"><span class="number">3</span></span>,</div><div class="line">    "<span class="attribute">namespace</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span>,</div><div class="line">      "<span class="attribute">description</span>": <span class="value"><span class="string">""</span></span>,</div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="number">3</span></span>,</div><div class="line">      "<span class="attribute">name</span>": <span class="value"><span class="string">"Diaspora"</span></span>,</div><div class="line">      "<span class="attribute">owner_id</span>": <span class="value"><span class="number">1</span></span>,</div><div class="line">      "<span class="attribute">path</span>": <span class="value"><span class="string">"diaspora"</span></span>,</div><div class="line">      "<span class="attribute">updated_at</span>": <span class="value"><span class="string">"2013-09-30T13: 46: 02Z"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">archived</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">avatar_url</span>": <span class="value"><span class="string">"http://example.com/uploads/project/avatar/4/uploads/avatar.png"</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>之后利用同个接口结合 <code>search</code> 参数判断 B Gitlab 上的该组织是否存在同名项目。</p>
<p>如果不存在该项目，可以导入该项目：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">POST</span> /projects</div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>name (必须) - 项目名</li>
<li>path (可选) - 仓库的路径。默认和项目名相同。</li>
<li>namespace_id (可选) - 新项目的所属的id。这里设为A Gitlab中拥有该项目的id。</li>
<li>description (可选) - 项目的描述。这里设为A Gitlab中该项目的描述。</li>
<li>issues_enabled (可选) - 是否开启 issue 。</li>
<li>merge_requests_enabled (可选)</li>
<li>builds_enabled (可选)</li>
<li>wiki_enabled (可选)</li>
<li>snippets_enabled (可选)</li>
<li>public (可选) - 如果为 <code>true</code> ，相当于设置 <code>visibility_level</code> 为 20</li>
<li>visibility_level (可选) - 项目可见度。这里设为A Gitlab中该项目的可见度。</li>
<li>import_url (optional) - 导入地址。这里设为A Gitlab中该项目的 http 地址。</li>
</ul>
<p>完成后 B Gitlab 即会导入 A Gitlab 中的对应仓库。</p>
<p>如果该项目已存在，可以利用我开源的一个 <a href="https://github.com/wzpan/git-repo-sync" target="_blank" rel="external">代码同步工具</a> 来实现两个仓库之间所有分支的同步。</p>
<h2 id="用户组织关系同步">用户组织关系同步</h2>
<p>根据 A Gitlab ，将 B Gitlab 的已激活用户添加到组织中。并从 B Gitlab 删除 A Gitlab 中已 block 或者已移除的用户。</p>
<p>这里要注意的是两个站点间的用户的关联问题。我们的 Gitlab 在一开始就要求使用公司邮箱注册，而公司的 Gitlab 同样也是使用邮箱的 LDAP 账户体系，因此可以利用邮箱来关联两个站点间的账户。</p>
<p>获取 Gitlab 某个组织的所有用户：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /groups/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>返回结果示例：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">1</span></span>,</div><div class="line">    "<span class="attribute">username</span>": <span class="value"><span class="string">"raymond_smith"</span></span>,</div><div class="line">    "<span class="attribute">email</span>": <span class="value"><span class="string">"ray@smith.org"</span></span>,</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"Raymond Smith"</span></span>,</div><div class="line">    "<span class="attribute">state</span>": <span class="value"><span class="string">"active"</span></span>,</div><div class="line">    "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2012-10-22T14:13:35Z"</span></span>,</div><div class="line">    "<span class="attribute">access_level</span>": <span class="value"><span class="number">30</span></span></div><div class="line">  },</div><div class="line">  {</div><div class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">2</span></span>,</div><div class="line">    "<span class="attribute">username</span>": <span class="value"><span class="string">"john_doe"</span></span>,</div><div class="line">    "<span class="attribute">email</span>": <span class="value"><span class="string">"joh@doe.org"</span></span>,</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"John Doe"</span></span>,</div><div class="line">    "<span class="attribute">state</span>": <span class="value"><span class="string">"active"</span></span>,</div><div class="line">    "<span class="attribute">created_at</span>": <span class="value"><span class="string">"2012-10-22T14:13:35Z"</span></span>,</div><div class="line">    "<span class="attribute">access_level</span>": <span class="value"><span class="number">30</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>找出两个 Gitlab 上用户的差异，并执行如下操作：</p>
<ol>
<li>如果 B Gitlab 比 A Gitlab 多出了一些成员，将该成员删除；</li>
<li>如果 A Gitlab 的某个用户 <code>state</code> 字段为 <code>blocked</code> ，则该成员可能已离职或 transfer，将该成员从 B Gitlab 中删除；</li>
<li>如果 A Gitlab 上某个用户在 B Gitlab 上不存在，则可能是新成员，尝试添加该成员。</li>
<li>如果某一用户在两个 Gitlab 上的权限等级不一样，则该用户的等级可能经过修改，需要同步该权限等级到 B Gitlab 。</li>
</ol>
<p>添加组织成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">POST</span> /groups/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>参数：</p>
<ul>
<li>id (必须) - 组织的 id ，也可以是路径；</li>
<li>user_id (必须) - 用户的 ID ，即 UM 账号</li>
<li>access_level (必须) - 权限等级</li>
</ul>
<p>删除组织成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">DELETE</span> /groups/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<p>编辑组织成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /groups/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<p>另外还需要考虑 B Gitlab 不存在该用户的情况，需做容错处理。</p>
<h2 id="项目权限控制信息同步">项目权限控制信息同步</h2>
<p>项目的权限控制信息主要包括项目成员设定及分支保护设定。</p>
<h3 id="项目成员同步">项目成员同步</h3>
<p>项目成员的同步与组织成员的同步大同小异。</p>
<p>获取项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /projects/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>添加项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">POST</span> /projects/<span class="symbol">:id/members</span></div></pre></td></tr></table></figure></p>
<p>删除项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">DELETE</span> /projects/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<p>编辑项目成员的 API ：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /projects/<span class="symbol">:id/members/</span><span class="symbol">:user_id</span></div></pre></td></tr></table></figure></p>
<h3 id="分支保护同步">分支保护同步</h3>
<p>首先获取 A Gitlab 中一个仓库的所有分支：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">GET</span> /projects/<span class="symbol">:id/repository/branches</span></div></pre></td></tr></table></figure></p>
<p>返回示例：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"async"</span></span>,</div><div class="line">    "<span class="attribute">commit</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="string">"a2b702edecdf41f07b42653eb1abe30ce98b9fca"</span></span>,</div><div class="line">      "<span class="attribute">parents</span>": <span class="value">[</span></div><div class="line">        {</div><div class="line">          "<span class="attribute">id</span>": <span class="value"><span class="string">"3f94fc7c85061973edc9906ae170cc269b07ca55"</span></span></div><div class="line">        }</div><div class="line">      ],</div><div class="line">      "<span class="attribute">tree</span>": <span class="value"><span class="string">"c68537c6534a02cc2b176ca1549f4ffa190b58ee"</span></span>,</div><div class="line">      "<span class="attribute">message</span>": <span class="value"><span class="string">"give Caolan credit where it's due (up top)"</span></span>,</div><div class="line">      "<span class="attribute">author</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">committer</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">authored_date</span>": <span class="value"><span class="string">"2010-12-08T21:28:50+00:00"</span></span>,</div><div class="line">      "<span class="attribute">committed_date</span>": <span class="value"><span class="string">"2010-12-08T21:28:50+00:00"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">protected</span>": <span class="value"><span class="literal">false</span></span></div><div class="line">  },</div><div class="line">  {</div><div class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"gh-pages"</span></span>,</div><div class="line">    "<span class="attribute">commit</span>": <span class="value">{</span></div><div class="line">      "<span class="attribute">id</span>": <span class="value"><span class="string">"101c10a60019fe870d21868835f65c25d64968fc"</span></span>,</div><div class="line">      "<span class="attribute">parents</span>": <span class="value">[</span></div><div class="line">        {</div><div class="line">          "<span class="attribute">id</span>": <span class="value"><span class="string">"9c15d2e26945a665131af5d7b6d30a06ba338aaa"</span></span></div><div class="line">        }</div><div class="line">      ],</div><div class="line">      "<span class="attribute">tree</span>": <span class="value"><span class="string">"fb5cc9d45da3014b17a876ad539976a0fb9b352a"</span></span>,</div><div class="line">      "<span class="attribute">message</span>": <span class="value"><span class="string">"Underscore.js 1.5.2"</span></span>,</div><div class="line">      "<span class="attribute">author</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">committer</span>": <span class="value">{</span></div><div class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"Jeremy Ashkenas"</span></span>,</div><div class="line">        "<span class="attribute">email</span>": <span class="value"><span class="string">"jashkenas@example.com"</span></span></div><div class="line">      },</div><div class="line">      "<span class="attribute">authored_date</span>": <span class="value"><span class="string">"2013-09-07T12: 58: 21+00: 00"</span></span>,</div><div class="line">      "<span class="attribute">committed_date</span>": <span class="value"><span class="string">"2013-09-07T12: 58: 21+00: 00"</span></span></div><div class="line">    },</div><div class="line">    "<span class="attribute">protected</span>": <span class="value"><span class="literal">false</span></span></div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>其中 <code>protected</code> 表示该分支是否受到保护。</p>
<p>根据分支的保护情况修改 B Gitlab 上的分支。</p>
<p>保护某个分支：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /projects/<span class="symbol">:id/repository/branches/</span><span class="symbol">:branch/protect</span></div></pre></td></tr></table></figure></p>
<p>取消某个分支的保护：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">PUT</span> /projects/<span class="symbol">:id/repository/branches/</span><span class="symbol">:branch/unprotect</span></div></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2>
<p>对于同时搭建了多个 Gitlab 的团队，多个 Gitlab 间的数据同步是值得去实现的事情。它一方面能避免单点问题，降低小团队的维护成本，一方面也能尽量保证小团队的定制灵活性。因此，文本列举了组织同步、仓库代码和wiki同步、组织关系同步、权限控制信息同步等四大方面的同步的方案。我将这四个类型的同步可以写成了三个工具：</p>
<ul>
<li><code>group_sync</code> - 处理组织同步</li>
<li><code>project_sync</code> - 处理项目代码、wiki同步</li>
<li><code>member_sync</code> - 处理组织关系、权限控制信息的同步</li>
</ul>
<p>设定每天自动按顺序执行这几个工具的同步，完成后邮件汇报同步结果。作为实例，这是我们每天都会收到的同步结果邮件（出于保护隐私的考虑，我修改了部分隐私信息）：</p>
<iframe src="http://onmw7y6f4.bkt.clouddn.com/log.html" width="100%" height="360" frameborder="0"></iframe>
<p>由于项目变动、成员变动比较频繁，当希望在计划任务之前进行某方面同步，仍然可以单独手动运行以上工具完成所需方面的同步。对于一些同步及时性要求更高的仓库，则可以通过加 post-receive 钩子调用 <a href="https://github.com/wzpan/git-repo-sync" target="_blank" rel="external">代码同步工具</a> 来实现 push 后即时同步。</p>
<p>要注意的是，这个同步方案并没有保证 A Gitlab 的所有数据都能被完整地同步。在设计同步策略的时候，我跳过了下述类型的同步：</p>
<ol>
<li>用户私有仓库。这些仓库只是个人仓库，不会对组织财产造成影响。且如果要同步私有仓库，则要求两个 Gitlab 站点的账户都为管理员，因为只有管理员才能访问所有用户的私有仓库。</li>
<li>SSH key。用户添加的所有 SSH key 无法同步。</li>
<li>头像。组织、用户、仓库的头像未做同步。</li>
<li>issue。由于我们的 Gitlab 并不用来进行 bug 跟踪管理，所以我跳过了这方面的同步。读者也可以利用 Gitlab API 实现 issue 的同步。</li>
<li>附件。Wiki 中的附件是独立于仓库之外的，需要单独备份。例如使用 <a href="http://rsync.samba.org/" target="_blank" rel="external">rsync</a> 。</li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/Gitlab/" term="Gitlab"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[机器学习的数学基础：线性代数进阶篇]]></title>
    <link href="http://hahack.com/math/math-linear-algebra-graded/"/>
    <id>http://hahack.com/math/math-linear-algebra-graded/</id>
    <published>2017-02-12T13:42:05.000Z</published>
    <updated>2018-07-06T17:27:30.014Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在前面两篇文章中，我简要概括了线性代数中两个最基本的数据表达方式：<a href="/math/math-matrix/">矩阵</a> 和 <a href="/math/math-vector/">向量</a>。有了这两个数学工具作为基础，我们可以再进一步，讨论下面一些内容：</p>
<ol>
<li>如何求解线性空间的基？</li>
<li>向量的子空间、零空间、列空间、行空间、左零空间都是什么东西？怎么求解？</li>
<li>如何用线性代数的知识来拟合数据？</li>
<li>机器学习、图像处理中常见的“特征向量”究竟是什么东西？它和变换矩阵有什么联系？</li>
</ol>
<p>本篇文章将作为线性代数子系列的最终篇。</p>
<a id="more"></a>
<h2 id="阶梯形矩阵">阶梯形矩阵</h2>
<p>阶梯形矩阵是一类非常实用的工具，可以帮助我们求解出线性空间的基，这就能用在诸如计算解不唯一的方程组之类的问题上。</p>
<h3 id="阶梯形矩阵-v2">阶梯形矩阵</h3>
<p>若矩阵 \(\mathbf{A}\) 满足两条件：</p>
<ol>
<li>若有零行（元素全为0的行），则零行应在最下方；</li>
<li>非零首元（即非零行的第一个不为零的元素）的列标号随行标号的增加而严格递增。</li>
</ol>
<p>则称此矩阵 \(\mathbf{A}\) 为阶梯形矩阵。</p>
<p>示例：</p>
<p>\[
\begin{bmatrix}
2 &amp; 0 &amp; 2 &amp; 1 \\
0 &amp; 5 &amp; 2 &amp; -2 \\
0 &amp; 0 &amp; 3 &amp; 2 \\
0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<h3 id="行简化阶梯形矩阵">行简化阶梯形矩阵</h3>
<p>若矩阵 \(\mathbf{A}\) 满足两条件：</p>
<ol>
<li>它是阶梯形矩阵；</li>
<li>非零首元所在的列除了非零首元外，其余元素全为0。</li>
</ol>
<p>则称此矩阵 \(\mathbf{A}\) 为行简化阶梯形矩阵。</p>
<p>示例：</p>
<p>\[
\begin{bmatrix}
2 &amp; 0 &amp; 2 &amp; 1 \\
0 &amp; 5 &amp; 2 &amp; -2 \\
0 &amp; 0 &amp; 3 &amp; 2 \\
0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<h3 id="行最简形矩阵">行最简形矩阵</h3>
<p>若矩阵 \(\mathbf{A}\) 满足两条件：</p>
<ol>
<li>它是行简化阶梯形矩阵；</li>
<li>非零首元都为1</li>
</ol>
<p>则称此矩阵 \(\mathbf{A}\) 为行最简形矩阵。</p>
<h3 id="将矩阵化简成行最简阶梯形">将矩阵化简成行最简阶梯形</h3>
<p>对如下矩阵</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
1 &amp; 2 &amp; 2 &amp; -1 &amp; 12\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\]</p>
<p>，使用初等变换可以将这个矩阵转换成如下的形式：</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
1 &amp; 2 &amp; 2 &amp; -1 &amp; 12\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; -2 &amp; 4 &amp; -10
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\rightarrow
\begin{bmatrix}
1 &amp; 2 &amp; 0 &amp; 3 &amp; 2\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<p>行最简形非常实用。例如，对于下面的方程组：</p>
<p>\[\left\{ 
\begin{eqnarray} 
x_1 + 2x_2 + x_3 + x_4 &amp;=&amp; 7 \\\
x_1 + 2x_2 + 2x_3 - x_4 &amp;=&amp; 12 \\\
2x_1 + 4x_2 + 6x_4 &amp;=&amp; 4
\end{eqnarray}
\right.
\]</p>
<p>只有三个方程，肯定无法求解出四个未知数（此时如果在用 <code>numpy.linalg.solve</code> 求解这个矩阵会引发 <code>LinAlgError</code> ），但是通过化成行最简形，我们可以进一步找出变量的限制关系。先将方程组表达成增广矩阵形式：</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 1 &amp; 1 &amp; 7\\ 
1 &amp; 2 &amp; 2 &amp; -1 &amp; 12\\ 
2 &amp; 4 &amp; 0 &amp; 6 &amp; 4
\end{bmatrix}
\]</p>
<p>这个矩阵和完全和我们上一步给出的矩阵相同，因此其行简化阶梯性就是</p>
<p>\[
\begin{bmatrix}
1 &amp; 2 &amp; 0 &amp; 3 &amp; 2\\ 
0 &amp; 0 &amp; 1 &amp; -2 &amp; 5\\ 
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0
\end{bmatrix}
\]</p>
<p>对于方程组，非0首元位置对应的变量就叫做<strong>主元变量</strong>，其他的变量就叫做<strong>自由变量</strong>。例如上面的行最简形，\(x_1\) 和 \(x_3\) 是首元变量，\(x_2\) 和 \(x_4\) 就是自由变量。我们可以将方程改写成下面的形式：</p>
<p>\[
\left\{ 
\begin{eqnarray} 
x_1 &amp;=&amp; 2 - 2x_2 - 3x_4 \\\
x_3 &amp;=&amp; 5 + 2x_4
\end{eqnarray}
\right.
\]</p>
<p>然后可以得到：</p>
<p>\[
\begin{bmatrix} x_{ 1 } \\ x_{ 2 } \\ x_{ 3 } \\ x_{ 4 } \end{bmatrix}=\begin{bmatrix} 2 \\ 0 \\ 5 \\ 0 \end{bmatrix}+x_{ 2 }\underbrace { \begin{bmatrix} -2 \\ 1 \\ 0 \\ 0 \end{bmatrix} }_{ \vec{\mathbf{a}} } +x_{ 4 }\underbrace{\begin{bmatrix} -3 \\ 0 \\ 2 \\ 1 \end{bmatrix}}_{\vec{\mathbf{b}}}
\]</p>
<p>观察这个结果，方程组的解集就是向量 \(\vec{\mathbf{a}}\) 和向量 \(\vec{\mathbf{b}}\) 的线性组合。这两个向量张成了 \(\mathbb{R}^1\) 中的一个平面。</p>
<h2 id="线性子空间">线性子空间</h2>
<p>在前面的内容中我们已经多少涉及到了一些关于空间、张成空间的知识了。有时候我们需要从一个空间 \(K\) 里头挑出一些向量张成一个新的空间 \(\mathbf{W}\) ，这个空间 \(\mathbf{W}\) 就是原来的向量 \(\mathbf{K}\) 的子空间。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p><strong>定理</strong>：设 \(\mathbf{V}\) 是在域 \(\mathbf{K}\) 上的向量空间，并设 \(\mathbf{W}\) 是 \(\mathbf{V}\) 的子集。则 \(\mathbf{W}\) 是个子空间，当且仅当它满足下列三个条件:</p>
<ol>
<li>零向量 0 在 \(\mathbf{W}\) 中。</li>
<li>加法封闭：如果 \(\vec{\mathbf{u}}\) 和 \(\vec{\mathbf{v}}\) 是 \(\mathbf{W}\) 的元素，则向量和 \(\mathbf{\vec{\mathbf{u}}+\vec{\mathbf{v}}}\) 是 \(\mathbf{W}\) 的元素。</li>
<li>标量乘法封闭：如果 \(\vec{\mathbf{u}}\) 是 \(\mathbf{W}\) 的元素而 \(c\) 是标量，则标量积 \(c\vec{\mathbf{u}}\) 是 \(\mathbf{W}\) 的元素。</li>
</ol>
</div></p>
<p>子空间的引入有助于我们更专注于某类线性组合，从中找出这些子空间的特点，以及与原来的空间的关系。下面将列举几种典型的子空间。</p>
<h3 id="零空间">零空间</h3>
<p>矩阵 \(\mathbf{A}\) 的零空间 \(N(\mathbf{A})\) 就是由满足 \(\mathbf{A}\vec{\mathbf{x}}=0\) 的所有向量 \(\vec{\mathbf{x}}\) 的集合。</p>
<p>要求解一个矩阵的零空间，可以先将其化简成行最简形。例如矩阵 $\mathbf{A} = \begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\ 4 &amp; 3 &amp; 2 &amp; 1 \end{bmatrix} $，为了计算零空间，可以写出如下的等式：</p>
<p>\[\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\ 4 &amp; 3 &amp; 2 &amp; 1 \end{bmatrix} \begin{bmatrix} x_1 \\ x_2 \\ x_3 \\ x_4 \end{bmatrix} = \begin{bmatrix} 0 \\ 0 \\ 0 \end{bmatrix}\]</p>
<p>展开得到如下的方程组：</p>
<p>\[
\left\{ 
\begin{eqnarray} 
x_1 + x_2 + x_3 + x_4 &amp;=&amp; 0 \\\
x_1 + 2x_2 + 3x_3 + 4x_4 &amp;=&amp; 0 \\\
4x_1 + 3x_2 + 2x_4 + x_4 &amp;=&amp; 0
\end{eqnarray}
\right.
\]</p>
<p>参考 <a href="#%E5%8C%96%E7%AE%80%E6%88%90%E8%A1%8C%E6%9C%80%E7%AE%80%E9%98%B6%E6%A2%AF%E5%BD%A2">化简成行最简阶梯形</a> 一节里介绍的方法，先把上面的方程组表示成增广矩阵：</p>
<p>\[
\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 \\ 1 &amp; 2 &amp; 3 &amp; 4 &amp; 0 \\ 4 &amp; 3 &amp; 2 &amp; 1 &amp; 0 \end{bmatrix}
\]</p>
<p>然后将其转换成行最简形：</p>
<p>\[
\begin{bmatrix} 1 &amp; 0 &amp; -1 &amp; -2 &amp; 0 \\ 0 &amp; 1 &amp; 2 &amp; 3 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \end{bmatrix}
\]</p>
<p>最终求解得到：</p>
<p>\[
\begin{bmatrix} x_{ 1 } \\ x_{ 2 } \\ x_{ 3 } \\ x_{ 4 } \end{bmatrix}=x_{ 3 }\underbrace { \begin{bmatrix} 1 \\ -2 \\ 1 \\ 0 \end{bmatrix} }_{ \vec{\mathbf{a}} } +x_{ 4 }\underbrace{\begin{bmatrix} 2 \\ -3 \\ 0 \\ 1 \end{bmatrix}}_{\vec{\mathbf{b}}}
\]</p>
<p>因此矩阵 \(\mathbf{A}\) 的零空间就是由上式中的 \(\vec{\mathbf{a}}\) 向量和 \(\vec{\mathbf{b}}\) 向量张成的空间。即</p>
<p>\[N(\mathbf{A}) = span\left(\begin{bmatrix} 1 \\ -2 \\ 1 \\ 0 \end{bmatrix} \begin{bmatrix} 2 \\ -3 \\ 0 \\ 1 \end{bmatrix}\right)\]</p>
<p>另外，上面得到的这个行最简形有两个自由变量，就称矩阵 \(\mathbf{A}\) 的 <strong>零度</strong> 为 2。零度等于 \(\mathbf{A}\vec{\mathbf{x}} = 0\) 化成行最简形后自由变量的个数。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>零空间其实和线性无关其实有很大的联系。一个矩阵的零空间为 \(\vec{\mathbf{0}}\) 的充分必要条件是这个矩阵的所有列线性无关。</p>
</div></p>
<h3 id="列空间">列空间</h3>
<p>矩阵的列空间就是由每一列的向量张成的空间。对于矩阵 \(\underset { m\times n }{ \mathbf{A} } =\begin{bmatrix} \underbrace { \begin{bmatrix} a_{ 11 } \\ a_{ 21 } \\ \ldots \\ a_{ m1 } \end{bmatrix} }_{ \vec { \mathbf{ V }_{ 1 } }  }  &amp; \underbrace { \begin{bmatrix} a_{ 12 } \\ a_{ 22 } \\\ldots  \\ a_{ m2 } \end{bmatrix} }_{ \vec { \mathbf{ V_{ 2 } } }  } &amp; \ldots &amp; \underbrace { \begin{bmatrix} a_{ 1n } \\ a_{ 2n } \\ \ldots \\ a_{ mn } \end{bmatrix} }_{ \vec { \mathbf{ V_{ n } } }  }  \end{bmatrix}\)，那么矩阵 \(\mathbf{A}\) 的列空间就是</p>
<p>\[C(\mathbf{A}) = span(\vec{v_1}, \vec{v_2}, \ldots, \vec{v_n})\]</p>
<p>例如，矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\4 &amp; 3 &amp; 2 &amp; 1\end{bmatrix}\) 的列空间是 \(C(\mathbf{A}) = span\left(\begin{bmatrix}1 \\ 1 \\ 4\end{bmatrix}\begin{bmatrix}1 \\ 2 \\ 3\end{bmatrix}\begin{bmatrix}1 \\ 3 \\ 2\end{bmatrix}\begin{bmatrix}1 \\ 4 \\ 1\end{bmatrix}\right)\)</p>
<p>把一个矩阵化成行最简形后，这个矩阵的不相关主列（基底）的个数就称为矩阵的<strong>秩</strong>（Rank），或者叫维数。</p>
<p>例如，上面的矩阵 \(\mathbf{A}\) 化成最简形矩阵是（参考上节的化简结果）：</p>
<p>\[
\begin{bmatrix} 1 &amp; 0 &amp; -1 &amp; -2  \\ 0 &amp; 1 &amp; 2 &amp; 3  \\ 0 &amp; 0 &amp; 0 &amp; 0 \end{bmatrix}
\]</p>
<p>从结果可以看出这个矩阵的主列有 2 个，而且是线性无关的。所以矩阵 \(\mathbf{A}\) 的秩为 2 ，即 \(rank(\mathbf{A}) = 2\)。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>矩阵的秩有一个特性：矩阵 \(\mathbf{A}\) 的秩等于矩阵 \(\mathbf{A}\) 的转置的秩。即 \(Rank(\mathbf{A}) = Rank(\mathbf{A^T})\)</p>
</div></p>
<p>在 Python 中，可以使用 Numpy 包中的 <code>linalg.matrix_rank</code> 方法计算矩阵的秩：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = np.matrix(<span class="string">'1 1 1 1;1 2 3 4;4 3 2 1'</span>)</div><div class="line"><span class="keyword">print</span> np.linalg.matrix_rank(a)  <span class="comment"># 2</span></div></pre></td></tr></table></figure></p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p><strong>注意</strong> 在 Numpy 中的秩和线性代数里的秩是不同的概念。在NumPy中维度（dimensions）叫做轴（axes），轴的个数叫做秩。</p>
<pre><code class="language-python">import numpy as np
a = np.matrix('1 1 1 1;1 2 3 4; 0 0 1 0')
print a.ndim  # 2（维度）
print np.rank(a)  # 2（a.ndim 的别名，已经过时）
print np.linalg.matrix_rank(a)  # 3（秩）
</code></pre>
</div></p>
<h3 id="行空间">行空间</h3>
<p>有了列空间的定义，行空间顾名思义就是矩阵的每一行转置得到的向量张成的子空间，也就是矩阵的转置的列空间，记为 \(R(\mathbf{A}) = C(\mathbf{A}^T)\)。</p>
<p>例如，矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\4 &amp; 3 &amp; 2 &amp; 1\end{bmatrix}\) 的行空间是 \(R(\mathbf{A}) = C(\mathbf{A}^T) = span\left(\begin{bmatrix}1 \\ 1 \\ 1 \\ 1\end{bmatrix}\begin{bmatrix}1 \\ 2 \\ 3 \\ 4\end{bmatrix}\begin{bmatrix}4 \\ 3 \\ 2 \\ 1\end{bmatrix}\right)\)。</p>
<h3 id="左零空间">左零空间</h3>
<p>矩阵 \(\mathbf{A}\) 的左零空间是 \(\mathbf{A}\) 的转置的零空间。即：</p>
<p>\[N(\mathbf{A}^T) = \left\{ \vec{\mathbf{x}} | \mathbf{A}^{T} \vec{\mathbf{x}} = \vec{\mathbf{0}} \right\} = \left\{ \vec{\mathbf{x}} | \vec{\mathbf{x}}^{T} \mathbf{A} = \vec{\mathbf{0}}^{T} \right\}\]</p>
<p>例如，矩阵 \(\mathbf{B} = \begin{bmatrix}1 &amp; 1 &amp; 4 \\ 1 &amp; 2 &amp; 3 \\1 &amp; 4 &amp; 2\\ 1 &amp; 3 &amp; 1\end{bmatrix}\) 的转置是矩阵 \(\mathbf{A} = \mathbf{A} = \begin{bmatrix}1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 3 &amp; 4 \\4 &amp; 3 &amp; 2 &amp; 1\end{bmatrix}\) ，因此左零空间是 \(N(\mathbf{B^T}) = N(\mathbf{A}) = span\left(\begin{bmatrix} 1 \\ -2 \\ 1 \\ 0 \end{bmatrix} \begin{bmatrix} 2 \\ -3 \\ 0 \\ 1 \end{bmatrix}\right)\)</p>
<p>由于转置是对称的，所以矩阵 \(\mathbf{A}\) 的转置的左零空间也是矩阵 \(\mathbf{A}\) 的零空间。</p>
<h3 id="子空间的正交补">子空间的正交补</h3>
<p>假设 \(\mathbf{V}\) 是 \(\mathbb{R}^n\) 的一个子空间，那么 \(\mathbf{V}\) 的正交补 \(\mathbf{V}^{\bot}\) 也是一个子空间，定义为 \(\left\{\vec{\mathbf{x}} | \vec{\mathbf{x}} \vec{\mathbf{v}}=0\right\}\)，也即是 \(\mathbb{R}^{n}\) 中所有正交于 \(\mathbf{V}\) 的向量所组成的子空间。</p>
<p>由于正交是对称的，所以正交补也是对称的。一个子空间的正交补的正交补依然等于这个子空间。</p>
<p>矩阵的零空间是行空间的正交补<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，即 \(N(\mathbf{A}) = R(\mathbf{A})^{\bot}\)。反过来，矩阵的左零空间是列空间的正交补，即  \(N(\mathbf{B}^T) = C(\mathbf{B})^{\bot}\)。</p>
<h2 id="最小二乘逼近">最小二乘逼近</h2>
<p>最小二乘法是一个实用的数学工具，利用它可以在方程无解的情况下给出近似解。在机器学习中，最小二乘逼近也是一个重要的拟合方法。</p>
<p>假设有一个方程</p>
<p>\[
\underset{n\times k}{\mathbf{A}}\vec{\mathbf{x}} = \vec{\mathbf{b}}
\]</p>
<p>无解。把上式写成：</p>
<p>\[
\vec{a_1}\vec{\mathbf{x}} + \vec{a_2}\vec{\mathbf{x}} + \ldots + \vec{a_k}\vec{\mathbf{x}} = \vec{\mathbf{b}}
\]</p>
<p>无解就意味着 \(\mathbf{A}\) 的所有列向量的张成空间不包括向量 \(\vec{\mathbf{b}}\) 。即 \(\vec{\mathbf{b}} \notin span(C(\mathbf{A}))\)。</p>
<p>我们可以通过最小二乘法求解出近似解。即是要让找出一些向量 \(\vec{\mathbf{x}^*}\) 使得 \(\left\|\vec{\mathbf{b}}-\mathbf{A}\vec{\mathbf{x}^*}\right\|\) 最小。用向量 \(\vec{\mathbf{V}}\) 代表 \(\mathbf{A}\vec{\mathbf{x}^*}\) ，有：</p>
<p>\[
\left\|
\begin{bmatrix}
\vec{b_1}-\vec{v_1}\\
\vec{b_2}-\vec{v_2}\\
\ldots\\
\vec{b_n}-\vec{v_n}\\
\end{bmatrix}
\right\|^2
= 
(b_1-v_1)^2 + (b_2-v_2)^2 + \ldots + (b_n-v_n)^2
\]</p>
<p>把这个值最小化的过程就叫做<strong>最小二乘逼近</strong>。</p>
<p>如何求出 \(\mathbf{A}\vec{\mathbf{x}^*}\) 这个近似值呢？从几何上考虑，列空间可以看成空间中张成的一个平面，而向量 \(\vec{\mathbf{b}}\) 并不落在这个平面上。但我们知道，在这个平面上与向量 \(\vec{\mathbf{b}}\) 最接近的向量就是它的<a href="/math/math-vector/#%E5%90%91%E9%87%8F%E7%82%B9%E7%A7%AF">投影</a>！所以，</p>
<p>\[
\mathbf{A}\vec{\mathbf{x}^*} = Proj_{C(\mathbf{A})}\vec{\mathbf{b}}
\]</p>
<p>直接计算 \(Proj_{C(\mathbf{A})}\vec{\mathbf{b}}\) 并不简单。不过，\(\vec{\mathbf{b}}-\mathbf{A}\vec{\mathbf{x}}\) 其实就是 \(\mathbf{A}\vec{\mathbf{x}}\) 的正交补，所以一个简单的求解方法是将原来无解的方程左乘一个 \(\mathbf{A}\) 的转置再求解：</p>
<p>\[
\mathbf{A}^T\mathbf{A}\vec{\mathbf{x}^*} = \mathbf{A}^T\vec{\mathbf{b}}
\]</p>
<p>得出的解就是原方程的近似解。</p>
<h3 id="实例1：求解方程">实例1：求解方程</h3>
<p>问题：求解如下方程组</p>
<p>\[
\left\{ 
\begin{eqnarray} 
x + y &amp;=&amp; 3 \\\
x - y &amp;=&amp; -2 \\\
y &amp;=&amp; 1
\end{eqnarray}
\right.
\]</p>
<p>将三个方程表示的直线画出来，可以看出这三条直线并没有交点：</p>
<p><img src="/images/math-linear-algebra/fig8.png" alt=""></p>
<p>如何找出一个与三条直线距离最近的一个点呢？这时候我们的最小二乘逼近就派上用场了。</p>
<p>先将方程写成矩阵和向量的形式：</p>
<p>\[
\underbrace{
\begin{bmatrix}
1 &amp; 1 \\
1 &amp; -1 \\
0 &amp; 1
\end{bmatrix}
}_{\mathbf{A}}
\underbrace{
\begin{bmatrix}
x \\
y
\end{bmatrix}
}_{\vec{\mathbf{x}}}
=
\underbrace{
\begin{bmatrix}
3 \\
-2 \\
1
\end{bmatrix}
}_{\vec{\mathbf{b}}}
\]</p>
<p>这个等式的最小二乘逼近就是：</p>
<p>\[
\begin{align}
\begin{bmatrix}
1 &amp; 1 &amp; 0 \\
1 &amp; -1 &amp; 1\\
\end{bmatrix}
\begin{bmatrix}
1 &amp; 1 \\
1 &amp; -1 \\
0 &amp; 1
\end{bmatrix}
\begin{bmatrix}
x^* \\
y^*
\end{bmatrix}
&amp; = 
\begin{bmatrix}
1 &amp; 1 &amp; 0 \\
1 &amp; -1 &amp; 1\\
\end{bmatrix}
\begin{bmatrix}
3 \\
-2 \\
1
\end{bmatrix}
\\\
\begin{bmatrix}
2 &amp; 0 \\
0 &amp; 3
\end{bmatrix}
\begin{bmatrix}
x^* \\
y^*
\end{bmatrix}
&amp; =
\begin{bmatrix}
1 \\
6
\end{bmatrix}
\end{align}
\]</p>
<p>由于是二阶方程，可以很容易求出矩阵 \(\begin{bmatrix}2 &amp; 0 \\ 0 &amp; 3\end{bmatrix}\) 的逆是 \(\begin{bmatrix}\frac{1}{2} &amp; 0 \\ 0 &amp; \frac{1}{3}\end{bmatrix}\)，所以：</p>
<p>\[
\begin{bmatrix}
x^* \\
y^*
\end{bmatrix}
=
\begin{bmatrix}\frac{1}{2} &amp; 0 \\ 0 &amp; \frac{1}{3}\end{bmatrix}
\begin{bmatrix}
1 \\
6
\end{bmatrix}
=
\begin{bmatrix}
\frac{1}{2} \\
2
\end{bmatrix}
\]</p>
<p>因此 \(\begin{bmatrix}\frac{1}{2} \\ 2 \end{bmatrix}\) 就是方程组的近似解。</p>
<p><img src="/images/math-linear-algebra/fig9.png" alt=""></p>
<p>在 Python 中，可以使用 <code>numpy.linalg.lstsq</code> 方法来求解最小二乘逼近。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.array([<span class="number">3</span>, -<span class="number">2</span>, <span class="number">1</span>])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>x = np.linalg.lstsq(a,b)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> x</div><div class="line">(array([ <span class="number">0.5</span>,  <span class="number">2.</span> ]), array([ <span class="number">1.5</span>]), <span class="number">2</span>, array([ <span class="number">1.73205081</span>,  <span class="number">1.41421356</span>]))</div></pre></td></tr></table></figure></p>
<p><code>numpy.linalg.lstsq</code> 的返回包括四个部分：</p>
<ol>
<li>最小二乘逼近解。如果 <code>b</code> 是二维的，那么这个逼近的结果有多个列，每一列是一个逼近解。对于上例，逼近解就是 \(\begin{bmatrix}0.5 \\  2 \end{bmatrix}\) 。</li>
<li>残差。即每一个 <code>b - a*x</code> 的长度的和。对于上例，残差是 1.5 。</li>
<li>矩阵 <code>a</code> 的秩。对于上例，矩阵 <code>a</code> 的秩为 2 。</li>
<li>矩阵 <code>a</code> 的奇异值。对于上例，矩阵 <code>a</code> 的奇异值为 \(\begin{bmatrix}1.73205081 \\  1.41421356\end{bmatrix}\)</li>
</ol>
<h3 id="实例2：线性回归">实例2：线性回归</h3>
<p>问题：给定4个坐标点 \((-1, 0)\), \((0, 1)\), \((1, 2)\), \((2, 1)\) ，求一条经过这些点的直线 \(y=mx+b\)。</p>
<p>将四个点画图如下：</p>
<p><img src="/images/math-linear-algebra/fig10.png" alt=""></p>
<p>显然这样的直线并不存在。然而我们能够使用最小二乘逼近，找到一条尽可能接近这些点的直线。将四个点表示成方程组的形式：</p>
<p>\[
\left\{
\begin{eqnarray}
f(-1) &amp;= -m + b = 0\\\
f(0) &amp;= 0 + b  = 1\\\
f(1) &amp;= m + b = 2\\\
f(2) &amp;= 2m + b = 1
\end{eqnarray}
\right.
\]</p>
<p>还是那个套路，将方程组表示成矩阵和向量的形式：</p>
<p>\[
\underbrace{
\begin{bmatrix}
-1 &amp; 1 \\
0 &amp; 1 \\
1 &amp; 1 \\
2 &amp; 1
\end{bmatrix}
}_{\mathbf{A}}
\underbrace{
\begin{bmatrix}
m\\
b
\end{bmatrix}
}_{\vec{\mathbf{x}}}
=
\underbrace{
\begin{bmatrix}
0\\
1\\
2\\
1
\end{bmatrix}
}_{\vec{\mathbf{b}}}
\]</p>
<p>这个等式的最小二乘逼近就是：</p>
<p>\[
\begin{align}
\begin{bmatrix}
-1 &amp; 0 &amp; 1 &amp; 2 \\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
\begin{bmatrix}
-1 &amp; 1 \\
0 &amp; 1 \\
1 &amp; 1 \\
2 &amp; 1
\end{bmatrix}
\begin{bmatrix}
m^*\\
b^*
\end{bmatrix}
&amp;=
\begin{bmatrix}
-1 &amp; 0 &amp; 1 &amp; 2 \\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
\begin{bmatrix}
0\\
1\\
2\\
1
\end{bmatrix}\\\
\begin{bmatrix}
6 &amp; 2 \\
2 &amp; 4
\end{bmatrix}
\begin{bmatrix}
m^*\\
b^*
\end{bmatrix}
&amp;=
\begin{bmatrix}
4\\
4
\end{bmatrix}
\end{align}
\]</p>
<p>容易求得 \(\begin{bmatrix}6 &amp; 2\\2 &amp; 4\end{bmatrix}\) 的逆为 \(\frac{1}{20}\begin{bmatrix}4 &amp; -2\\-2 &amp; 6\end{bmatrix}\)，因此</p>
<p>\[\begin{bmatrix}m^*\\b^*\end{bmatrix} = \frac{1}{20}\begin{bmatrix}4 &amp; -2\\-2 &amp; 6\end{bmatrix}\begin{bmatrix}4 \\ 4\end{bmatrix} = \frac{1}{20}\begin{bmatrix}8 \\ 16\end{bmatrix} = \begin{bmatrix}\frac{2}{5} \\ \frac{4}{5}\end{bmatrix}\]</p>
<p>将直线 \(y = \frac{2}{5}x + \frac{4}{5}\) 绘图如下所示：</p>
<p><img src="/images/math-linear-algebra/fig11.png" alt=""></p>
<p>这就是所求的直线的近似解。</p>
<p>Python 示例如下：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'-1 1;0 1;1 1;2 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>x = np.linalg.lstsq(a, b)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> x</div><div class="line">(array([ <span class="number">0.4</span>,  <span class="number">0.8</span>]), array([ <span class="number">1.2</span>]), <span class="number">2</span>, array([ <span class="number">2.68999405</span>,  <span class="number">1.66250775</span>]))</div></pre></td></tr></table></figure></p>
<h2 id="特征向量">特征向量</h2>
<p>“特征”在模式识别和图像处理中是非常常见的一个词汇。我们要认识和描绘一件事物，首先得找出这个事物的特征。同样的道理，要让计算机识别一件事物，首先就要让计算机学会理解或者抽象出事物的特征。什么样的东西能当成特征呢？那必须是能“放之四海皆准”的依据，不论个体如何变换，都能从中找到这类群体共有的特点。例如，计算机视觉中常用的 <a href="/wiki/opencv-video.html#sift-%E7%89%B9%E5%BE%81%E7%82%B9">SIFT 特征点</a> 是一种很经典的用于视觉跟踪的特征点，即使被跟踪的物体的尺度、角度发生了变化，这种特征点依然能够找到关联。在机器学习中， 特征向量选取也是整个机器学习系统中非常重要的一步。</p>
<p>在线性代数中，“特征” 就是一种更抽象的描述。我们知道，矩阵乘法对应了一个变换，是把任意一个向量变成另一个方向或长度都大多不同的新向量。在这个变换的过程中，原向量主要发生旋转、伸缩的变化。如果矩阵对某一个向量或某些向量只发生伸缩（尺度）变换，而没有产生旋转的效果（也就意味着张成的子空间没有发生改变），这样的向量就认为是特征向量。</p>
<p>\[\mathbf{T}(\vec{\mathbf{v}}) = \underbrace{\mathbf{A}}_{n\times n}\vec{\mathbf{v}} = \underbrace{\lambda}_{特征值} \overbrace{\vec{\mathbf{v}}}^{特征向量}\]</p>
<p>其中， \(T\) 是一种线性变换，我们知道线性变换可以用矩阵向量积来表示，因此可以表示成 \(\mathbf{A}\vec{\mathbf{v}}\) 。\(\mathbf{A}\) 是一个 \(n\times n\) 的方阵。\(\vec{\mathbf{v}}\) 就是特征向量（Eigen Vector），也就是<q>能被伸缩的向量</q>（要求是非 \(\mathbf{0}\) 向量），而 \(\lambda\) 是特征向量 \(\vec{\mathbf{v}}\) 所对应的特征值，也就是<q>伸缩了多少</q>。如果特征值是负数，那说明了矩阵不但把向量拉长（缩短）了，而且让向量指向了相反的方向。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>简而言之，特征向量就是在线性变化当中不变的向量。</p>
</div></p>
<p>听起来很抽象，放个例子就清楚了。下图出自 wikipedia的《<a href="http://zh.wikipedia.org/wiki/%C3%A7%C2%89%C2%B9%C3%A5%C2%BE%C2%81%C3%A5%C2%90%C2%91%C3%A9%C2%87%C2%8F" target="_blank" rel="external">特征向量</a>》一文：</p>
<p><img src="/images/math-linear-algebra/eigen.jpg" alt=""></p>
<p>在这个仿射变换中，蒙娜丽莎的图像被变形，但是中心的纵轴在变换下保持不变。（注意：角落在右边的图像中被裁掉了。）蓝色的向量，从胸部到肩膀，其方向改变了，但是红色的向量，从胸部到下巴，其方向不变。因此红色向量是该变换的一个特征向量，而蓝色的不是。因为红色向量既没有被拉伸又没有被压缩，其特征值为1。所有沿着垂直线的向量也都是特征向量，它们的特征值相等。它们构成这个特征值的特征空间。</p>
<h3 id="求解特征值">求解特征值</h3>
<p>非 \(\mathbf{0}\) 向量 \(\vec{\mathbf{v}}\) 是线性变化矩阵 \(\mathbf{A}\) 的特征向量，需要满足如下条件<div class="label-anchor"><span>eq: 1 »</span></div>：</p>
<p>\[det(\lambda \mathbf{I}_n - \underbrace{\mathbf{A}}_{n\times n}) = 0\]</p>
<p>其中，\(det\) 表示矩阵行列式，\(\lambda\) 是特征值，\(\mathbf{I}\) 是单位矩阵。</p>
<p>例如矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 2 \\ 4 &amp; 3\end{bmatrix}\) ，代入公式 2 得：</p>
<p>\[
\begin{align} det\left( \lambda \begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 1 \end{bmatrix}-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right)  &amp;=0 \\ det\left( \begin{bmatrix} \lambda  &amp; 0 \\ 0 &amp; \lambda  \end{bmatrix}-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right)  &amp;=0 \\ det\left( \begin{bmatrix} \lambda -1 &amp; -2 \\ -4 &amp; \lambda -3 \end{bmatrix} \right)  &amp;=0 \end{align}
\]</p>
<p>所以有：</p>
<p>\[\begin{align} (\lambda -1)(\lambda -3)-8 &amp; =0 \\ \lambda ^{ 2 }-4\lambda -5 &amp;=0 \\ (\lambda - 5)(\lambda +1) &amp;= 0\end{align}\]</p>
<p>因此 \(\lambda\) 的值为 5 或者 -1 。</p>
<p>在 Python 中，可以使用 <code>numpy.linalg.eigvals</code> 方法求解一个方阵的特征值：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 2;4 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> np.linalg.eigvals(a)</div><div class="line">[-<span class="number">1.</span>  <span class="number">5.</span>]</div></pre></td></tr></table></figure></p>
<p>前面说了变换矩阵必须是方阵，所以如果用在其他形状的矩阵上就会抛出 <code>LinAlgError</code> 错误：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'1 2 3;4 3 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> np.linalg.eigvals(b)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/numpy/linalg/linalg.py"</span>, line <span class="number">902</span>, <span class="keyword">in</span> eigvals</div><div class="line">    _assertNdSquareness(a)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/numpy/linalg/linalg.py"</span>, line <span class="number">212</span>, <span class="keyword">in</span> _assertNdSquareness</div><div class="line">    <span class="keyword">raise</span> LinAlgError(<span class="string">'Last 2 dimensions of the array must be square'</span>)</div><div class="line">numpy.linalg.linalg.LinAlgError: Last <span class="number">2</span> dimensions of the array must be square</div></pre></td></tr></table></figure></p>
<h3 id="求解特征向量">求解特征向量</h3>
<p>变换矩阵 \(\mathbf{A}\) 的特征空间（特征向量张成的空间）可以用下面的等式来求解： <div class="label-anchor"><span>eq: 2 »</span></div></p>
<p>\[\mathbf{E}_{\lambda}=N(\lambda I_n - \mathbf{A})\]</p>
<p>例如上面的变换矩阵 \(\mathbf{A} = \begin{bmatrix}1 &amp; 2 \\ 4 &amp; 3\end{bmatrix}\) ，代入公式 3 得：</p>
<p>\[{ E }_{ \lambda  }=N\left( \lambda I_{ n }-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right) =N\left( \lambda \begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 1 \end{bmatrix}-\begin{bmatrix} 1 &amp; 2 \\ 4 &amp; 3 \end{bmatrix} \right) =N\left( \begin{bmatrix} \lambda -1 &amp; -2 \\ -4 &amp; \lambda -3 \end{bmatrix} \right) \]</p>
<p>当 \(\lambda = 5\) 时，</p>
<p>\[{ E }_{ 5  }=N\left( \begin{bmatrix} 4 &amp; -2 \\ -4 &amp; 2 \end{bmatrix} \right) \]</p>
<p>利用前面所学的 <a href="#%E9%9B%B6%E7%A9%BA%E9%97%B4">零空间的求解方法</a> ，得</p>
<p>\[{ E }_{ 5  }= span\left(\begin{bmatrix}\frac{1}{2} \\ 1 \end{bmatrix}\right) \]</p>
<p>同样地，当 \(\lambda = -1\) 时，</p>
<p>\[{ E }_{ -1  }= span\left(\begin{bmatrix}1 \\ -1 \end{bmatrix}\right) \]</p>
<p>在 Python 中，可以使用 <code>numpy.linalg.eig</code> 方法来求解方阵的特征值和特征向量：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 2;4 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> np.linalg.eig(a)</div><div class="line">(array([-<span class="number">1.</span>,  <span class="number">5.</span>]), matrix([[-<span class="number">0.70710678</span>, -<span class="number">0.4472136</span> ],</div><div class="line">        [ <span class="number">0.70710678</span>, -<span class="number">0.89442719</span>]]))</div></pre></td></tr></table></figure></p>
<p>得到的元组中，第一部分是特征值，和前面使用 <code>numpy.linalg.eigvals</code> 得到的结果完全一样；第二部分是特征向量，乍一看好像和我们上面求解的结果不一样，但如果我们这么写就完全一样了：\(\begin{bmatrix}-0.70710678\begin{bmatrix}1 \\ -1\end{bmatrix} &amp; -0.89442719\begin{bmatrix}\frac{1}{2} \\ 1\end{bmatrix} \end{bmatrix}\)</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>变换矩阵线性无关的特征向量特别适合作为空间的基，因为在这些方向上变换矩阵可以拉伸向量而不必扭曲和旋转它，使得计算大为简单。我们把这种基称为 <strong>特征基</strong> 。</p>
</div></p>
<h2 id="小结">小结</h2>
<p>终于完成了线性代数的系列。作为保研党，真正系统学习线性代数也就是在大一的时期，然后大学四年也没怎么用到数学，渐渐地就忘得差不多了。后来读研的时候虽然也用到些线性代数，但都是用到啥补啥，跟其他考研上来的同学比起来，心里面总是缺少一点底气。在中科院实习结束的时候，陈宝权老师和 Andrei 一直劝我读博，最后我婉拒了，其中一个原因也和这个“没底气”有关吧。而今我也工作快两年了，虽然还是没有读博的念头，但还是希望把数学捡起来，让自己也有底气一些。</p>
<p>读者也许会发现最近我很喜欢写系列文章。我倒不是为了要出书啦。只是我觉得既然博客的文章不止是写给我一个人看的，那么也得考虑读者的感受。如果把一篇文章写得太长，那就很难让人坚持读完，更别说这种公式很多的文章了；而如果写得太短，又不够完整，读得不够尽兴，于我也没有多少益处。</p>
<p>写系列文章其实最大的难点在于把握好 tradeoff 。像线性代数的知识点，两三篇文章的篇幅肯定是讲不完的，有些知识点如果再深入一下，就又拔出萝卜带出泥。比如最后一节提到特征向量，其实我还可以继续讨论特征值分解，然后又可以扯到奇异值分解。这样就很容易把整个系列写成像裹脚布一样了。所以，我只讲最基础的知识点，而且是可能对机器学习有帮助的，目的是让自己今后读相关的文章时有底气一些，至少不会在“秩”、“转置矩阵”这种最基础的知识点上犯晕。有了这个基础后，再去学习像奇异值分解之类的其他知识也会轻松很多。如果这个系列也能对读者们有所帮助，那就再好不过了。</p>
<p>如果您希望将这个线性代数子系列保存为书签，作为后面的工具文来查阅，我建议您保存我在wiki上的线性代数笔记（<a href="/wiki/math-linear-algebra.html">跳转入口</a>）。因为我的 wiki 的更新频率会更频繁一些。且日后随着我的学习还可能继续添加一些新的内容。</p>
<p>下篇文章我将继续从一个机器学习工程师的角度，开始回顾微积分的基础知识点。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>证明过程视频：<a href="http://open.163.com/movie/2011/6/E/M/M82ICR1D9_M83HEAPEM.html" target="_blank" rel="external">http://open.163.com/movie/2011/6/E/M/M82ICR1D9_M83HEAPEM.html</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/categories/math/" term="math"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[机器学习的数学基础：向量篇]]></title>
    <link href="http://hahack.com/math/math-vector/"/>
    <id>http://hahack.com/math/math-vector/</id>
    <published>2017-02-06T13:47:43.000Z</published>
    <updated>2018-07-06T17:27:30.015Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在 <a href="http://hahack.com/math/math-matrix/" target="_blank" rel="external">上文</a> 中我简单概括了矩阵的基本运算，并给出了两个应用实例。这篇文章我们继续谈谈向量。</p>
<p>向量是线性代数中的基本概念，也是机器学习的基础数据表示形式。例如计算机阅读文本的过程首先就会将文本分词，然后用向量表示<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。这是因为向量很适合在高维空间中表达和处理。在机器学习中会接触到的诸如投影、降维的概念，都是在向量的基础上做的。</p>
<a id="more"></a>
<p>在 \(\mathbb{R}^{n}\) <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>空间中定义的向量 \(\vec{\mathbf{V}}\)，可以用一个包含 n 个实数的有序集来表示，即 \(\vec{\mathbf{V}} = \begin{bmatrix}v_1 \\ v_2 \\ \ldots \\ v_n\end{bmatrix}\)，这个有序集里的每个元素称为向量的 <strong>分量</strong> 。例如一个 \(\mathbb{R}^{2}\) 空间中的向量 \(\begin{bmatrix}2 \\ 1\end{bmatrix}\) ，有些地方也会用 \((2, 1)\) 或 \(&lt;2, 1>\) 这样的形式来表示。</p>
<p>绘图表示这个变量：</p>
<p><img src="/images/math-linear-algebra/fig5.png" alt=""></p>
<p>向量的长度被定义为 \[\left\| \vec{\mathbf{v}} \right\| = \sqrt{v_{1}^{2} + v_{2}^{2} + \ldots + v_{n}^{2}}\]，和我们以往所接触的距离公式一模一样。长度为 1 的向量称为 <strong>单位向量</strong> 。</p>
<h2 id="基本运算">基本运算</h2>
<h3 id="加">加</h3>
<p>向量 \(\mathbf{a}\) 与向量 \(\mathbf{b}\) 的加法定义为:</p>
<p>\[
\mathbf{a} + \mathbf{b} = \begin{bmatrix} a_1 + b_1 \\ a_2 + b_2 \\ \ldots \\ a_n + b_n \end{bmatrix}
\]</p>
<p>绘图示意向量 \(\mathbf{a} = \begin{bmatrix}-1 \\ 2\end{bmatrix}\) 与 \(\mathbf{b} = \begin{bmatrix}3 \\ 1\end{bmatrix}\) 的相加，值为 \(\begin{bmatrix}2 \\ 3\end{bmatrix}\) ：</p>
<p><img src="/images/math-linear-algebra/fig3.png" alt=""></p>
<p>在 Python 中，可以直接用 Numpy 的 ndarray 来表示向量。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([-<span class="number">1</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">3</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">print</span> a + b <span class="comment"># [2 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="减">减</h3>
<p>\[
\mathbf{a} - \mathbf{b} = \begin{bmatrix} a_1 - b_1 \\ a_2 - b_2 \\ \ldots \\ a_n - b_n \end{bmatrix}
\]</p>
<p>从几何角度讲，向量减相当于加上一个反向的向量。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([-<span class="number">1</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">3</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">print</span> a - b  <span class="comment"># [-4,  1]</span></div></pre></td></tr></table></figure></p>
<h3 id="乘">乘</h3>
<h4 id="标量乘向量">标量乘向量</h4>
<p>标量 \(c\) 乘以向量 \(\mathbf{a}\) 定义为：</p>
<p>\[
c \cdot \mathbf{a} = \begin{bmatrix} c \cdot a_1 \\ c \cdot a_2 \\ \ldots \\ c \cdot a_n \end{bmatrix} = \begin{bmatrix} a_1 \cdot c \\ a_2 \cdot c \\ \ldots \\ a_n \cdot c \end{bmatrix}
\]</p>
<p>绘图示意向量 \(\mathbf{a} = \begin{bmatrix} -1 \\ 2 \end{bmatrix}\) 乘以一个标量 3 得到 \(\begin{bmatrix} -3 \\ 6 \end{bmatrix}\) ：</p>
<p><img src="/images/math-linear-algebra/fig4.png" alt=""></p>
<p>Python 实现：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([-<span class="number">1</span>, <span class="number">2</span>])</div><div class="line"><span class="keyword">print</span> a * <span class="number">3</span> <span class="comment">#[-3,  6]</span></div></pre></td></tr></table></figure></p>
<h4 id="向量点积">向量点积</h4>
<p>向量的点积（又叫点乘）定义如下：</p>
<p>\[\vec{\mathbf{a}}\cdot \vec{\mathbf{b}} = \begin{bmatrix} a_1 \\ a_2 \\ \ldots \\ a_n\end{bmatrix} \cdot \begin{bmatrix} b_1 \\ b_2 \\ \ldots \\ b_n \end{bmatrix} = a_{1}b_{1} + a_{2}b_{2} + \ldots + a_{n}b_{n}\]</p>
<p>可见点积得到的是一个标量。</p>
<p>例如：</p>
<p>\[\begin{bmatrix} 3 \\ 5 \\ 2 \end{bmatrix} \cdot \begin{bmatrix} 1 \\ 4 \\ 7 \end{bmatrix} = 3 \cdot 1 + 5 \cdot 4 + 2 \cdot 7 = 37\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>])</div><div class="line"><span class="keyword">print</span> a.dot(b)  <span class="comment"># 37</span></div><div class="line"><span class="keyword">print</span> np.dot(a, b)  <span class="comment"># 37（另一种等价写法）</span></div></pre></td></tr></table></figure></p>
<p>容易证明点积满足乘法交换律、分配律和结合律。</p>
<p>我们 <a href="#%E5%89%8D%E8%A8%80">前面</a> 知道向量的长度定义为 \(\left\| \vec{\mathbf{v}} \right\| = \sqrt{v_{1}^{2} + v_{2}^{2} + \ldots + v_{n}^{2}}\)，联立点积的定义，可以得出：</p>
<p><div class="label-anchor"><span>eq: 1 »</span></div>
\[\left\| \vec{\mathbf{v}} \right\| = \sqrt{v_{1}^{2} + v_{2}^{2} + \ldots + v_{n}^{2}} = \sqrt{\vec{\mathbf{v}} \cdot \vec{\mathbf{v}}}\]</p>
<p>关于点积还有一个非常重要的性质，称为 <strong>柯西不等式</strong> <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>：</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <ul>
<li>对两个非 0 向量 \(\vec{\mathbf{x}}, \vec{\mathbf{y}} \in \mathbb{R}^{n}\)，\(|\vec{\mathbf{x}} \cdot \vec{\mathbf{y}}| \le \left\|\vec{\mathbf{x}}\right\|\left\|\vec{\mathbf{y}}\right\|\)。</li>
<li>当且仅当 \(\vec{\mathbf{x}} = c\vec{\mathbf{y}}\) 时，等式成立。</li>
</ul>
</div></p>
<p>虽然受限于篇幅不去证明它，但这个性质非常重要，后面会有很多向量的理论都建立在它的基础之上。例如，对一个向量 \((\vec{\mathbf{x}} + \vec{\mathbf{y}})\) ,利用这个性质，结合公式 1，我们可以得到</p>
<p>\[
\begin{align}
\left\|\vec{\mathbf{x}} + \vec{\mathbf{y}}\right\|^2 &amp; = (\vec{\mathbf{x}} + \vec{\mathbf{y}})\cdot (\vec{\mathbf{x}} + \vec{\mathbf{y}}) \\\
 &amp; = \left\|\vec{\mathbf{x}}\right\|^2 + 2\vec{\mathbf{x}}\vec{\mathbf{y}} + \left\|\vec{\mathbf{y}}\right\|^2 \\\
&amp; \le 
\left\|\vec{\mathbf{x}}\right\|^2 + 2\left\|\vec{\mathbf{x}}\right\|\left\|\vec{\mathbf{y}}\right\| + \left\|\vec{\mathbf{y}}\right\|^2
\end{align}
\]</p>
<p>所以：</p>
<p>\[
\left\|\vec{\mathbf{x}} + \vec{\mathbf{y}}\right\|^2 
\le 
(\left\|\vec{\mathbf{x}}\right\| + \left\|\vec{\mathbf{y}}\right\|)^2
\]</p>
<p>两边开平方得到：</p>
<p>\[
\left\|\vec{\mathbf{x}} + \vec{\mathbf{y}}\right\| 
\le 
\left\|\vec{\mathbf{x}}\right\| + \left\|\vec{\mathbf{y}}\right\|
\]</p>
<p>这就得到了三角不等式。</p>
<p>从几何的角度来说，向量的点积与向量间夹角 \(\theta\) 的余弦有关：\[\vec{\mathbf{a}}\cdot\vec{\mathbf{b}} = \left\|\vec{\mathbf{a}}\right\|\left\|\vec{\mathbf{b}}\right\|cos\theta\]，这意味着向量的点积其实反映了向量 \(\vec{\mathbf{a}}\) 在向量 \(\vec{\mathbf{b}}\) 上的 <strong>投影</strong> ，即两个向量在同个方向上的相同程度。当两向量正交时，\(cos\theta\) 的值为0，点积的值为0，投影最小。当两向量平行时，\(cos\theta\) 的值为1，点积值最大，投影也最大。</p>
<p><img src="/images/math-linear-algebra/fig7.png" alt=""></p>
<p>观察上图，\(L\) 是 \(\vec{\mathbf{v}}\) 向量两端延伸出来的直线，即 \(L={c\vec{\mathbf{v}}|c\in \mathbb{R}}\)。记向量 \(\vec{\mathbf{x}}\) 在 \(L\) 上的投影为 \(Proj_L(\vec{\mathbf{x}})\)。根据点积的性质，可得：</p>
<p>\[
\begin{align}
(\vec{\mathbf{x}}-\underbrace {  c\vec{\mathbf{v}}}_{ Proj_L({\vec{\mathbf{x}}})  } )\cdot \vec{\mathbf{v}} &amp;= 0 \\\
\vec{\mathbf{x}}\cdot \vec{\mathbf{v}} -c\vec{\mathbf{v}}\cdot \vec{\mathbf{v}} &amp;= 0\\\
c\cdot \vec{\mathbf{v}} \cdot \vec{\mathbf{v}} &amp;= \vec{\mathbf{x}}\cdot \vec{\mathbf{v}}\\\
c &amp;= \frac{\vec{\mathbf{x}}\cdot \vec{\mathbf{v}}}{\vec{\mathbf{v}}\cdot \vec{\mathbf{v}}}
\end{align}
\]</p>
<p>有了 \(c\)， 我们就可以求出投影 \(Proj_L({\vec{\mathbf{x}}})\) 为：</p>
<p>\[Proj_L({\vec{\mathbf{x}}}) =  c\vec{\mathbf{v}} = (\frac{\vec{\mathbf{x}}\cdot \vec{\mathbf{v}}}{\vec{\mathbf{v}}\cdot \vec{\mathbf{v}}})\vec{\mathbf{v}}\]</p>
<p>例如，向量 \(\vec{\mathbf{a}} = \begin{bmatrix}1 \\ 2\end{bmatrix}\)，向量 \(\vec{\mathbf{b}} = \begin{bmatrix}1 \\ 1\end{bmatrix}\)，那么 \(\vec{\mathbf{a}}\) 在 \(\vec{\mathbf{b}}\) 方向 \(L\) 上的投影为：</p>
<p>\[Proj_L({\vec{\mathbf{a}}}) = c\vec{\mathbf{b}} = (\frac{\vec{\mathbf{a}}\cdot \vec{\mathbf{b}}}{\vec{\mathbf{b}}\cdot \vec{\mathbf{b}}})\vec{\mathbf{b}} = \frac{3}{2}\vec{\mathbf{b}}\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_projection</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> a.dot(b)*<span class="number">1.0</span>*b/b.dot(b)</div><div class="line"></div><div class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">2</span>, <span class="number">2</span>])</div><div class="line"><span class="keyword">print</span> get_projection(a, b)  <span class="comment"># [1.5  1.5]</span></div></pre></td></tr></table></figure></p>
<h4 id="向量外积">向量外积</h4>
<p>向量的（又叫叉乘、向量积、叉积）只在 \(\mathbb{R}^{2}\) 和 \(\mathbb{R}^{3}\) 中定义：</p>
<p>\(\mathbb{R}^{2}\) 的向量外积：</p>
<p>\[\begin{bmatrix} a_1 \\ a_2\end{bmatrix} \times \begin{bmatrix} b_1 \\ b_2 \end{bmatrix} = \begin{bmatrix} a_1 \cdot b_2 - a_2 \cdot b_1\end{bmatrix}\]</p>
<p>例如：</p>
<p>\[
\begin{bmatrix} 1 \\ 2 \end{bmatrix} \times \begin{bmatrix} 3 \\ 4 \end{bmatrix} 
=
\begin{bmatrix} 1 \cdot 4 - 3 \cdot 2 \end{bmatrix}
= 
\begin{bmatrix}-2\end{bmatrix} 
\]</p>
<p>\(\mathbb{R}^{3}\) 的向量外积：</p>
<p>\[\begin{bmatrix} a_1 \\ a_2 \\ a_3\end{bmatrix} \times \begin{bmatrix} b_1 \\ b_2 \\ b_3 \end{bmatrix} = \begin{bmatrix} a_2 \cdot b_3 - a_3 \cdot b_2 \\ a_3 \cdot b_1 - a_1 \cdot b_3 \\ a_1 \cdot b_2 - a_2 \cdot b_1\end{bmatrix}\]</p>
<p>例如：</p>
<p>\[
\begin{bmatrix} 3 \\ 5 \\ 2 \end{bmatrix} \times \begin{bmatrix} 1 \\ 4 \\ 7 \end{bmatrix} 
=
\begin{bmatrix} 5 \cdot 7 - 2 \cdot 4 \\ 2 \cdot 1 - 3 \cdot 7 \\ 3 \cdot 4 - 5 \cdot 1\end{bmatrix}
= 
\begin{bmatrix} 27 \\ -19 \\ 7\end{bmatrix} 
\]</p>
<p>可见向量间外积的结果会得到一个新的向量。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>])</div><div class="line">b = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>])</div><div class="line"><span class="keyword">print</span> np.cross(a, b)  <span class="comment"># [27, -19, 7]</span></div></pre></td></tr></table></figure></p>
<p>外积的一个重要作用是可以得到一个和 \(\vec{\mathbf{a}}\) 、\(\vec{\mathbf{b}}\) 两个原向量正交的新向量 \(\vec{\mathbf{c}}\) ，且可以通过右手法则来确定新向量的方向（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从 \(\vec{\mathbf{a}}\) 以不超过180度的转角转向 \(\vec{\mathbf{b}}\) 时，竖起的大拇指指向是 \(\vec{\mathbf{c}}\) 的方向）。</p>
<p><img src="/images/math-linear-algebra/fig6.jpeg" alt=""></p>
<p>从几何的角度来说，向量的外积与向量间夹角 \(\theta\) 的正弦有关：\[\left\|\vec{\mathbf{a}}\times\vec{\mathbf{b}}\right\| = \left\|\vec{\mathbf{a}}\right\|\left\|\vec{\mathbf{b}}\right\|sin\theta\]，这意味着向量的外积反映了向量 \(\vec{\mathbf{a}}\) 与向量 \(\vec{\mathbf{b}}\) 的正交程度。当两向量平行时，\(sin\theta\) 的值为0，外积的值为0，正交程度最小。当两向量正交时，\(sin\theta\) 的值为1，外积值最大，正交程度最大。</p>
<h4 id="矩阵向量积">矩阵向量积</h4>
<p>当矩阵 \(\mathbf{A}\) 的列数与向量 \(\vec{\mathbf{x}}\) 的分量数相同时，矩阵和向量的积有定义：</p>
<p>\[\underset{m\times n}{A}\vec{\mathbf{x}}=\begin{bmatrix}a_{11} &amp; a_{12} &amp; \ldots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \ldots &amp; a_{2n} \\ \ldots \\ a_{m1} &amp; a_{m2} &amp; \ldots &amp; a_{mn}\end{bmatrix}\begin{bmatrix}x_1 \\ x_2 \\ \ldots \\ x_n \end{bmatrix} = \begin{bmatrix}a_{11}x_1 + a_{12}x_2 + \ldots + a_{1n}x_n \\ a_{21}x_1 + a_{22}x_2 + \ldots + a_{2n}x_n \\ \ldots \\ a_{m1}x_1 + a_{m2}x_2 + \ldots + a_{mn}x_n \\ \end{bmatrix}
\]</p>
<p>例如矩阵 \(\mathbf{A} = \begin{bmatrix}4 &amp; 3 &amp; 1 \\ 1 &amp; 2 &amp; 5\end{bmatrix}\) 乘以向量 \(\vec{\mathbf{x}} = \begin{bmatrix}5 \\ 2 \\ 7\end{bmatrix}\) 的结果为：</p>
<p>\[\begin{bmatrix}4\cdot 5 + 3\cdot 2 + 1\cdot 7 \\ 1 \cdot 5 + 2 \cdot 2 + 5 \cdot 7\end{bmatrix} = \begin{bmatrix}33 \\ 44\end{bmatrix}\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = np.matrix(<span class="string">'4 3 1;1 2 5'</span>)</div><div class="line">x = np.array([[<span class="number">5</span>], [<span class="number">2</span>], [<span class="number">7</span>]])</div><div class="line"><span class="keyword">print</span> a*x  <span class="comment"># [[33] [44]]</span></div></pre></td></tr></table></figure></p>
<p>矩阵的向量积可以当成是矩阵的所有列向量的线性组合：</p>
<p>\[\underset { m\times n }{ \mathbf{A} } \vec { \mathbf{x} } =\begin{bmatrix} \underbrace { \begin{bmatrix} a_{ 11 } \\ a_{ 21 } \\ \ldots \\ a_{ m1 } \end{bmatrix} }_{ \vec { \mathbf{ V }_{ 1 } }  }  &amp; \underbrace { \begin{bmatrix} a_{ 12 } \\ a_{ 22 } \\\ldots  \\ a_{ m2 } \end{bmatrix} }_{ \vec { \mathbf{ V_{ 2 } } }  } &amp; \ldots &amp; \underbrace { \begin{bmatrix} a_{ 1n } \\ a_{ 2n } \\ \ldots \\ a_{ mn } \end{bmatrix} }_{ \vec { \mathbf{ V_{ n } } }  }  \end{bmatrix}\begin{bmatrix} x_{ 1 } \\ x_{ 2 } \\ \ldots \\ x_{ n } \end{bmatrix}=x_1\vec{\mathbf{V}_1}+x_2\vec{\mathbf{V}_2}+\ldots+x_n\vec{\mathbf{V}_n}\]</p>
<p>而向量 \(\vec{\mathbf{x}}\) 的每一个分量可以看成是 \(\mathbf{A}\) 的每个列向量的加权。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>一个矩阵其实就是一个线性变换。一个矩阵乘以一个向量后得到的向量，其实就相当于将这个向量进行了线性变换。</p>
</div></p>
<h2 id="向量的转置">向量的转置</h2>
<p>向量 \(\vec{\mathbf{V}} = \underbrace{\begin{bmatrix}v_1 \\ v_2 \\ \ldots \\ v_n \end{bmatrix}}_{n\times 1}\) 的转置定义为 \(\vec{\mathbf{V}}^T = \underbrace{\begin{bmatrix}v_1 &amp; v_2 &amp; \ldots &amp; v_n \end{bmatrix}}_{1 \times n}\)</p>
<p>例如向量 \(\vec{\mathbf{A}} = \begin{bmatrix} 2 &amp; 4 \end{bmatrix}\) 的转置就是 \(\vec{\mathbf{A}}^T = \begin{bmatrix} 2 \\ 4\end{bmatrix}\)。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.array([[<span class="number">2</span>, <span class="number">4</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.T</div><div class="line">array([[<span class="number">2</span>],</div><div class="line">       [<span class="number">4</span>]])</div></pre></td></tr></table></figure></p>
<p>注意上面声明 <code>a</code> 时用了两对 <code>[]</code> ，以生成一个二维向量。一维的向量转置结果是不会变化的：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.array([<span class="number">2</span>, <span class="number">4</span>])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b.T</div><div class="line">array([<span class="number">2</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure></p>
<p>向量的转置有一个性质：一个向量 \(\vec{\mathbf{v}}\) 点乘另一个向量 \(\vec{\mathbf{w}}\) ，其结果和向量 \(\vec{\mathbf{v}}\) 转置后和向量 \(\vec{\mathbf{w}}\) 做矩阵乘法相同。即 \(\vec{\mathbf{v}} \cdot \vec{\mathbf{w}} = \vec{\mathbf{v}}^T \vec{\mathbf{w}}\) 。</p>
<h2 id="线性无关">线性无关</h2>
<h3 id="张成空间">张成空间</h3>
<p>一组向量的张成空间说白了就是指这些向量随便线性组合后能够表示多少个向量。记为 \(span(\vec{\mathbf{a}}, \vec{\mathbf{b}})\)。</p>
<p>例如，对于 \(\mathbb{R}^{2}\) 空间中两个不平行的非0向量 \(\vec{\mathbf{a}} = \begin{bmatrix}2 \\ 1\end{bmatrix}\) 和向量 \(\vec{\mathbf{b}} = \begin{bmatrix} 0 \\ 3 \end{bmatrix}\) ，不难发现这两个向量能够表示二维空间中任一其他向量，即 \(span(\vec{\mathbf{a}}, \vec{\mathbf{b}}) = \mathbb{R}^{2}\)。证明如下：</p>
<p>对于 \(\mathbb{R}^{2}\) 中任一向量 \(\begin{bmatrix}x \\y \end{bmatrix}\) ，假设可以由 \(\vec{\mathbf{a}}\) 和 \(\vec{\mathbf{b}}\) 线性组合而成，那么有：</p>
<p>\[
c_1 \begin{bmatrix}2 \\ 1\end{bmatrix} + c_2 \begin{bmatrix} 0 \\ 3 \end{bmatrix} = \begin{bmatrix} x \\ y \end{bmatrix}
\]</p>
<p>即：</p>
<p>\[
\left\{
\begin{align}
c_1 \cdot 2 &amp; + c_2 \cdot 0 &amp;= x\\\
c_1 \cdot 1 &amp; + c_2 \cdot 3 &amp;= y
\end{align}
\right.
\]</p>
<p>求解该方程得：</p>
<p>\[
\left\{
\begin{align}
c_1 &amp;= \frac{x}{2}\\
c_2 &amp;= \frac{y}{3} - \frac{x}{6}
\end{align}
\right.
\]</p>
<p>由于 \(x\)、\(y\) 的值已确定，所以 \(c_1\)、\(c_2\) 的值也必然唯一。</p>
<h3 id="线性相关和线性无关">线性相关和线性无关</h3>
<p>当一个向量集合里的每个向量都对张成的空间有贡献时，称这个向量集合线性无关。反之称为线性相关。能够表示一个空间的最少向量组合称为空间的基。</p>
<p>听起来有点难理解，其实就是非常简单的道理：假如一个向量集合中存在某个向量能由集合里的其他向量线性组合而成，那这个集合对于张成空间而言就存在多余的向量。此时就是线性相关；反之，假如集合里每一个元素都没法由其他元素组合而成，那么这个集合每个元素都对张成空间有贡献，这个集合就是线性无关的。</p>
<p>例如，对于上述的例子，如果再增加一个向量 \(\vec{\mathbf{c}} = \begin{bmatrix} 5 \\ 2\end{bmatrix}\) ，由于 \(\vec{\mathbf{c}}\) 可以由 \(\vec{\mathbf{a}}\) 和 \(\vec{\mathbf{b}}\) 线性组合而成，由 \(\mathbf{a}\) 、\({\mathbf{b}}\) 和 \({\mathbf{c}}\) 共同张成的空间并没有变化，仍然是 \(\mathbb{R}^{2}\)，因此称集合 \(\left\{\vec{\mathbf{a}}, \vec{\mathbf{b}}, \vec{\mathbf{c}}\right \}\) 线性相关。</p>
<h3 id="判断是否线性相关">判断是否线性相关</h3>
<p>一个向量集合 \(s = {v_1, v_2, \ldots, v_n}\) 线性相关的充分必要条件是存在一部分非0系数使得 \(c_1 v_1 + c_2 v_2 + \ldots + c_n v_n = \mathbf{0} = \begin{bmatrix} 0 \\ 0 \\ \ldots \\ 0\end{bmatrix}\) 。</p>
<p>例如有向量 \(\begin{bmatrix}2 \\ 1\end{bmatrix}\) 和 \(\begin{bmatrix}3 \\ 2\end{bmatrix}\)，则可以先写出如下的等式：</p>
<p>\[c_1 \begin{bmatrix}2 \\ 1\end{bmatrix} + c_2 \begin{bmatrix}3 \\ 2\end{bmatrix} = \begin{bmatrix}0 \\ 0\end{bmatrix}\]</p>
<p>容易求解得 \(\begin{bmatrix}c_1 \\ c_2\end{bmatrix} = \begin{bmatrix}0 \\ 0\end{bmatrix}\)，说明两个向量线性无关。也说明这两个向量可以张成 \(\mathbb{R}^{2}\)。</p>
<p>类似地，对于三个 \(\mathbb{R}^{3}\) 中的向量 \(\begin{bmatrix}2 \\ 0 \\ 0\end{bmatrix}\)、\(\begin{bmatrix}0 \\ 1 \\ 0\end{bmatrix}\) 和 \(\begin{bmatrix}0 \\ 0 \\ 7\end{bmatrix}\)，不难判断这三个向量是线性无关的，他们共同张成了 \(\mathbb{R}^3\) 空间。</p>
<p>而对于向量集合 \(\left\{\begin{bmatrix}2 \\ 1\end{bmatrix}, \begin{bmatrix}3 \\ 2\end{bmatrix}, \begin{bmatrix}1 \\ 2 \end{bmatrix}\right\}\) ，不难算出存在非 0 的系数 \(\begin{bmatrix}c_1 \\ c_2 \\ c_3\end{bmatrix} = \begin{bmatrix}-4 \\ 3 \\ -1\end{bmatrix}\) 使得 \(c1 \begin{bmatrix}2 \\ 1\end{bmatrix} + c_2 \begin{bmatrix}3 \\ 2\end{bmatrix} + c_3 \begin{bmatrix}1 \\ 2 \end{bmatrix} = \begin{bmatrix}0 \\ 0\end{bmatrix}\)。因此集合 \(\left\{\begin{bmatrix}2 \\ 1\end{bmatrix}, \begin{bmatrix}3 \\ 2\end{bmatrix}, \begin{bmatrix}1 \\ 2 \end{bmatrix}\right\}\) 线性相关。</p>
<p>下篇文章将进阶讨论线性子空间和特征向量。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://acl-arc.comp.nus.edu.sg/archives/acl-arc-090501d4/data/pdf/anthology-PDF/W/W04/W04-3252.pdf" target="_blank" rel="external">TextRank: Bring Order Into Texts</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>\(\mathbb{R}^{n}\) ：表示 n 个有序实数二元组构成的空间。例如 \(\mathbb{R}^2\) 表示有序实数二元组 \((x_1, x_2)\) 构成的空间，即\(\mathbb{R}^n = \left\{ (x_1, \ldots, x_n) | x_1, \ldots, x_n \in \mathbb{R} \right\}\) 。 <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p>从历史的角度讲，该不等式应当称为Cauchy-Buniakowsky-Schwarz不等式【柯西-布尼亚科夫斯基-施瓦茨不等式】，因为，正是后两位数学家彼此独立地在积分学中推而广之，才将这一不等式应用到近乎完善的地步。 <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    <category scheme="http://hahack.com/tags/Linear-Algebra/" term="Linear Algebra"/>
    <category scheme="http://hahack.com/tags/Math/" term="Math"/>
    <category scheme="http://hahack.com/tags/Vector/" term="Vector"/>
    <category scheme="http://hahack.com/categories/math/" term="math"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[机器学习的数学基础：矩阵篇]]></title>
    <link href="http://hahack.com/math/math-matrix/"/>
    <id>http://hahack.com/math/math-matrix/</id>
    <published>2017-01-31T14:33:04.000Z</published>
    <updated>2018-07-06T17:27:30.015Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>机器学习如火如荼，要学习机器学习，数学基础少不了。所以本系列将对机器学习所用到的线性代数、微积分和概率统计的基础知识做一个简单的概括。</p>
<p>本文将总结线性代数中矩阵的基本知识点。同时理论结合实践，使用 Python 来进行实践。如果需要跟着进行编程实践，请先确保下列环境已安装：</p>
<ul>
<li><a href="https://www.python.org/" target="_blank" rel="external">Python</a> - 编程实践所使用的语言；</li>
<li><a href="https://pypi.python.org/pypi/numpy" target="_blank" rel="external">Numpy</a> - Python 的数值计算库。</li>
</ul>
<p>矩阵（Matrix）是人为约定的一种数据的表示方法，在图像处理、人工智能等领域，使用矩阵来表示和处理数据非常常见。<a id="more"></a>一个矩阵的举例：</p>
<p>\[\mathbf{A}_{2 \times 3}=\begin{bmatrix} 5 &amp; 2 &amp; 7 \\ 1 &amp; 3 &amp; 4  \end{bmatrix}\]</p>
<p>其中，矩阵 \(\mathbf{A}\) 的下标 \(2 \times 3\) 表示 \(\mathbf{A}\) 是一个 2 行 3 列的矩阵。类似的，另一个示例：</p>
<p>\[\mathbf{ B }_{ 4 \times 4 }=\begin{bmatrix} 5 &amp; 2 &amp; 7 &amp; 6 \\ 1 &amp; 3 &amp; 4 &amp; 2 \\ 7 &amp; -1 &amp; 9 &amp; 0 \\ 8  &amp; 2 &amp; -2 &amp; 3 \end{bmatrix}\]</p>
<p>再看回矩阵 \(\mathbf{A}\) ，如果要表示第 2 行的第 2 个元素 3 ，可以使用 \(\mathbf{A}[2, 2]\) 或 \(a_{2,2}\)。</p>
<p>Python 的 Numpy 库提供了 ndarray 类用于存储高维数组及普通的数组运算，另外提供 matrix 类用来支持矩阵运算。使用 Python 创建矩阵很简单：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.matrix(<span class="string">'5 2 7;1 3 4'</span>)</div><div class="line">b = np.matrix(<span class="string">'5 2 7 6;1 3 4 2;8 2 -2 3'</span>)</div></pre></td></tr></table></figure></p>
<p>也可以用下面这种形式：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a = np.matrix([[<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]])</div><div class="line">b = np.matrix([[<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">8</span>,<span class="number">2</span>,-<span class="number">2</span>,<span class="number">3</span>]])</div></pre></td></tr></table></figure></p>
<p>两种形式完全等效。但第一种更简明直观，不容易犯错。因此推荐第一种方式。</p>
<p>要把一个 matrix 对象转换为 ndarray 对象，可以直接用 <code>getA()</code> 方法。而把 ndarray 对象转成 matrix 对象可以用 <code>asmatrix()</code> 方法。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = a.getA()</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> b</div><div class="line">[[<span class="number">5</span> <span class="number">2</span> <span class="number">7</span>]</div><div class="line"> [<span class="number">1</span> <span class="number">3</span> <span class="number">4</span>]]</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>type(b)</div><div class="line">&lt;type <span class="string">'numpy.ndarray'</span>&gt;</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c = np.asmatrix(b)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> c</div><div class="line">[[<span class="number">5</span> <span class="number">2</span> <span class="number">7</span>]</div><div class="line"> [<span class="number">1</span> <span class="number">3</span> <span class="number">4</span>]]</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>type(c)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">matrixlib</span>.<span class="title">defmatrix</span>.<span class="title">matrix</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>要取出矩阵中的某个值，可以使用类似数组的下标运算符。但要注意的是，计算机是以 0 开始计数的。例如，要取出 \(\mathbf{A}[2,2]\) ，应该使用：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a[<span class="number">1</span>,<span class="number">1</span>]</div><div class="line">a[<span class="number">1</span>,<span class="number">1</span>]</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="基本运算">基本运算</h2>
<h3 id="加">加</h3>
<p>矩阵加法的定义非常符合直觉。假设有 \(\mathbf{ A }_{ 3 \times 3 }=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}\) ， \(\mathbf{ B }_{ 3 \times 3 }=\begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix}\) ，则:</p>
<p>\[\mathbf{A}+\mathbf{B} = \begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix} + \begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix} = \begin{bmatrix} 1+2 &amp; 0+1 &amp; 1+(-1) \\ 1+ 0 &amp; 2+(-1) &amp; 1+2 \\ 2+2 &amp; 1+(-1) &amp; 1+0 \end{bmatrix} = \begin{bmatrix} 3 &amp; 1 &amp; 0 \\ 1 &amp; 1 &amp; 3 \\ 4 &amp; 0 &amp; 1 \end{bmatrix} \]</p>
<p>要注意两个矩阵的行数和列数必须相同，否则无定义。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 0 1;1 2 1;2 1 1'</span>)</div><div class="line">a = np.matrix(<span class="string">'1 0 1;1 2 1;2 1 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'2 1 -1;0 -1 2;2 -1 0'</span>)</div><div class="line">b = np.matrix(<span class="string">'2 1 -1;0 -1 2;2 -1 0'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a + b</div><div class="line">a + b</div><div class="line">matrix([[<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>],</div><div class="line">        [<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>]])</div></pre></td></tr></table></figure></p>
<p>很容易看出，矩阵的加法满足交换律和结合律，即 \(\mathbf{A} + \mathbf{B} = \mathbf{B} + \mathbf{A}\)， \((\mathbf{A} + \mathbf{B}) + \mathbf{C} = \mathbf{A} + (\mathbf{B} + \mathbf{C})\)。</p>
<h3 id="减">减</h3>
<p>矩阵减法也和加法一样简单。对于上面给出的 \(\mathbf{A}\) 和 \(\mathbf{B}\)，有：</p>
<p>\[\mathbf{A}-\mathbf{B}=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}-\begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix}=\begin{bmatrix} 1-2 &amp; 0-1 &amp; 1-(-1) \\ 1-0 &amp; 2-(-1) &amp; 1-2 \\ 2-2 &amp; 1-(-1) &amp; 1-0 \end{bmatrix}=\begin{bmatrix} -1 &amp; -1 &amp; 2 \\ 1 &amp; 3 &amp; -1 \\ 0 &amp; 2 &amp; 1 \end{bmatrix}\]</p>
<p>同样，相减的两个矩阵行数和列数必须完全相同，否则无定义。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a - b</div><div class="line">a - b</div><div class="line">matrix([[-<span class="number">1</span>, -<span class="number">1</span>,  <span class="number">2</span>],</div><div class="line">        [ <span class="number">1</span>,  <span class="number">3</span>, -<span class="number">1</span>],</div><div class="line">        [ <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">1</span>]])</div></pre></td></tr></table></figure></p>
<h3 id="乘">乘</h3>
<p>矩阵乘法的定义是 \(\mathbf{A}_{i \times j}\) 矩阵的每一行的元素分别与 $\mathbf{B}_{j \times k} $ 矩阵的每一列的元素两两相乘并相加，从而得到一个新的矩阵 \(\mathbf{C}_{i \times k}\) 。两个矩阵能相乘的充分必要条件是第一个矩阵的列数与第二个矩阵的行数相等，否则无定义。例如，对于上面给出的 \(\mathbf{A}\) 和 \(\mathbf{B}\)，有：</p>
<p>\[\begin {aligned} 
\mathbf{A} \times \mathbf{B} &amp;=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}\times \begin{bmatrix} 2 &amp; 1 &amp; -1 \\ 0 &amp; -1 &amp; 2 \\ 2 &amp; -1 &amp; 0 \end{bmatrix} \\\ &amp;=\begin{bmatrix} 1\cdot 2+0\cdot 0+1\cdot 2 &amp; 1\cdot 1+0\cdot (-1)+1\cdot (-1) &amp; 1\cdot (-1)+0\cdot 2+1\cdot 0 \\ 1\cdot 2+2\cdot 0+1\cdot 2 &amp; 1\cdot 1+2\cdot (-1)+1\cdot (-1) &amp; 1\cdot (-1)+2\cdot 2+1\cdot 0 \\ 2\cdot 2+1\cdot 0+1\cdot 2 &amp; 2\cdot 1+1\cdot (-1)+1\cdot (-1) &amp; 2\cdot (-1)+1\cdot 2+1\cdot 0 \end{bmatrix}\\\ &amp;=\begin{bmatrix} 4 &amp; 0 &amp; -1 \\ 4 &amp; -2 &amp; 3 \\ 6 &amp; 0 &amp; 0 \end{bmatrix}
\end {aligned} \]</p>
<p>再举一个行列数不同的例子， 假设有 \(\mathbf{C}_{2 \times 3} = \begin{bmatrix} 5 &amp; 7 &amp; 2 \\ 4 &amp; 3 &amp; 1 \end{bmatrix}\) 和 \(\mathbf{D}_{3 \times 1} = \begin{bmatrix} 1 \\ 5 \\ 6 \end{bmatrix}\)，则可以得出：</p>
<p>\[
\mathbf{C}\times \mathbf{D} = \begin{bmatrix} 5 &amp; 7 &amp; 2 \\ 4 &amp; 3 &amp; 1 \end{bmatrix}\times \begin{bmatrix} 1 \\ 5 \\ 6 \end{bmatrix}
 =\begin{bmatrix} 5 \cdot 1+ 7 \cdot 5+ 2\cdot 6 \\ 4\cdot 1+3\cdot 5+1\cdot 6  \end{bmatrix} =\begin{bmatrix} 52 \\ 25 \end{bmatrix}
\]</p>
<p>与初等代数的乘法不同，矩阵的乘法并不满足交换律，即 \(\mathbf{A} \times \mathbf{B} \ne \mathbf{B} \times \mathbf{A}\)。但满足分配律，即 \((\mathbf{A} \times \mathbf{B}) \times \mathbf{C} = \mathbf{A} \times (\mathbf{B} \times \mathbf{C})\)。</p>
<p>再介绍两个特殊的矩阵：</p>
<ol>
<li>单元矩阵 \(\mathbf{I}\) 。它的特点是行数列数相等，且在对角线上值为 1，其他地方值为 0 。它的一个特性是与其他矩阵相乘都等于那个矩阵本身。一个 \(3\times 3\) 的单元矩阵示例：\[\mathbf{I}_{3 \times 3} = \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix}\]</li>
<li>零矩阵。顾名思义就是全部元素都是 0 的矩阵。零矩阵乘以任何矩阵都为零矩阵，与任何矩阵相加都等于那个矩阵。</li>
</ol>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * b</div><div class="line">a * b</div><div class="line">matrix([[ <span class="number">4</span>,  <span class="number">0</span>, -<span class="number">1</span>],</div><div class="line">        [ <span class="number">4</span>, -<span class="number">2</span>,  <span class="number">3</span>],</div><div class="line">        [ <span class="number">6</span>,  <span class="number">0</span>,  <span class="number">0</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b * a</div><div class="line">b * a</div><div class="line">matrix([[ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">2</span>],</div><div class="line">        [ <span class="number">3</span>,  <span class="number">0</span>,  <span class="number">1</span>],</div><div class="line">        [ <span class="number">1</span>, -<span class="number">2</span>,  <span class="number">1</span>]])        </div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c = np.matrix(<span class="string">'5 7 2;4 3 1'</span>)</div><div class="line">c = np.matrix(<span class="string">'5 7 2;4 3 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>d = np.matrix(<span class="string">'1;5;6'</span>)</div><div class="line">d = np.matrix(<span class="string">'1;5;6'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c*d</div><div class="line">c*d</div><div class="line">matrix([[<span class="number">52</span>],</div><div class="line">        [<span class="number">25</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * b * d</div><div class="line">a * b * d</div><div class="line">matrix([[-<span class="number">2</span>],</div><div class="line">        [<span class="number">12</span>],</div><div class="line">        [ <span class="number">6</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * (b * d)</div><div class="line">a * (b * d)</div><div class="line">matrix([[-<span class="number">2</span>],</div><div class="line">        [<span class="number">12</span>],</div><div class="line">        [ <span class="number">6</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>I = np.eye(<span class="number">3</span>)  <span class="comment"># 创建一个3阶单元矩阵</span></div><div class="line">I = np.np.eye(<span class="number">3</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * I</div><div class="line">a * I</div><div class="line">matrix([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>I * a</div><div class="line">I * a</div><div class="line">matrix([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * z</div><div class="line">a * z</div><div class="line">matrix([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b * z</div><div class="line">b * z</div><div class="line">matrix([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>c * z</div><div class="line">c * z</div><div class="line">matrix([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div></pre></td></tr></table></figure></p>
<p>注意上面创建单元矩阵用了 ‘eye()’ 函数，它等同于下面的写法：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>I = np.matrix(<span class="string">'1 0 0;0 1 0;0 0 1'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="除-求逆">除（求逆）</h3>
<p>矩阵并没有一个直接叫除法的操作。但有个与之相似的运算，叫做求逆运算。</p>
<p>矩阵 \(\mathbf{A}\) 的逆 \(\mathbf{A}^{-1}\) 被定义为一个与 \(\mathbf{A}\) 相乘后能得到一个单元矩阵的矩阵。即：\(\mathbf{A} \times \mathbf{A}^{-1} = \mathbf{I}\)。求逆这个操作本身是可逆的，一个矩阵的逆的逆也是这个矩阵本身。因此 \(\mathbf{A}^{-1} \times \mathbf{A} = \mathbf{I}\)。根据这个特点我们可以推断出能求逆的矩阵，其行数和列数也必然相同。</p>
<p>为什么说这个求逆操作很像除等代数的除法呢？因为矩阵的逆很像数的倒数，一个数乘以它的倒数等于 1。而拿倒数与其他数相乘，就相当于被其他数除。</p>
<p>矩阵的求逆有很多种方法。常见的有伴随阵法、初等变换法、分块矩阵求逆法等。</p>
<h4 id="伴随阵法">伴随阵法</h4>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p><strong>定理</strong> \(n\) 阶矩阵 \(\mathbf{A}=\begin{bmatrix}a_{ij}\end{bmatrix}\) 为可逆的充分必要条件是 \(\mathbf{A}\) 非奇异。且</p>
<p>\[\mathbf{A}^{-1}=\frac{1}{|\mathbf{A}|}\begin{bmatrix}A_{11} &amp; A_{21} &amp; \ldots &amp; A_{n1} \\ A_{12} &amp; A_{22} &amp; \ldots &amp; A_{n2} \\ \ldots &amp; \ldots &amp; \ldots &amp; \ldots \\ A_{1n} &amp; A_{2n} &amp; \ldots &amp; A_{nn} \end{bmatrix}\]</p>
<p>其中 \(\mathbf{A}_{ij}\) 是 \(|\mathbf{A}|\) 中元素 \(a_{ij}\) 的代数余子式。</p>
</div></p>
<p>矩阵 \(\begin{bmatrix}A_{11} &amp; A_{21} &amp; \ldots &amp; A_{n1} \\ A_{12} &amp; A_{22} &amp; \ldots &amp; A_{n2} \\ \ldots &amp; \ldots &amp; \ldots &amp; \ldots \\ A_{1n} &amp; A_{2n} &amp; \ldots &amp; A_{nn} \end{bmatrix}\) 称为矩阵 \(\mathbf{A}\) 的伴随矩阵，记作 \(\mathbf{A}^{*}\) ，于是有 \(\mathbf{A}^{-1}=\frac{1}{|\mathbf{A}|}\mathbf{A}^{*}\)。</p>
<p>对于二阶矩阵，使用伴随阵法比较简单。</p>
<p>假定一个矩阵 \(\mathbf{M}=\begin{bmatrix} a &amp; b \\ c &amp; d \end{bmatrix}\)，则</p>
<p>\[\mathbf{M}^{-1}=\frac{1}{|\mathbf{M}|}\begin{bmatrix} d &amp; -b \\ -c &amp; a \end{bmatrix}\]</p>
<p>，其中 \(|\mathbf{M}|\) 称为矩阵 \(\mathbf{M}\) 的行列式：</p>
<p>\[|\mathbf{M}| = ad - bc\]</p>
<p>，而 \(\begin{bmatrix} d &amp; -b \\ -c &amp; a \end{bmatrix}\) 就是矩阵 \(\mathbf{M}\) 的伴随矩阵。</p>
<p>例如，对于矩阵 \(A = \begin{bmatrix} 5 &amp; 7 \\ 3 &amp; 2 \end{bmatrix}\)，那么有：</p>
<p>\[|\mathbf{A}|=5\cdot 2-7\cdot 3=-11\]</p>
<p>，则</p>
<p>\[\mathbf{A}^{ -1 }=\frac { 1 }{ -11 } \begin{bmatrix} 2 &amp; -7 \\ -3 &amp; 5 \end{bmatrix}=\begin{bmatrix} -\frac { 2 }{ 11 }  &amp; \frac { 7 }{ 11 }  \\ \frac { 3 }{ 11 }  &amp; -\frac { 5 }{ 11 }  \end{bmatrix}\]</p>
<p>验证一下 \(\mathbf{A} \times \mathbf{A}^{-1}\) 的值是否等于 \(\mathbf{I}\) ，有：</p>
<p>\[\mathbf{A}\times \mathbf{A}^{ -1 }=\begin{bmatrix} 5 &amp; 7 \\ 3 &amp; 2 \end{bmatrix}\times \begin{bmatrix} -\frac { 2 }{ 11 }  &amp; \frac { 7 }{ 11 }  \\ \frac { 3 }{ 11 }  &amp; -\frac { 2 }{ 11 }  \end{bmatrix}=\begin{bmatrix} 5\cdot \left( -\frac { 2 }{ 11 }  \right) +7\cdot \frac { 3 }{ 11 }  &amp; 5\cdot \frac { 7 }{ 11 } +\left( -7\cdot \frac { 5 }{ 11 }  \right)  \\ 3\cdot \left( -\frac { 2 }{ 11 }  \right) +2\cdot \frac { 3 }{ 11 }  &amp; 3\cdot \frac { 7 }{ 11 } +2\cdot \left( -\frac { 5 }{ 11 }  \right)  \end{bmatrix}=\begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 1 \end{bmatrix} = \mathbf{I}\]</p>
<h4 id="初等变换法">初等变换法</h4>
<p>求元素为具体数字的矩阵的逆矩阵，常用初等变换法（又称为高斯·约当消去法）。用矩阵表示 $(\mathbf{A} \mathbf{I})\xrightarrow [  ]{ 初等变换 } (\mathbf{I} \mathbf{A}^{-1}) $ ，就是求逆矩阵的初等行变换法。\((\mathbf{A} \mathbf{I})\) 被称为矩阵 \(\mathbf{A}\) 的增广矩阵。</p>
<p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  <p>矩阵的初等行变换和初等列变换，统称矩阵的初等变换。下面的三种变换称为矩阵的初等行变换：</p>
<ol>
<li>对调两行；</li>
<li>以数 \(k \ne 0\) 乘某一行的所有元素；</li>
<li>把某一行所有元素的 \(k\) 倍加到另一行对应的元素上去。</li>
</ol>
</div></p>
<p>把上面定义中的“行”换成“列”，既得矩阵的初等列变换的定义。如果矩阵A经过有限次初等变换变成矩阵B，就称矩阵A与B等价。</p>
<p>三阶以上的伴随矩阵如果使用伴随阵法求逆，需要求9个或9个以上的代数余子式，以及一个三阶或三阶以上的行列式，过程比较繁琐。相比之下，使用初等变换就简单很多。</p>
<p>假定有三阶矩阵 \({ \mathbf{A} }_{ 3 \times 3 }=\begin{bmatrix} 1 &amp; 0 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 2 &amp; 1 &amp; 1 \end{bmatrix}\) ，则：</p>
<p>\[
\begin{aligned}
\begin{bmatrix}\mathbf{A} \mathbf{I}\end{bmatrix} 
&amp; \rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
1 &amp; 2 &amp; 1 &amp; 0 &amp; 1 &amp; 0 \\
2 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 2 &amp; 0 &amp; -1 &amp; 1 &amp; 0 \\
2 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
2 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}\\
&amp; \rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
1 &amp; 1 &amp; 0 &amp; -1 &amp; 0 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
1 &amp; 0 &amp; 0 &amp; -0.5 &amp; -0.5 &amp; 1
\end{bmatrix}
\rightarrow 
\begin{bmatrix} 
0 &amp; 0 &amp; 1 &amp; 1.5 &amp; 0.5 &amp; -1 \\
0 &amp; 1 &amp; 0 &amp; 0 &amp; 0.5 &amp; 0 \\
1 &amp; 0 &amp; 0 &amp; -0.5 &amp; -0.5 &amp; 1
\end{bmatrix}\\
&amp;\rightarrow 
\begin{bmatrix} 
1 &amp; 0 &amp; 0 &amp; -0.5 &amp; -0.5 &amp; 1 \\
0 &amp; 1 &amp; 0 &amp; -0.5 &amp; 0.5 &amp; 0 \\
0 &amp; 0 &amp; 1 &amp; 1.5 &amp; 0.5 &amp; -1
\end{bmatrix}
\end{aligned}
\]</p>
<p>因此</p>
<p>\[\mathbf{A}^{-1}=\begin{bmatrix}-0.5 &amp; -0.5 &amp; 1 \\ -0.5 &amp; 0.5 &amp; 0 \\ 1.5 &amp; 0.5 &amp; -1\end{bmatrix}\]</p>
<h4 id="奇异矩阵">奇异矩阵</h4>
<p>要注意的是，<strong>矩阵并不一定都可逆的</strong>。从定义来看，只要矩阵 \(\mathbf{M}\) 的行列式 \(|\mathbf{M}|\) 为 0 ，则 \[\mathbf{M}^{-1}=\frac{1}{|\mathbf{M}|}\begin{bmatrix} d &amp; -b \\ -c &amp; a \end{bmatrix}\] 的值就无定义。我们把这种矩阵叫做 <strong>奇异矩阵</strong> 。</p>
<p>例如矩阵 \(\begin{bmatrix}0 &amp; 0\\ 0 &amp; 1\end{bmatrix}\) ，其行列式的值为 \(0 \cdot 1 - 0 \cdot 0 = 0\) ，因此无法求逆。</p>
<p>Python 求逆示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'1 0 1; 1 2 1; 2 1 1'</span>)</div><div class="line">a = np.matrix(<span class="string">'1 0 1; 1 2 1; 2 1 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.I</div><div class="line">a.I</div><div class="line">matrix([[-<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.</span> ],</div><div class="line">        [-<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.</span> ],</div><div class="line">        [ <span class="number">1.5</span>,  <span class="number">0.5</span>, -<span class="number">1.</span> ]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a * a.I</div><div class="line">a * a.I</div><div class="line">matrix([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]]</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.I * a</div><div class="line">a.I * a</div><div class="line">matrix([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</div><div class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>f = np.matrix(<span class="string">'0 1;0 0'</span>)</div><div class="line">f = np.matrix(<span class="string">'0 1;0 0'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>f.I</div><div class="line">f.I</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/Library/Python/2.7/site-packages/numpy/matrixlib/defmatrix.py"</span>, line <span class="number">972</span>, <span class="keyword">in</span> getI</div><div class="line">    <span class="keyword">return</span> asmatrix(func(self))</div><div class="line">  File <span class="string">"/Library/Python/2.7/site-packages/numpy/linalg/linalg.py"</span>, line <span class="number">526</span>, <span class="keyword">in</span> inv</div><div class="line">    ainv = _umath_linalg.inv(a, signature=signature, extobj=extobj)</div><div class="line">  File <span class="string">"/Library/Python/2.7/site-packages/numpy/linalg/linalg.py"</span>, line <span class="number">90</span>, <span class="keyword">in</span> _raise_linalgerror_singular</div><div class="line">    <span class="keyword">raise</span> LinAlgError(<span class="string">"Singular matrix"</span>)</div><div class="line">numpy.linalg.linalg.LinAlgError: Singular matrix</div></pre></td></tr></table></figure></p>
<h3 id="矩阵的转置">矩阵的转置</h3>
<p>矩阵 \(\underset{m\times n}{\mathbf{A}} = \begin{bmatrix}a_{11} &amp; a_{12} &amp; \ldots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \ldots &amp; a_{2n} \\ \ldots \\ a_{m1} &amp; a_{m2} &amp; \ldots &amp; a_{mn}\end{bmatrix}\) 的转置定义为 \(\underset{n\times n}{A^{T}} = \begin{bmatrix}a_{11} &amp; a_{21} &amp; \ldots &amp; a_{m1} \\ a_{12} &amp; a_{22} &amp; \ldots &amp; a_{m2} \\ \ldots \\ a_{1n} &amp; a_{2n} &amp; \ldots &amp; a_{mn}\end{bmatrix}\)</p>
<p>例如矩阵 \(\mathbf{A} = \begin{bmatrix} 2 &amp; 4 \\ 1 &amp; 3\end{bmatrix}\) 的转置矩阵就是 \(\mathbf{A}^T = \begin{bmatrix} 2 &amp; 1 \\ 4 &amp; 3\end{bmatrix}\)；矩阵 \(\mathbf{B} = \begin{bmatrix} 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \end{bmatrix}\) 的转置矩阵就是 \(\mathbf{B}^T = \begin{bmatrix} 1 &amp; 4 \\ 2 &amp; 5 \\ 3 &amp; 6\end{bmatrix}\)。</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'2 4;1 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a.T</div><div class="line">matrix([[<span class="number">2</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">4</span>, <span class="number">3</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'1 2 3;4 5 6'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b.T</div><div class="line">matrix([[<span class="number">1</span>, <span class="number">4</span>],</div><div class="line">        [<span class="number">2</span>, <span class="number">5</span>],</div><div class="line">        [<span class="number">3</span>, <span class="number">6</span>]])</div></pre></td></tr></table></figure></p>
<p>矩阵的转置有一个性质：矩阵乘积的转置等于矩阵调换后分别做转置的乘积，即 \[(\mathbf{A}\cdot \mathbf{B})^T = \mathbf{B}^T\cdot \mathbf{A}^T\]</p>
<p>Python 示例：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'2 4;1 3'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'1 6;2 5'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a*b</div><div class="line">matrix([[<span class="number">10</span>, <span class="number">32</span>],</div><div class="line">        [ <span class="number">7</span>, <span class="number">21</span>]])</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b.T*a.T</div><div class="line">matrix([[<span class="number">10</span>,  <span class="number">7</span>],</div><div class="line">        [<span class="number">32</span>, <span class="number">21</span>]])</div></pre></td></tr></table></figure></p>
<h2 id="应用举例">应用举例</h2>
<p>矩阵是一种非常通用的数据表示方法，只要能用矩阵来表示数据，就能够用矩阵的这套运算来解决问题。下面列举几种常见的数学问题，它们都能够使用矩阵的思路来解决。</p>
<h3 id="求解方程组">求解方程组</h3>
<p>例如一个二元方程组</p>
<p>\[\left\{ \begin{eqnarray} 3x+2y &amp; = &amp; 7 \\ -x+y &amp; = &amp; 1 \end{eqnarray} \right. \]</p>
<p><img src="/images/math-linear-algebra/fig1.png" alt=""></p>
<p>可以用矩阵表示成：</p>
<p>\[\begin{bmatrix}
3 &amp; 2 \\
-1 &amp; 1
\end{bmatrix}
\begin{bmatrix}
x \\
y
\end{bmatrix}
=
\begin{bmatrix}
7\\
1
\end{bmatrix}
\]</p>
<p>设公式里的 \(\begin{bmatrix} 3 &amp; 2 \\ -1 &amp; 1\end{bmatrix}\) 为矩阵 \(A\)，将等式两边左乘一个 \(A\) 的逆得到：</p>
<p>\[
\begin{aligned}
A^{-1}A
\begin{bmatrix}
x \\ y
\end{bmatrix}
&amp;= 
A^{-1}
\begin{bmatrix}
7\\
1
\end{bmatrix}\\\
&amp;=
\frac{1}{|A|}\begin{bmatrix}1 &amp; -2 \\ 1 &amp; 3\end{bmatrix}
\begin{bmatrix}
7\\
1
\end{bmatrix}\\\
&amp;=
\frac{1}{5}\begin{bmatrix}1 &amp; -2 \\ 1 &amp; 3\end{bmatrix}
\begin{bmatrix}
7\\
1
\end{bmatrix}\\\
&amp;=
\frac{1}{5}\begin{bmatrix}5 \\ 10\end{bmatrix}
\end{aligned}
\]</p>
<p>因此：
\(\begin{bmatrix}x \\ y\end{bmatrix}=\begin{bmatrix}1 \\ 2\end{bmatrix}\)</p>
<p><img src="/images/math-linear-algebra/fig1-answer.png" alt=""></p>
<p>虽然这个例子给出的方法用于二元一次矩阵求解还不如直接用初中就学到的消元法，但矩阵的好处在于对于更高维的数据，比如有成百上千个未知数，这个解法依然有效。</p>
<p>在 Python 中，可以使用 Numpy 的线性代数算法库 <code>linalg</code> 提供的 <code>solve</code> 方法求解方程组。示例如下：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="prompt">&gt;&gt;&gt; </span>a = np.matrix(<span class="string">'3 2; -1 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>b = np.matrix(<span class="string">'7; 1'</span>)</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>np.linalg.solve(a, b)</div><div class="line">matrix([[ <span class="number">1.</span>],</div><div class="line">        [ <span class="number">2.</span>]])</div></pre></td></tr></table></figure></p>
<h3 id="求向量组合">求向量组合</h3>
<p>假设有向量 \(\vec { a }  =  \begin{bmatrix} 3 \\ -1 \end{bmatrix}\) ，\(\vec { b }  =  \begin{bmatrix} 2 \\ 1 \end{bmatrix}\) ，求二者如何组合成向量 \(\vec { c }  =  \begin{bmatrix} 7 \\ 1 \end{bmatrix}\) ？</p>
<p><img src="/images/math-linear-algebra/fig2.png" alt=""></p>
<p>如果用 \(x\) 和 \(y\) 分别表示两个向量的倍数，这个问题就同样可以用矩阵表示成：</p>
<p>\[\begin{bmatrix}
3 \\
-1 
\end{bmatrix}
x + 
\begin{bmatrix}
2 \\
1
\end{bmatrix}
y
=
\begin{bmatrix}
7\\
1
\end{bmatrix}
\]</p>
<p>这样就得到了一个和上一个问题完全同构的问题，使用相同解法解决得出
\(\begin{bmatrix}x \\ y\end{bmatrix}=\begin{bmatrix}1 \\ 2\end{bmatrix}\)。</p>
<p><img src="/images/math-linear-algebra/fig2-answer.png" alt=""></p>
<h2 id="深入阅读">深入阅读</h2>
<ol>
<li><a href="http://www.doc88.com/p-086655362651.html" target="_blank" rel="external">逆矩阵的几种求法与解析</a></li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/Linear-Algebra/" term="Linear Algebra"/>
    <category scheme="http://hahack.com/tags/Math/" term="Math"/>
    <category scheme="http://hahack.com/tags/Matrix/" term="Matrix"/>
    <category scheme="http://hahack.com/categories/math/" term="math"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（三）：分支管理策略]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-3/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-3/</id>
    <published>2016-04-29T07:45:29.000Z</published>
    <updated>2018-07-06T17:27:30.009Z</updated>
    <content type="html"><![CDATA[<p>说到版本控制，就不得不提到分支管理策略。就像学开车必须学学交通规则。分支管理策略是代码版本控制的基础组成部分。为团队定制一套合适的分支管理策略，就好比制定了一套合理的交通规则，可以让团队的代码的更加有序地演进，尽可能降低多分支带来的复杂度，并避免由于分支混乱引发的各种“车祸”。本文将简单讨论下我们在开发过程中尝试的各种分支管理策略，在面对各种复杂场景下呈现的优势与不足，以及我们的妥协和后续期望。</p>
<h2 id="github-flow">Github-Flow</h2>
<p>作为 Github 的重度用户，我首先考虑的当然是 <a href="https://guides.github.com/introduction/flow/index.html" target="_blank" rel="external">Github-Flow</a> 。</p>
<p><img src="/images/enterprise-class-git-version-control-3/github-flow.png" alt="Github-Flow"></p>
<p>Github-Flow 是一种非常简单的分支管理方案。它的流程只有如下几步：</p>
<ol>
<li>拉出一个新分支；</li>
<li>在新分支上进行修改，并提交和推送你的改动；</li>
<li>发起一个 Pull Request ，向代码管理员申请将你提交的分支合并到原来的分支；</li>
<li>讨论并接受 Code Review。在这个过程中，你依然可以继续推送新的代码到你的开发分支上，并且新的提交在推送后会出现在未完成合并的 Pull Request 页面中；</li>
<li>合并和发布。Review 通过后，代码管理员将该分支合并到原来的主分支上。</li>
</ol>
<a id="more"></a>
<p>在 Gitlab 中同样可以使用 Github-Flow，唯一的区别是叫法从 <q>Pull Request</q> 变成了 <q>Merge Request</q> 。下图是一个被成功合并的 Merge Request：</p>
<p><img src="/images/enterprise-class-git-version-control-3/merge-request.png" alt="Gitlab 中的 Merge Request"></p>
<p>Github-Flow 有如下几个让人着迷的优点：</p>
<ol>
<li>简单好操作。只有主分支和开发分支。不像 Git-Flow 那样需要引入一堆的辅助分支。</li>
<li>推动 Code Review 。通过 Pull Request 的方式，使得 Code Review 成为了日常开发的必经流程，有助于。</li>
<li>确保可编译。所有 Pull Request 都会触发持续集成测试，只有通过测试的才允许并入主分支。这就杜绝了代码编译不过的情况。</li>
</ol>
<p>然而，面对复杂的项目，Github-Flow 暴露出了如下的不足：</p>
<ol>
<li>解决冲突困难。多人协作的项目难免会出现冲突，一旦遇到冲突，Merge Request 就没法被直接被合并了。这个时候只能再从目标分支拉出一个分支→合并这个分支→解决完冲突→推上远程仓库再次发起 Merge Request 。对于大多数习惯了用 Merge Request 合并分支的人来说，这个过程一下子复杂了起来。
<img src="/images/enterprise-class-git-version-control-3/conflict.png" alt="存在冲突的 Merge Request"></li>
<li>Code Review 容易流于形式。虽然 Github-Flow 加入了 Code Review 的过程，但这依然取决于双方对待 Code Review 的积极性。如果没有充分的讨论代码的细节，仍然无法保证代码的质量。实际团队开发中，我们发现在线进行的 Code Review 并不如面对面讨论高效。更严重的是一旦双方没有 keep moving 的意识，大量 Merge Request 被积压，而这些 Merge Request 会不断包含新的 commit 进来，这就会使得 Merge Request 更加难以合并。</li>
<li>持续集成测试无法保证子模块可编译。持续集成可以作为 Merge Request 的准入条件，但这仅仅只是主工程的“福利”。而如<a href="/work/enterprise-class-git-version-control-2/">上一篇文章</a>所说，子模块的持续集成远比主工程复杂得多，难以直接在 Merge Request 页面中给出持续集成测试结果。而对于我们的项目，主工程基本没有多少业务代码，大部分的功能开发都是在子模块上，这就使得 Merge Request 的持续集成功能显得鸡肋了。</li>
<li>还有一些 Gitlab 的交互问题。在 Gitlab 中，默认的合并目标分支是 master 分支：
<img src="/images/enterprise-class-git-version-control-3/default-branch.png" alt="">
当你花上一分钟填完合并描述，选完指派人后，发现目标分支忘了改。此时就只能点击页面下方的 “Change Branches” 链接进入分支选择页重新选择分支。回来后你会发现你所填写的所有内容，包括指派人都被清空了：
<img src="/images/enterprise-class-git-version-control-3/empty.png" alt="">
不细心的人往往没注意到这个问题，于是提交了一个没有指派人的 Merge Request ，这带来的后果是这个 Merge Request 永远没人关注和合并。<span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><img src="/images/enterprise-class-git-version-control-3/Cathedral-and-the-Bazaar-book-cover.jpg" alt=" 《大教堂与集市》这本书讨论了两种软件开发模式及背后的哲学。"><b>附图 1</b>  《大教堂与集市》这本书讨论了两种软件开发模式及背后的哲学。</span></span></span></li>
</ol>
<p>综上所述，Github-Flow 更适用于那些只以 master 分支为主分支，更注重迅速发布的简单项目。这使其非常适合用在维护 Github 上的这些<q>集市型</q>的的开源项目，而不适用于<q>大教堂型</q>的企业级项目。正如 Github 的 <a href="http://scottchacon.com/" target="_blank" rel="external">Scott Chancon</a> 大神所说：</p>
<blockquote>
<p>For teams that have to do formal releases on a longer term interval (a few weeks to a few months between releases), and be able to do hot-fixes and maintenance branches and other things that arise from shipping so infrequently, git-flow makes sense and I would highly advocate it’s use.</p>
<p>For teams that have set up a culture of shipping, who push to production every day, who are constantly testing and deploying, I would advocate picking something simpler like GitHub Flow.</p>
<p><strong>Scott Chancon</strong>, <a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank" rel="external"><em>Issues with git-flow</em></a></p>
</blockquote>
<h2 id="git-flow">Git-Flow</h2>
<p>Git-Flow 是由 <a href="http://nvie.com/about/" target="_blank" rel="external">Vincent Driessen</a> 在他的一篇文章 《<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A successful Git branching model</a>》 中提出的分支管理策略。</p>
<p><img src="/images/enterprise-class-git-version-control-3/git-flow.png" alt="Git-Flow"></p>
<p>与 Github-Flow 相比，Git-Flow 拥有更多的分支：</p>
<ul>
<li><strong>master</strong>：可以提供给用户使用的正式版本；</li>
<li><strong>develop</strong>：用来生成代码的隔夜版本（nightly）；</li>
<li>feature：用于开发某个功能；</li>
<li>hotfix：用于修复线上代码的 bug；</li>
<li>release：用于正式发布版本前的测试分支。</li>
</ul>
<p>Git-Flow 提出的分支管理策略完整而实用，它甚至已经成为了一个通用开发流程标准。开发者们可以在多个团队和项目中遵守同一套流程。但 Git-Flow 也不是万金油。遇到复杂的项目，它也未必能完全适用：</p>
<ol>
<li>
<p>容易出现冲突。Git-Flow 设计了多个分支各司其职，但多分支带来的苦恼是容易出现冲突。最常见的问题是，由于我们实现了<a href="/work/enterprise-class-git-version-control-2/">子模块 commit id 的自动更新</a>，主分支与开发分支的子模块 commit id 经常变动，导致 develop 分支向 master 分支合并的时候出现大量冲突，阻塞发版进度。</p>
</li>
<li>
<p>多产品线的问题。</p>
<p>我们的主工程存在多条产品线：master 分支仅仅维护一个基础模板，而 jilin 、taishan 等分支才是用于产出真正产品的分支。每条产品线的各自有一套 Git-Flow 分支体系，并用前缀区分产品线。例如 jilin 的 develop 分支就叫 jilin-dev 。而子模块既可能和主工程一样多个产品分支，也可能是一个通用模块。对于通用模块，只需要维护一套 Git-Flow 分支体系。例如 common 子模块就只有标准的 master、dev 等分支。</p>
<p>对于多产品分支的主工程和子模块，当改动了某个分支的代码，你就要非常慎重的考虑这部分改动是否通用，是否需要并入其他产品线的分支。而 Git-Flow 并没有探讨多个产品线并存情况下的代码合并方案。</p>
<p>对于通用的子模块，拉 release 分支时又存在<q>锁</q>的问题。比如，负责 jilin 产品线的同事即将发版，于是把 common 子模块拉出了一个 release 分支。其他产品线的同事依然可以继续为 common 子模块的 develop 分支提交 feature 。但还没等 jilin 产品线完成发版。taishan 产品线的同事也准备发版了，此时 release 分支早已经被 jilin 的同事拉出来，而这个 release 分支却没有 taishan 产品线要发版需要的 feature 。这就阻碍了 taishan 产品线的发版。</p>
</li>
</ol>
<h2 id="妥协与期望">妥协与期望</h2>
<p>为了化繁为简，我们做了些妥协：</p>
<ol>
<li>产品线取消 develop 分支。每条产品线取消 develop 分支，并放开产品线的主分支的提交权限。这种方案大幅减少了合并冲突的苦恼，避免发版受阻，而稳定性依然可以通过 feature 分支来保证。我们相信只要日后我们的模板足够完善，产品线的开发成本会越来越低，稳定性也会越来越强。</li>
<li>用 cherry-pick 来同步多条产品线的代码改动。对于通用的改动，可以使用 cherry-pick 来将改动同步到其他分支上。我们扩展了 <a href="/work/enterprise-class-git-version-control-1/#%E9%80%A0%E4%B8%AA%E8%BD%AE%E5%AD%90%EF%BC%9Afmanager">fmanager</a> 的功能，为其实现一个 cherry-pick 命令：</li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fmanager cherry-pick &lt;commit id&gt; &lt;分支列表&gt;</div></pre></td></tr></table></figure></p>
<p>例如，假如希望把 weihai 分支上的一个提交同步到其他分支，可以使用如下命令：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fmanager cherry-pick <span class="number">023</span>e937d master,jilin,taishan</div></pre></td></tr></table></figure></p>
<ol start="3">
<li>
<p>通用的子模块发版时，始终拉出产品 release 分支。</p>
<p>例如，jilin 产品线需要发版了，于是从 common 模块的 master_dev 拉出了 jilin-release 分支：</p>
<p><img src="/images/enterprise-class-git-version-control-3/common-1.png" alt=""></p>
<p>拉出分支后，与 jilin 分支有关的临时改动可以在 jilin-release 中进行。同时 common 模块依然可以给负责其他产品线的同事提交新 feature 。此时 taishan 产品线的同事如果要发版，可以拉出 taishan-release 分支：</p>
<p><img src="/images/enterprise-class-git-version-control-3/common-2.png" alt=""></p>
<p>之后，如果 jilin 产品线的同事修改了一个通用的 bug，同样可以将这个提交 cherry-pick 到其他分支：</p>
<p><img src="/images/enterprise-class-git-version-control-3/common-3.png" alt=""></p>
</li>
</ol>
<p>其实，与其说是 Github-Flow 和 Git-Flow 的问题，不如说是现阶段我们的产品架构的问题。用分支来实现产品线的差异化使得一个仓库出现了多个主分支，而这种复杂的模式已经超出了通用的分支管理流程所能解决的范畴。另外，现阶段子模块的不稳定也导致开发过程中不断需要跨产品线同步代码，给产品线的开发造成负担。</p>
<p>日后我们希望对工程的架构进行调整，通过配置文件来实现产品差异化，而不再创建产品分支。另外，子模块也会越来越稳定，可以低成本接入到各个产品线中，而不再需要频繁迭代。到了那一天，我们的项目就能够重新回归到严格的 Git-Flow ，将 <q>化繁为简</q> 做到极致。</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实战（二）：多分支子模块持续集成]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-2/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-2/</id>
    <published>2016-04-20T16:00:00.000Z</published>
    <updated>2018-07-06T17:27:30.008Z</updated>
    <content type="html"><![CDATA[<h2 id="需求描述">需求描述</h2>
<p>在 <a href="/work/enterprise-class-git-version-control-1/">上一篇文章</a> 中，我简单描述了我们一个项目的复杂程度：子模块、嵌套子模块、多分支。除了工程分支切换上的复杂，我们还遇到另一个问题：子模块持续集成。</p>
<h2 id="主工程持续集成">主工程持续集成</h2>
<p>先说说主工程如何做持续集成。我们使用 Gitlab 自带的 <a href="https://about.gitlab.com/gitlab-ci/" target="_blank" rel="external">Gitlab-Ci</a> 作为我们的持续集成系统。Android 端的主工程的持续集成脚本如下：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">build:</div><div class="line">  tags:</div><div class="line">    -<span class="ruby"> android</span></div><div class="line">  script:</div><div class="line">    -<span class="ruby"> ./fmanager checkout -f <span class="variable">$CI_BUILD_REF_NAME</span></span></div><div class="line">    -<span class="ruby"> ./fmanager update</span></div><div class="line">    -<span class="ruby"> gradle clean</span></div><div class="line">    -<span class="ruby"> gradle aR</span></div></pre></td></tr></table></figure></p>
<p>其中， <code>CI_BUILD_REF_NAME</code> 指定要编译哪个分支的主工程。当我们推送代码到某个分支时，该分支下的持续集成脚本就会被调用，<code>CI_BUILD_REF_NAME</code> 变量就会是那个分支的名字。在执行构建前，先用 fmanager 完成主工程和所有模块的分支切换 ，之后再用 fmanager 更新整个项目的代码。最后再执行编译指令。 <a id="more"></a></p>
<p>主工程的持续集成就是这么简单。然而这远远不能满足我们的需求：我们的工程有多个子模块。一个子模块的某个分支可能被多个父模块的多个分支依赖。例如，common 模块的 master_dev 分支可能被 framework 模块的 master_dev、jilin_dev、taishan_dev 分支依赖。在这样的情况下，任何一个子模块如果不注意提交前自测，都有可能导致多个分支的整个工程编译失败，阻塞多个分支的开发进度。比这更困难的是，对某个模块的修改也许可以保证在当前主工程分支上编译通过，但却意外导致了另外一个依赖该子模块的主工程分支的编译失败。</p>
<p>因此，我们除了要对主工程进行持续集成测试之外，也不得不对子模块做持续集成测试：任何一个子模块某个分支一旦推送了代码，就触发所有依赖它的主工程的分支的持续集成测试。为了实现这个目标，我们尝试了三种方案。</p>
<h2 id="方案一：trigger">方案一：trigger</h2>
<p>第一种方案是利用 Gitlab-Ci 的 <a href="http://doc.gitlab.com/ce/ci/triggers/README.html" target="_blank" rel="external">trigger</a> 机制。trigger 提供了直接在脚本中触发任何一个仓库的持续集成的方法。利用 trigger，我们可以为子模块也写一份持续集成脚本，而它仅仅用来触发依赖它的所有主工程的分支的持续集成。例如，假如主工程的 master_dev 分支和 jilin_dev 分支都依赖了 framework 子模块的 master_dev 分支，那么可以为 framework 的 master_dev 编写一个持续集成脚本：</p>
<p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">build:</div><div class="line">  stage: deploy</div><div class="line">  script:</div><div class="line">    -<span class="ruby"> <span class="string">"curl -X POST -F token=3ef8939a8e50c5e98f459789b966a4 -F ref=refs/heads/master_dev http://yourcompany.com/api/v3/projects/10/trigger/builds"</span></span></div><div class="line">    -<span class="ruby"> <span class="string">"curl -X POST -F token=3ef8939a8e50c5e98f459789b966a4 -F ref=refs/heads/jilin_dev http://yourcompany.com/api/v3/projects/10/trigger/builds"</span></span></div></pre></td></tr></table></figure></p>
<p>其中，<code>ref</code> 参数指定了要触发持续集成测试的项目的分支。这样，当中央仓库上 framework 模块的 master_dev 分支有新的代码推送时，主工程的 master_dev 分支和 jilin_dev 分支就会触发构建：</p>
<p><img src="/images/enterprise-class-git-version-control-2/trigger.png" alt=""></p>
<p>使用 trigger 虽然能有效触发所依赖的主工程的分支，但它有很多不足之处：</p>
<p>1、维护成本高。每个子模块都需要编写持续集成脚本，且由于主工程经常需要新增新业务分支，需要频繁维护每个子模块的持续集成脚本，添加依赖它的分支。
2、无法跟踪。子模块的持续集成脚本的作用仅仅只是触发了主工程的持续集成，而当次触发的结果并不会返回给子模块作为子模块持续集成的结果：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">gitlab-ci-multi-runner 1.0.4 (014aa8c)</div><div class="line">Using Shell executor...</div><div class="line">Running on appdevdeiMac.local...</div><div class="line">Fetching changes...</div><div class="line">HEAD is now at 826d126 <span class="operator"><span class="keyword">Merge</span> branch <span class="string">'master_dev'</span> <span class="keyword">of</span> http://yourcompany.com/yourgroup/framework_android <span class="keyword">into</span> master_dev</span></div><div class="line"><span class="keyword">From</span> http://yourcompany.com/FFProject/appframework_android</div><div class="line">   <span class="number">826</span>d126.<span class="number">.13</span>ba8f3  master_dev -&gt; origin/master_dev</div><div class="line">Checking out <span class="number">13</span>ba8f33 <span class="keyword">as</span> master_dev...</div><div class="line">Previous HEAD <span class="keyword">position</span> was <span class="number">826</span>d126... <span class="keyword">Merge</span> branch <span class="string">'master_dev'</span> <span class="keyword">of</span> http://yourcompany.com/yourgroup/framework <span class="keyword">into</span> master_dev</div><div class="line">HEAD <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> <span class="number">13</span>ba8f3... [master_dev][bank][c:panweizhou][r:chendingyi]<span class="keyword">update</span> ci script.</div><div class="line">$ curl -X POST -F token=<span class="number">2587402741</span>a9ef3a09d0dd64f83b90 -F ref=$CI_BUILD_REF_NAME http://yourcompany.com/api/v3/projects/<span class="number">11</span>/<span class="keyword">trigger</span>/builds</div><div class="line">  % Total    % Received % Xferd  Average Speed   <span class="keyword">Time</span>    <span class="keyword">Time</span>     <span class="keyword">Time</span>  <span class="keyword">Current</span></div><div class="line">                                 Dload  Upload   Total   Spent    <span class="keyword">Left</span>  Speed</div><div class="line">  <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> <span class="comment">--:--:-- --:--:-- --:--:--     0100   298  100    26  100   272    220   2304 --:--:-- --:--:-- --:--:--  2324</span></div><div class="line">{<span class="string">"id"</span>:<span class="number">48</span>,<span class="string">"variables"</span>:<span class="literal">null</span>}</div><div class="line">Build succeeded.</div></pre></td></tr></table></figure></p>
<p>所以子模块的持续集成一直是成功的：</p>
<p><img src="/images/enterprise-class-git-version-control-2/all-success.png" alt=""></p>
<p>而实际却可能早已导致主工程编译失败：</p>
<p><img src="/images/enterprise-class-git-version-control-2/all-fail.png" alt=""></p>
<p>3、无法定位触发源。主工程的构建日志页仅记录触发本次构建的 trigger 的 Token 。但这个 trigger 是主工程自己的 <code>--bb</code> 。</p>
<p><img src="/images/enterprise-class-git-version-control-2/trigger-token.png" alt=""></p>
<p>换句话说，除非为每一个子模块提供一个单独的 Token ，否则我们根本无法判断究竟是子模块触发了这个 trigger 。第一种方案歇菜。</p>
<h2 id="方案二：子模块测试工程">方案二：子模块测试工程</h2>
<p>第二种方案是为所有需要做集成测试的子模块都单独编写一个测试工程。当子模块有推送代码时，不再触发主工程的持续集成，而是触发测试工程的持续集成。</p>
<p>由于每个子模块与其测试工程是一对一的关系，一旦测试工程编译失败，那其对应的子模块就很有可能存在问题。然而这个方案也有很大的局限性。</p>
<ol>
<li>需要为每个核心子模块都维护一个测试工程，且测试工程的开发进度需要一直与主工程同步。当测试工程的维护进度落后于主工程，就有可能出现子模块能保证主工程编译通过，却导致测试工程编译不过。</li>
<li>当子模块有多个分支时，每个重要分支都需要相应建立测试工程的分支，这使得测试工程的维护成本同比增加。</li>
<li>最致命的问题是：子模块的测试工程仅仅只能覆盖子模块，而整个主工程由多个子模块组合而成的，模块与模块之间也有相互依赖关系，模块级别的覆盖度并不足以保证整个工程的可编译。</li>
</ol>
<p>综上所述，用子模块测试工程来对子模块进行持续集成并不理想。方案二也失败了。看来 trigger 并不适合用来解决我们的问题，于是我对 trigger 的尝试也到此为止。</p>
<h2 id="方案三：自动更新子模块-commit-id">方案三：自动更新子模块 commit id</h2>
<p>前面两种方案走不通，我开始思考：Git 难道就没有关于子模块持续集成的 best practice 吗？直到我看到了 <a href="https://blog.blahgeek.com/gitlab-ci-build-multi-repo/" target="_blank" rel="external">blahgeek 的这篇文章</a> ，里头提出用 commit id 的改动来触发工程更新，顿时恍然大悟：Git 本身建议通过在主工程记录子模块的 commit id 来控制子模块的版本。除了控制版本，commit id 其实还有另一个好处，那就是持续集成！子模块发生修改后，为了让主工程同步该子模块的更新，你需要不断往上提交上层模块的 commit id ，这就会顺带触发主工程的持续集成。</p>
<p>然而，<a href="/work/enterprise-class-git-version-control-1/">上一篇文章</a>中提到，为了避免只提 commit id 没提代码的情况发生，我们直接禁止了 commit id 的提交。矛盾来了。</p>
<p>幸运的是我们有折中的办法。如果子模块代码已推送成功，那么此时该模块在父工程中的 commit id 一定可以更新。而这个更新为什么不能让计算机帮忙自动完成？我只需要在子模块的中央仓库中加入 post-receive 钩子，当子模块代码推送完成时，post-receive 钩子里的脚本就会自动被触发，帮助我们到上层提交该子模块的 commit id 。对于嵌套子模块，这个过程会一直递归地做，直到父工程就是主工程为止，而这最终就会触发主工程的持续集成！</p>
<p>方法听起来可行，但实际做起来我依然遇到了不少困难。</p>
<p>首先，服务器上的仓库都是 bare repository ，不能提交代码，也没有相互依赖关系，主工程和所有子模块的仓库都是平级的存放在同个目录下的。这意味着你无法利用 post-receive 钩子原地地修改自身仓库和依赖它的其他仓库。</p>
<p>其次，依赖每个子模块的父工程及分支各不相同。当一个子模块的某个分支有更新时，你需要为父工程中为所有依赖该子模块那个分支的全部分支都提交一遍新的 commit id 。</p>
<p>最后，每一个子模块也都需要安装一个这样的 post-receive 钩子，且子模块经常需要新增，依赖关系也经常变动，维护成本高。</p>
<p>解决第一个问题的方法就是在服务器也像本地那样 clone 出一份整个工程的 working repository ，这个工程和我们本地开发的仓库没什么区别，交给服务器来自动维护。唯一的难点在于怎么将每个 bare repository 与该 working repository 里的每个子模块相关联。于是，只需要写个工具，遍历一遍所有主工程分支，并生成每个分支所依赖的每个子模块的仓库地址与本地路径信息。内容类似这样：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "master": {        </div><div class="line">        "app": {"branch": "master"},</div><div class="line">        "common": {"branch": "master"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "master"}</div><div class="line">    },</div><div class="line">    "master_dev": {        </div><div class="line">        "app": {"branch": "master_dev"},</div><div class="line">        "common": {"branch": "master_dev"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "master"}</div><div class="line">    },</div><div class="line">    "jilin": {        </div><div class="line">        "app": {"branch": "master"},</div><div class="line">        "common": {"branch": "master"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "jilin"}</div><div class="line">    },</div><div class="line">    "jilin_dev": {        </div><div class="line">        "app": {"branch": "master"},</div><div class="line">        "common": {"branch": "master"},</div><div class="line">        ...</div><div class="line">        "react_native/node_modules": {"branch": "jilin_dev"}</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>解决第二个问题的方法就是利用每个主工程分支的 modules.json 。我们在主工程的每个分支上都编写了一份 modules.json ，这个文件记录了所有子模块的依赖关系。只要对所有分支的 modules.json 进行归并，就可以得到一份完整的记录所有模块所有分支的依赖关系。内容类似这样：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app:</div><div class="line">    repo: http://yourcampany.com/yourgroup/app_android.git</div><div class="line">    path: /home/git/app_android</div><div class="line"></div><div class="line">common:</div><div class="line">    repo: http://yourcampany.com/yourgroup/core_lib_android.git</div><div class="line">    path: /home/git/app_android/common</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">node_modules:</div><div class="line">    repo: http://yourcampany.com/yourgroup/node_modules.git</div><div class="line">    path: /home/git/app_android/react_native/node_modules</div></pre></td></tr></table></figure></p>
<p>有了这两个文件，post-receive 钩子也就可以写得通用化：先获取该子模块的仓库名，然后根据这个文件找到在 working repository 下对应的目录，然后用 fmanager 切到依赖该子模块该分支的主工程。更新该子模块的 working tree ，最后 cd 到上级目录提交该子模块的 commit id 。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#author:panweizhou</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">After push, automatically update commit id of current submodule.</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.append(<span class="string">'/usr/lib/python2.6/site-packages'</span>)</div><div class="line">sys.path.append(<span class="string">'/usr/lib64/python2.6/site-packages'</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> fileinput</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> yaml</div><div class="line"><span class="keyword">from</span> filelock <span class="keyword">import</span> FileLock</div><div class="line"></div><div class="line">module_file = <span class="string">"/home/git/modules/modules_android.json"</span></div><div class="line">module_path_file = <span class="string">"/home/git/modules/modules_android.yml"</span></div><div class="line">project_root = <span class="string">"/home/git/app_android"</span></div><div class="line">env_path = <span class="string">"/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/libexec/git-core/:/home/git/bin"</span></div><div class="line"></div><div class="line">lock_file_name = <span class="string">"/tmp/"</span> + os.path.basename(os.getcwd())</div><div class="line"></div><div class="line"><span class="keyword">with</span> FileLock(lock_file_name):</div><div class="line">    <span class="keyword">print</span> (<span class="string">"Updating commit id"</span>)</div><div class="line">    <span class="comment"># read global module config</span></div><div class="line">    global_module_config = {}</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> open(module_file) <span class="keyword">as</span> f:</div><div class="line">            global_module_config = json.load(f)</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        print(<span class="string">"Global modules.json parsed Error!"</span>)</div><div class="line">        exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Read in each ref that the user is trying to update</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</div><div class="line">        line = line.strip()</div><div class="line">        (from_commit, to_commit, ref) = line.split(<span class="string">' '</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Get branch name</span></div><div class="line">        pos = ref.rfind(<span class="string">'/'</span>)</div><div class="line">        <span class="keyword">if</span> pos &gt;= <span class="number">0</span>:</div><div class="line">            branch = ref[pos+<span class="number">1</span>:]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            branch = ref</div><div class="line"></div><div class="line">        <span class="keyword">if</span> branch == <span class="string">'master'</span> <span class="keyword">or</span> branch.lower().endswith(<span class="string">'bank'</span>) <span class="keyword">or</span> branch.endswith(<span class="string">'_dev'</span>):</div><div class="line">        <span class="comment"># if branch == 'WeiZhouBank_dev':</span></div><div class="line">            <span class="comment"># Get repo name</span></div><div class="line">            output = subprocess.Popen([<span class="string">'git summary | egrep "^ project"'</span>], env={<span class="string">"PATH"</span>: env_path}, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">            oc = output.communicate()[<span class="number">0</span>]</div><div class="line">            repo = oc.split(<span class="string">':'</span>)[<span class="number">1</span>].strip()</div><div class="line"></div><div class="line">            <span class="comment"># Get the corresponding working path</span></div><div class="line">            module_path_info = {}</div><div class="line">            <span class="keyword">with</span> open (module_path_file) <span class="keyword">as</span> f:</div><div class="line">                module_path_info = yaml.load(f)</div><div class="line">            module_path = <span class="string">""</span></div><div class="line">            module_name = <span class="string">""</span></div><div class="line">            <span class="keyword">for</span> module_name, module_info <span class="keyword">in</span> module_path_info.items():</div><div class="line">                <span class="keyword">if</span> module_info.has_key(<span class="string">'repo'</span>):</div><div class="line">                    module_repo = module_info[<span class="string">"repo"</span>]</div><div class="line">                    <span class="keyword">if</span> module_repo.endswith(repo):</div><div class="line">                        has_such_module = <span class="keyword">True</span></div><div class="line">                        module_path = module_info[<span class="string">"path"</span>]                       </div><div class="line">                        <span class="keyword">break</span></div><div class="line">                        </div><div class="line">            <span class="comment"># Get all the main projects branch that use this module</span></div><div class="line">            main_branch_set = set()</div><div class="line">            <span class="keyword">for</span> branch_name, config_list <span class="keyword">in</span> global_module_config.items():</div><div class="line">                <span class="keyword">if</span> config_list.has_key(module_name):</div><div class="line">                    mconfig = config_list[module_name]</div><div class="line">                    <span class="keyword">if</span> (mconfig.has_key(<span class="string">'branch'</span>)):</div><div class="line">                        mbranch = mconfig[<span class="string">'branch'</span>]</div><div class="line">                        <span class="keyword">if</span> branch == mbranch:</div><div class="line">                            main_branch_set.add(branch_name)</div><div class="line"></div><div class="line">            <span class="comment"># Do the following stuff for each branch of main project</span></div><div class="line">            <span class="comment"># that use this module of this branch</span></div><div class="line">            <span class="keyword">for</span> main_branch <span class="keyword">in</span> main_branch_set:</div><div class="line">                os.chdir(project_root)</div><div class="line">                output = subprocess.Popen([<span class="string">"./fmanager checkout -f %s"</span> % main_branch], env={<span class="string">"PATH"</span>: env_path}, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">                res = output.wait()</div><div class="line">                <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                    os.chdir(module_path)</div><div class="line">                    <span class="comment"># update current submodule </span></div><div class="line">                    output = subprocess.Popen([<span class="string">'/home/git/bin/update_root'</span>, branch], cwd=module_path, env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                    res = output.wait()</div><div class="line">                    <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                        <span class="comment"># Get commit log</span></div><div class="line">                        output = subprocess.Popen([<span class="string">'git log -n 1'</span>], env={<span class="string">"PATH"</span>: env_path}, cwd=module_path, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">                        commit_log = output.communicate()[<span class="number">0</span>]</div><div class="line">                        commit_log = <span class="string">"Bump Version for submodule %s:\n\n%s"</span> % (module_name, commit_log)</div><div class="line">                        <span class="comment"># Go to father module</span></div><div class="line">                        os.chdir(<span class="string">'..'</span>)</div><div class="line">                        father_path = os.getcwd()</div><div class="line">                        <span class="comment"># Get branch of father module</span></div><div class="line">                        output = subprocess.Popen([<span class="string">'git'</span>, <span class="string">'symbolic-ref'</span>, <span class="string">'--short'</span>, <span class="string">'HEAD'</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE, env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                        oc = output.communicate()</div><div class="line">                        father_branch = oc[<span class="number">0</span>].strip()</div><div class="line">                        <span class="keyword">if</span> (father_branch.strip() != <span class="string">""</span>):</div><div class="line">                            print(<span class="string">"Bumping version of branch %s of father project..."</span> % father_branch)</div><div class="line">                            output = subprocess.Popen([<span class="string">'/home/git/bin/update_root'</span>, father_branch], cwd=father_path, env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                            res = output.wait()</div><div class="line">                            <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                                output = subprocess.Popen([<span class="string">'git diff | wc -l'</span>], cwd=father_path, env={<span class="string">"PATH"</span>: env_path}, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">                                diff_num = output.communicate()[<span class="number">0</span>]</div><div class="line">                                <span class="keyword">if</span> diff_num &gt; <span class="number">1</span>:</div><div class="line">                                    subprocess.call([<span class="string">'git'</span>, <span class="string">'add'</span>, module_name], env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                                    output.wait()</div><div class="line">                                    output = subprocess.Popen([<span class="string">'git'</span>, <span class="string">'commit'</span>, <span class="string">'-m'</span>, commit_log, <span class="string">'--no-verify'</span>], env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                                    res = output.wait()</div><div class="line">                                    <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                                        output = subprocess.Popen([<span class="string">'git'</span>, <span class="string">'push'</span>, <span class="string">'origin'</span>, <span class="string">'HEAD'</span>, <span class="string">'--no-verify'</span>], env={<span class="string">"PATH"</span>: env_path})</div><div class="line">                                        output.wait()</div><div class="line">                                        <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                                            <span class="keyword">print</span> <span class="string">"Successfully bumped version branch %s of father project"</span> % father_branch</div><div class="line">                                        <span class="keyword">else</span>:</div><div class="line">                                            <span class="keyword">print</span> <span class="string">"Error bumping version for branch %s of father project"</span> % father_branch</div><div class="line">                                <span class="keyword">else</span>:</div><div class="line">                                    <span class="keyword">print</span> <span class="string">"Error bumping version for branch %s of father project"</span> % father_branch</div><div class="line">                            <span class="keyword">else</span>:</div><div class="line">                                <span class="keyword">print</span> <span class="string">"Error bumping version for branch %s of father project"</span> % father_branch</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            print(<span class="string">"Father project is a tag. Stop bumping verison."</span>)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">print</span> <span class="string">"Error updating the remote working tree."</span></div></pre></td></tr></table></figure></p>
<p>之后只需将钩子安装到每个子模块的 bare repository 里的 custom_hooks 目录下。同样可以利用脚本来一次性完成。</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment">#author: panweizhou</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> module <span class="keyword">in</span> `ls <span class="operator">-d</span> *_android.git`</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> test <span class="variable">$module</span> != <span class="string">"App_Android.git"</span>  <span class="comment"># Don't install to root project</span></div><div class="line">    <span class="keyword">then</span></div><div class="line">        module_dir=<span class="variable">${module}</span></div><div class="line">        <span class="keyword">if</span> test ! <span class="operator">-d</span> <span class="variable">${module_dir}</span>/custom_hooks</div><div class="line">        <span class="keyword">then</span></div><div class="line">            mkdir <span class="variable">${module_dir}</span>/custom_hooks</div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="keyword">for</span> hook <span class="keyword">in</span> `ls submodule_hooks_android`</div><div class="line">        <span class="keyword">do</span></div><div class="line">            cp submodule_hooks_android/<span class="variable">${hook}</span> <span class="variable">${module_dir}</span>/custom_hooks/</div><div class="line">        	<span class="built_in">sudo</span> chmod -R <span class="number">755</span> <span class="variable">${module_dir}</span>/custom_hooks</div><div class="line">            <span class="built_in">sudo</span> chmod +x <span class="variable">${module_dir}</span>/custom_hooks/<span class="variable">${hook}</span></div><div class="line">        <span class="keyword">done</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>钩子装好后，试着为 framework 子模块推送一下代码，终端中会看到 <code>Bump Version for submodule framework</code> 的字眼，表示 framework 的 commit id 已被成功更新到主工程：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="label">C02PGTP8FVH5:</span>PAFFHouse hahack$ git <span class="keyword">push</span> -u origin jilin_dev</div><div class="line">Counting objects: <span class="number">3</span>, done.</div><div class="line">Delta compression using up to <span class="number">4</span> threads.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">308</span> bytes | <span class="number">0</span> bytes/s, done.</div><div class="line">Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line"><span class="label">remote:</span></div><div class="line"><span class="label">remote:</span> ========================================================================        </div><div class="line"><span class="label">remote:</span> </div><div class="line"><span class="label">remote:</span>         faq: http://yourcampany.com/yourgroup/FFWiki/wikis/git-faq        </div><div class="line"><span class="label">remote:</span> </div><div class="line"><span class="label">remote:</span> ========================================================================        </div><div class="line"><span class="label">remote:</span> [jilin_dev <span class="number">941</span>f8c5] Bump Version for submodule framework:        </div><div class="line"><span class="label">remote:</span>  <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)        </div><div class="line"><span class="label">remote:</span> Updating commit id        </div><div class="line"><span class="label">remote:</span> Bumping version of branch jilin_dev of main project...        </div><div class="line"><span class="label">remote:</span> Bumping version of branch jilin_dev of father project...        </div><div class="line"><span class="label">remote:</span> Successfully bumped version branch jilin_dev of father project        </div><div class="line"><span class="label">remote:</span> remote:</div><div class="line"><span class="label">remote:</span> remote: ========================================================================                </div><div class="line"><span class="label">remote:</span> remote:         </div><div class="line"><span class="label">remote:</span> remote:         faq: http://yourcampany.com/yourgroup/FFWiki/wikis/git-faq                </div><div class="line"><span class="label">remote:</span> remote:         </div><div class="line"><span class="label">remote:</span> remote: ========================================================================            </div><div class="line"><span class="label">remote:</span> To http://yourcampany.com/yourgroup/App_Android.git        </div><div class="line"><span class="label">remote:</span>    aa13394.<span class="number">.69e6</span>c467  HEAD -&gt; jilin_dev        </div><div class="line">To http://yourcampany.com/yourgroup/framework_android.git</div><div class="line">   e41b275.<span class="number">.35141</span>bf  jilin_dev -&gt; jilin_dev</div><div class="line">Branch jilin_dev <span class="keyword">set</span> up to track remote branch jilin_dev from origin.</div></pre></td></tr></table></figure></p>
<p>上面的步骤执行了两次 push 操作：</p>
<ol>
<li>push framework 子模块的代码；</li>
<li>push 主工程的代码，更新 framework 的 commit id 。这个 push 操作是由 framework 的 post-receive 钩子自动完成的。</li>
</ol>
<p>等候一段时间后，打开主工程的持续集成页面，可以找到这次子模块更新触发的提交以及持续集成的结果：</p>
<p><img src="/images/enterprise-class-git-version-control-2/framework-bump.png" alt="非嵌套子模块的持续集成结果"></p>
<p>对于嵌套子模块，父模块提交完子模块的 commit id ，同样会触发父模块的 post-receive 钩子，于是会看到这样的推送结果：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">C02PGTP8FVH5:HFCommon hahack$ git push -u origin master_dev</div><div class="line">Counting objects: <span class="number">3</span>, done.</div><div class="line">Delta compression <span class="keyword">using</span> up <span class="built_in">to</span> <span class="number">4</span> threads.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">305</span> <span class="keyword">bytes</span> | <span class="number">0</span> <span class="keyword">bytes</span>/s, done.</div><div class="line">Total <span class="number">3</span> (delta <span class="number">2</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">remote: </div><div class="line">remote: ========================================================================        </div><div class="line">remote: </div><div class="line">remote:         faq: <span class="keyword">http</span>://yourcampany.com/yourgroup/FFWiki/wikis/git-faq        </div><div class="line">remote: </div><div class="line">remote: ========================================================================        </div><div class="line">remote: warning: unable <span class="built_in">to</span> rmdir FinancialProduct: Directory <span class="operator">not</span> <span class="constant">empty</span>        </div><div class="line">remote: [taishan <span class="number">941</span>b017] Bump Version <span class="keyword">for</span> submodule HFCommon:        </div><div class="line">remote:  <span class="number">1</span> <span class="built_in">file</span> changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div><div class="line">remote: Updating commit id        </div><div class="line">remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> main project...        </div><div class="line">remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> father project...        </div><div class="line">remote: Successfully bumped <span class="built_in">version</span> branch taishan <span class="operator">of</span> father project        </div><div class="line">remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan_dev <span class="operator">of</span> main project...  </div><div class="line">remote: remote:         </div><div class="line">remote: remote: ========================================================================                </div><div class="line">remote: remote:         </div><div class="line">remote: remote:         faq: <span class="keyword">http</span>://yourcampany.com/yourgroup/FFWiki/wikis/git-faq                </div><div class="line">remote: remote:         </div><div class="line">remote: remote: ========================================================================                </div><div class="line">remote: remote: [taishan f43ab33] Bump Version <span class="keyword">for</span> submodule react_native:                </div><div class="line">remote: remote:  <span class="number">1</span> <span class="built_in">file</span> changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)                </div><div class="line">remote: remote: Updating commit id                </div><div class="line">remote: remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> main project...                </div><div class="line">remote: remote: Bumping <span class="built_in">version</span> <span class="operator">of</span> branch taishan <span class="operator">of</span> father project...                </div><div class="line">remote: remote: Successfully bumped <span class="built_in">version</span> branch taishan <span class="operator">of</span> father project                </div><div class="line">remote: remote: remote:                 </div><div class="line">remote: remote: remote: ========================================================================                        </div><div class="line">remote: remote: remote:                 </div><div class="line">remote: remote: remote:         faq: <span class="keyword">http</span>://yourcampany.com/yourgroup/FFWiki/wikis/git-faq                        </div><div class="line">remote: remote: remote:                 </div><div class="line">remote: remote: remote: ========================================================================                        </div><div class="line">remote: remote: To <span class="keyword">http</span>://yourcampany.com/yourgroup/App_Android.git                </div><div class="line">remote: remote:    <span class="number">50</span>b73a2..f43ab33  HEAD -&gt; taishan                </div><div class="line">remote: To <span class="keyword">http</span>://yourcampany.com/yourgroup/react_native.git        </div><div class="line">remote:    <span class="number">3552248.</span><span class="number">.941</span>b017  HEAD -&gt; taishan        </div><div class="line">To <span class="keyword">http</span>://yourcampany.com/yourgroup/HFCommon.git</div><div class="line">   <span class="number">4940</span>def.<span class="number">.7</span>a59ff0  master_dev -&gt; master_dev</div><div class="line">Branch master_dev <span class="built_in">set</span> up <span class="built_in">to</span> track remote branch master_dev <span class="built_in">from</span> origin.</div></pre></td></tr></table></figure></p>
<p>在主工程的持续集成页面中同样可以找出嵌套子模块触发的提交和持续集成结果：</p>
<p><img src="/images/enterprise-class-git-version-control-2/embeb-bump.png" alt="嵌套子模块的持续集成结果"></p>
<p>只剩第三个问题未解决了。由于模块和分支不断在新增，上面的这两个文件肯定是需要经常更新，新增模块也需要安装这个钩子。这些既然已经可以用工具自动完成，只需要把工具都加进了 crontab 计划任务里，设定每天凌晨三点钟就自动执行一遍，问题完美解决！</p>
<p>使用这个方案后，所有的子模块发生更新，都会触发依赖该子模块的主工程的持续集成测试。当发现主工程突然不能编译了，可以打开 Gitlab ，迅速定位到最早导致编译不过的子模块及提交：</p>
<p><img src="/images/enterprise-class-git-version-control-2/problem-commit.png" alt="利用Gitlab定位编译问题"></p>
<p>这为我们定位编译问题提供了非常重要的线索！</p>
<h2 id="后话">后话</h2>
<p>在本篇文章中，我仔细讨论了对子模块进行持续集成的三种方案，并利用自动化手段实现逐层往上提交子模块 commit id 从而触发主工程构建。这些构建结果对我们快速定位工程编译不过的问题提供了重要的线索。</p>
<p>说下其他一些值得注意的地方。有些时候某个模块的代码推送无法避免会导致暂时性的编译失败（比如涉及多个模块的代码提交），又不想被误认为是导致后面编译不过的罪魁祸首，那就可以通过在这些中间提交任务的 commit message 中加上 <code>[ci skip]</code> 字段，告诉 Gitlab 跳过对这些提交的构建测试，只在最后一次提交中去除该字段，检查最后一次的提交即可。</p>
<p>另外一个问题是，自从启用了这种方案，我们服务器上的构建任务一下子爆增。一个子模块的代码推送可能会触发多个构建任务，而我们目前负责持续集成的机器还很少。这使得推送完代码后，往往需要等上半天才能看到结果，这可能会影响问题定位的及时性。我们在后面准备进行一个有趣的尝试：每个客户端开发者的机器其实已具备了构建至少一个平台的客户端的条件，所以可以利用开发机的剩余资源来帮忙构建。具体方法是：每个开发者将自己的机器注册为一个 Runner ，并自行打上 android 或者 ios 标签，标明机器能编译哪个平台的客户端：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitlab-ci-multi-runner register -url http://yourcompany.com/ci -registration-token z_AvFaP<span class="built_in">cd</span>F9aE3sseEvw --name <span class="string">"android-panweizhou"</span>  --limit <span class="number">1</span> --executor shell --shell bash --tag-list <span class="string">"android"</span></div></pre></td></tr></table></figure></p>
<p>当机器暂时空余时，可以开启这个 Runner ，加入帮忙构建的队伍。Gitlab 将根据该 Runner 的标签为其安排相应平台的构建任务：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitlab-ci-multi-runner start</div></pre></td></tr></table></figure></p>
<p>年底我们将统计出 Gitlab 上这些 Runner 的构建次数，对次数多的 Runner 进行表彰。真是躺着就把钱挣了有木有！</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/CI/" term="CI"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[化繁为简的企业级 Git 管理实践（一）：多分支子模块依赖管理]]></title>
    <link href="http://hahack.com/work/enterprise-class-git-version-control-1/"/>
    <id>http://hahack.com/work/enterprise-class-git-version-control-1/</id>
    <published>2016-04-12T16:00:00.000Z</published>
    <updated>2018-07-06T17:27:30.008Z</updated>
    <content type="html"><![CDATA[<h2 id="需求描述">需求描述</h2>
<p>我们尝试使用 Git 来维护一个项目的代码。这个项目的结构比较复杂：</p>
<ul>
<li>项目包含由多个子模块，每个子模块是一个独立的 Git 仓库，子模块还允许继续嵌套包含子模块。 例如，主工程依赖 common、framework、react_native 等多个子模块，而 react_native 子模块又依赖 node_modules、HFCommon、HFModules 等多个嵌套子模块。</li>
</ul>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[-] app_android/</div><div class="line"> |-[+] HFUIKit</div><div class="line"> |-[+] channel</div><div class="line"> |-[+] common</div><div class="line"> |-[+] framework</div><div class="line"> |-[+] hybrid</div><div class="line"> |-[+] messagecenter</div><div class="line"> |-[-] react_native</div><div class="line">    |-[+] HFCommon</div><div class="line">    |-[+] HFModules</div><div class="line">    |-[+] node_modules</div></pre></td></tr></table></figure></p>
<ul>
<li>主工程和子模块允许存在多个分支，且相互之间有依赖关系。例如，主工程的 jilin 分支同时依赖 common 子模块的 master 分支，以及 framework 子模块的 jilin 分支。</li>
</ul>
<a id="more"></a>
<h2 id="git-submodule-的问题">Git submodule 的问题</h2>
<p>Git 提供了 submodule 来支持子模块的需求，使用它可以很方便的将多个独立仓库包含到同一个主工程中：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git submodule add http://xxx.xxx/common.git</div><div class="line">$ git submodule add http://xxx.xxx/framework.git</div></pre></td></tr></table></figure></p>
<p>Git submodule 还支持嵌套添加子模块：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git submodule add http://xxx.xxx/react_native.git</div><div class="line">$ <span class="built_in">cd</span> react_native</div><div class="line">$ git submodule add http://xxx.xxx/HFCommon.git</div><div class="line">$ git submodule add http://xxx.xxx/HFModules.git</div><div class="line">$ git submodule add http://xxx.xxx/node_modules.git</div></pre></td></tr></table></figure></p>
<p>通过子模块，这些子模块既可以各自独立的修改和提交代码，又可以将改动作用到依赖它的父工程。这听起来是个很棒的特性，然而 Git submodule 也存在着一些让人抓狂的坑。</p>
<p>首先，主工程并不直接跟踪子模块的代码，而仅仅只跟踪子模块的 commit id 的改动。在执行 <code>git submodule update</code> 更新子模块代码时，Git 就是根据主工程所维护的 commit id 来更新子模块到指定状态的。</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ git diff react_native </div><div class="line">diff --git a/react_native b/react_native</div><div class="line">index <span class="number">3</span>a9c5b1..ad68a28 <span class="number">160000</span></div><div class="line">--- a/react_native</div><div class="line">+++ b/react_native</div><div class="line">@@ -<span class="number">1</span> +<span class="number">1</span> @@</div><div class="line">-Subproject commit <span class="number">3</span>a9c5b14c45b199e2e6863d2b6da22dabc2a54f5</div><div class="line">+Subproject commit ad68a28c13d4196df531c7df8523d07358288297</div><div class="line">(END)</div></pre></td></tr></table></figure></p>
<p>因此，如果你只在子模块中修改并提交了代码，而没有到主工程上面再把子模块的 commit id 提交一下，其他人拉取工程代码的时候会发现子模块的代码依然停留在老的 commit id 所指向的状态。对于嵌套子模块，这种工作尤为繁琐，提交代码后要逐层往上提交 commit id ，否则其他人无法正确更新代码。</p>
<p>其次，如前面所说，使用 <code>git submodule update</code> 更新子模块后，子模块将被切换到一个指向父工程维护的 commit id 所指定的游离状态：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ git submodule update react_native</div><div class="line">bash-<span class="number">3.2</span>$ <span class="built_in">cd</span> react_native</div><div class="line">bash-<span class="number">3.2</span>$ git branch</div><div class="line">* (detached from <span class="number">3</span>a9c5b1)</div><div class="line">  master</div><div class="line">  jilin</div><div class="line">  TaiShan</div></pre></td></tr></table></figure></p>
<p>一旦代码处于游离分支，你就要时刻警惕在游离分支上的提交有没有即时合并到非游离分支上。如果你直接在游离分支上开发并提交了代码，之后在父工程里再次 <code>git submodule update</code> ，你所有未合并的提交都会丢失！</p>
<p>最后还有一个非常麻烦，但也极容易出现的问题：如果团队里有人只提交了主工程该子模块的 commit id ，却忘了进入该模块提交模块真正的代码，那么当推送到中央仓库之后，其他人就会因为找不到与该 commit id 对应的代码而无法正确更新代码：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bash-<span class="number">3.2</span>$ git submodule update</div><div class="line">error: pathspec <span class="string">'ad68a28c13d4196df531c7df8523d07358288297'</span> did not match any file(s) known to git.</div><div class="line">Did you forget to <span class="string">'git add'</span>?</div><div class="line">Unable to checkout <span class="string">'ad68a28c13d4196df531c7df8523d07358288297'</span> <span class="keyword">in</span> submodule path <span class="string">'react_native'</span></div></pre></td></tr></table></figure></p>
<p>对于熟练的用户，这些坑自然可以轻松越过。但考虑到团队里大都是 Git 新手，我们发现子模块的引入对他们造成了很大的负担，频繁出现子模块代码没有更新到最新状态，或者更新出错的情况。</p>
<h2 id="简单解决方案">简单解决方案</h2>
<p>经过考虑，我们决定对子模块的使用做些简化：</p>
<ol>
<li>所有子模块不再根据父工程的 commit id 更新代码，而是直接更新到主工程所依赖的分支的最新一次提交；</li>
<li>由于 commit id 不再用来更新代码，因此可以禁止直接提交子模块的 commit id ，避免出现只提交子模块 commit id 而忘记提交子模块代码的情况。</li>
</ol>
<h3 id="造个轮子：fmanager">造个轮子：fmanager</h3>
<p>为了达到第一个目的，我们自己写了个专用的管理工具 fmanager 。目前它一共支持如下几个功能，并且在不断扩展中：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fmanager pull      <span class="comment">#更新当前分支的主工程，并将每个子模块的代码更新到指定分支的最新状态。</span></div><div class="line">fmanager update    <span class="comment"># ./fmanager pull 的别名</span></div><div class="line">fmanager checkout &lt;分支名&gt; <span class="comment"># 切换到某个主工程分支，同时完成子模块的代码切换。</span></div><div class="line">fmanager submodule update &lt;模块名列表&gt; <span class="comment"># 更新指定子模块的代码到所处分支的最新状态。</span></div><div class="line">fmanager showbranch <span class="comment"># 查看当前主工程和所有子模块的所属分支。</span></div><div class="line">fmanager status <span class="comment"># 查看当前主工程和所有子模块的修改状态。</span></div><div class="line">fmanager log <span class="comment"># 查看当前主工程和所有子模块的当前分支/标签和最新提交。</span></div><div class="line">fmanager cherry-pick &lt;commit id&gt; &lt;分支列表&gt; cherry-pick 某个 commit id 到分支列表。</div><div class="line">fmanager cherry-push &lt;commit id&gt; &lt;分支列表&gt; cherry-pick 某个 commit id 到分支列表，并推送这些分支。</div></pre></td></tr></table></figure></p>
<p>这个工具直接内置在主工程的根路径，并且接受一个 json 格式的配置文件 modules.json ，该配置文件大概长这样：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">sub</span>": <span class="value">{        </span></div><div class="line">        "<span class="attribute">app</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">common</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fmall</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">framework</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"jilin"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fund</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">hybrid</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">messagecenter</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">property</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">safetykeyboardnew</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">scores</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span>,</div><div class="line">        "<span class="attribute">thirdparty</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"jilin"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFModules</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"jilin"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFCommon</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master_dev"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/node_modules</span>": <span class="value">{"<span class="attribute">branch</span>": <span class="value"><span class="string">"master"</span></span>}</span></div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>不同的主工程分支，modules.json 配置文件的内容允许不同，且每个模块都允许指定不同分支。对于嵌套子模块，我们通过加上父模块前缀来做标识。</p>
<p>当使用 fmanager 切换分支时，fmanager 将首先完成主工程的分支切换，然后读入该分支下的 modules.json ，再根据 modules.json 的配置逐个切换到各自模块的指定分支。</p>
<p>使用 fmanager 更新工程和切换分支相似，只是顺便完成了子模块的 git pull 操作。</p>
<p>这样的子模块管理策略看起来有点“激进”：永远使用分支最新的代码状态。为了保证稳定性，我们还支持在 modules.json 中使用 tag ：</p>
<p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">sub</span>": <span class="value">{        </span></div><div class="line">        "<span class="attribute">app</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">common</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fmall</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">framework</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"jilin-2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">fund</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">hybrid</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">messagecenter</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">property</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">safetykeyboardnew</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">scores</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">thirdparty</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"jilin-2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFModules</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"jilin-2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/HFCommon</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span>,</div><div class="line">        "<span class="attribute">react_native/node_modules</span>": <span class="value">{"<span class="attribute">tag</span>": <span class="value"><span class="string">"2.0.1"</span></span>}</span></div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>在项目后期，可以通过引用标签来保持整个工程的稳定性。同时，负责打包的机器每次打包时，都会顺便执行 <code>fmanager log</code> 产出一份包含当前所有子模块所处分支和最新一次 commit 的记录，方便追查问题。</p>
<h3 id="加个钩子：pre-commit">加个钩子：pre-commit</h3>
<p>要达到第二个目的，可以通过编写本地钩子 pre-commit 来实现。该钩子可以用来在 commit 前进行一些检查工作，并拒绝一些不合法的提交。针对我们的需求，可以写一个脚本检查提交中是否包含 commit id 的修改，如果有，就先重置那些修改再提交剩下的内容。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys,os,io,subprocess,json,re</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line">error_color = <span class="string">"\033[31m"</span></div><div class="line">warning_color = <span class="string">"\033[33m"</span></div><div class="line">normal_color = <span class="string">"\033[0m"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRootPath</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 找到工程根目录</span></div><div class="line">    git_path = <span class="string">".git"</span></div><div class="line">    pwd = os.getcwd()</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">if</span> os.path.exists(os.path.join(pwd, git_path)) <span class="keyword">and</span> os.path.isdir(os.path.join(pwd, git_path)):</div><div class="line">            <span class="keyword">return</span> os.path.abspath(pwd)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> (os.path.exists(os.path.join(pwd, <span class="string">"../"</span>))):</div><div class="line">                pwd = os.path.join(pwd, <span class="string">"../"</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSubmoduleNameAndPath</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''获取子模块信息'''</span></div><div class="line">    root_path = getRootPath()</div><div class="line">    <span class="keyword">if</span> root_path != <span class="keyword">None</span>:</div><div class="line">        output = subprocess.Popen([<span class="string">'git submodule --quiet foreach \'echo $toplevel/$path\''</span>], stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">        oc = output.communicate() <span class="comment">#取出output中的字符串</span></div><div class="line">        submodule_dict = {}</div><div class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> oc:</div><div class="line">            <span class="keyword">if</span> element != <span class="keyword">None</span>:</div><div class="line">                sb_list = element.split(<span class="string">'\n'</span>)</div><div class="line">                <span class="keyword">for</span> elem <span class="keyword">in</span> sb_list:</div><div class="line">                    <span class="keyword">if</span> (elem != <span class="string">""</span>):</div><div class="line">                        path = elem.strip()</div><div class="line">                        name = path.replace(root_path+<span class="string">"/"</span>, <span class="string">''</span>)</div><div class="line">                        submodule_dict[name] = path</div><div class="line">        <span class="keyword">return</span> submodule_dict</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(warning_color)</div><div class="line">        print(<span class="string">'''</span></div><div class="line">警告：检测到当前工程不是 .git 工程，文件目录可能已经损坏！</div><div class="line">''')</div><div class="line">        print(normal_color)</div><div class="line">        os.chdir(pwd)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSubModule</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''防止提交子模块的 commit id'''</span></div><div class="line">    pwd = os.getcwd()</div><div class="line">    submodule_dict = getSubmoduleNameAndPath()</div><div class="line">    <span class="comment"># 判断每个子模块是否修改了commit id</span></div><div class="line">    <span class="keyword">for</span> module_name, module_path <span class="keyword">in</span> submodule_dict.items():</div><div class="line">        os.chdir(os.path.join(module_path, <span class="string">".."</span>))</div><div class="line">        module_basepath = os.path.basename(module_path)</div><div class="line">        output = subprocess.Popen([<span class="string">'git diff --cached '</span> + module_basepath], stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">        oc = output.communicate()[<span class="number">0</span>]</div><div class="line">        <span class="comment"># 判断是否提交了 commit id 修改</span></div><div class="line">        <span class="keyword">if</span> oc.find(<span class="string">"-Subproject commit"</span>) &gt;= <span class="number">0</span> <span class="keyword">and</span> oc.find(<span class="string">"+Subproject commit"</span>) &gt;= <span class="number">0</span>:</div><div class="line">            print(warning_color)</div><div class="line">            print(<span class="string">'''</span></div><div class="line">检查到子模块 %s 提交了 commit id，</div><div class="line">我们强烈建议**不要**提交子模块的 commit id 改动！该 commit id 将被跳过提交。</div><div class="line">''' % module_name)</div><div class="line">            print(normal_color)</div><div class="line">            res = subprocess.call([<span class="string">'git'</span>, <span class="string">'reset'</span>, <span class="string">'HEAD'</span>, module_basepath])</div><div class="line">            <span class="keyword">if</span> res == <span class="number">0</span>:</div><div class="line">                print(<span class="string">"子模块 "</span> + module_name + <span class="string">" 的 commit id 重置成功！"</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(error_color)</div><div class="line">                print(<span class="string">"子模块 "</span> + module_name + <span class="string">" 的 commit id 重置失败！"</span>)</div><div class="line">                print(normal_color)</div><div class="line">                os.chdir(pwd)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    os.chdir(pwd)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> checkSubModule():</div><div class="line">    exit(<span class="number">0</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    exit(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>钩子编写完，还得解决安装问题。所谓“安装”，即是将 pre-commit 复制到根目录中的 .git/hooks 目录中，并确保可执行。听起来好像很简单，实则不然：</p>
<ol>
<li>.git 里的内容并不会随仓库一同提交。需要另外想其他办法让团队其他人“上钩”，并保持钩子的同步。</li>
<li>父工程的钩子不会被继承到子模块，也就是说，如果你希望一个钩子在父工程和多个子模块中用到，那你需要为每个仓库都添加一次钩子。</li>
</ol>
<p>fmanager 帮我们解决了第一个问题，由于我们用自己造的 fmanager 来更新工程代码，因此可以让 fmanager 在更新的时候自动完成钩子的安装。</p>
<p>而通过观察 .git 的文件结构，我发现每个子模块在 .git/modules 中各自拥有一个专属的数据目录。这个数据目录下也有一个 hooks 目录，该子模块的钩子就应该安装到这里。
如果有嵌套子模块，父模块的数据目录下还会有 modules 目录，并且可以一直这么嵌套下去。</p>
<p>解决这两个问题后，钩子顺利安装到了每个团队成员的仓库中，并且还能时刻保持同步。一旦有人试图提交 commit id 的修改，就会出现如下的错误：</p>
<p><img src="/images/enterprise-class-git-version-control-1/pre-commit.png" alt="利用 pre-commit 钩子实现跳过 commit id 提交"></p>
<p>而其他内容的修改依然可以正常提交。</p>
<p>pre-commit 钩子非常有用，我们陆续又添加了诸如代码风格检查、json 合法性检查、commit 邮箱合法性检查等测试。</p>
<h2 id="总结">总结</h2>
<p>通过本文的方法，我们对子模块的使用进行了简化，避免了由于漏提交子模块 commit id 或子模块代码导致无法更新或更新错误的情况。这么做看起来好像完全抛弃了子模块的 commit id ，但在下面的文章中，我将介绍一种自动更新子模块 commit id 的方法，该方法将利用 commit id 自动触发针对子模块的持续集成测试。</p>
]]></content>
    <category scheme="http://hahack.com/tags/Git/" term="Git"/>
    <category scheme="http://hahack.com/tags/Python/" term="Python"/>
    <category scheme="http://hahack.com/categories/work/" term="work"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[学习 React Native for Android：React 基础]]></title>
    <link href="http://hahack.com/codes/learn-react-native-for-android-02/"/>
    <id>http://hahack.com/codes/learn-react-native-for-android-02/</id>
    <published>2015-10-18T17:49:34.000Z</published>
    <updated>2018-07-06T17:27:30.013Z</updated>
    <content type="html"><![CDATA[<p>React Native 主张用 React 的开发思维来编写 UI 层。因此在学习 React-Native 之前，了解基本的 React 的语法和存在的坑会对今后 React Native 的开发大有裨益。</p>
<p>本文将从一个简单的例子开始，逐步完善我们的程序。在这个过程中，我们将一步步探讨如何用 React 来开发网页应用，以及需要注意的陷阱。与其他教程不同，本文将采用类似 <a href="http://zedshaw.com/" target="_blank" rel="external">Zed A. Shaw</a> 的 <a href="http://learncodethehardway.org/" target="_blank" rel="external">《Learn Code the Hard Way》</a> 系列的案例驱动的形式，从例子开始着手。我相信，掌握一门新技术最好的方法就是自己动手。因此，我并不打算面面俱到的列举所有关于 React 的内容，而更倾向于担任一个引路人的角色：把读者们带到 React 花园的门前，然后让读者们在 React 花园里来一场自助游。为了让这个旅途更加有收获，我会在每节内容的最后安排几个练习，并在最后分享一些值得深入学习的文章和教程。</p>
<a id="more"></a>
<h2 id="练习0：准备工作">练习0：准备工作</h2>
<p>下载 React 的 <a href="https://facebook.github.io/react/downloads/react-0.14.0.zip" target="_blank" rel="external">Starter Kit 0.14.0</a> 并解压。得到的目录结构长这样：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">react-0.14.0/       # React 根目录</div><div class="line">|</div><div class="line">+--  build/         # React 的 js 代码</div><div class="line">|</div><div class="line">+--  examples/      # 官方提供的例子</div><div class="line">|     |</div><div class="line">|     +---- basic/</div><div class="line">|     |</div><div class="line">|     +---- basic-click-counter/</div><div class="line">|     |</div><div class="line">|     +---- ...</div><div class="line">|</div><div class="line">+--  README.md      # 说明文档</div></pre></td></tr></table></figure></p>
<ul>
<li>build 目录存放的是 React 的 js 文件，我们编写的所有例子都会包含这个目录下的若干文件。</li>
<li>examples 目录包含了官方提供的例子。</li>
</ul>
<p>接下来我们需要启动一个简单的 HTTP 服务器方便我们本地预览我们的应用：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> react-<span class="number">0.14</span>.<span class="number">0</span></div><div class="line">$ python -m SimpleHTTPServer</div></pre></td></tr></table></figure></p>
<p>接下来可以用浏览器访问 <a href="http://localhost:8000/examples/basic/" target="_blank" rel="external">http://localhost:8000/examples/basic/</a> ，你将看到这样的页面：</p>
<p><img src="/images/learn-react-native-for-android-02/basic-example.png" alt=""></p>
<p>该页面会统计用户自打开这个页面开始经过的时间。</p>
<p>用 Atom 载入整个目录。启动 Atom ，点击 【File】-&gt; 【Add Project Folder】 菜单项，选择 react-0.14.0 目录所在文件夹。</p>
<p>在根目录下创建一个新的文件夹 test ，在 test 目录下新建页面文件 index.html 。</p>
<p><img src="/images/learn-react-native-for-android-02/new-file.png" alt=""></p>
<p>本文后面的大部分练习都只涉及对这个文件进行修改。</p>
<h4 id="扩展练习">扩展练习</h4>
<ol>
<li>访问 examples 目录里的每个例子，感受下用 React 写的网页应用。</li>
<li>Atom + Nuclide 是 Facebook 推荐的 React IDE 。本系列也将一直使用它学习 React / React Native。熟悉下 Atom 的使用，并选择安装我在<a href="/codes/learn-react-native-for-android-02">上篇博文</a>中推荐的一些插件。</li>
<li>试试使用 <a href="https://atom.io/packages/browser-plus" target="_blank" rel="external">browser-plus</a> 插件在 Atom 中直接预览页面。</li>
</ol>
<h2 id="练习1：hello-world">练习1：Hello World</h2>
<p>按照惯例，让我们先来实现一个简单的 Hello World 程序。在 index.html 里敲入下面的代码：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  ReactDOM.render(</div><div class="line">    React.createElement(<span class="string">"h1"</span>, <span class="literal">null</span>, <span class="string">"Hello World!"</span>),</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</div><div class="line">  );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们先看看这个页面的效果。访问 <a href="http://localhost:8000/test/" target="_blank" rel="external">http://localhost:8000/test/</a> ，你将看到这样的界面：</p>
<p><img src="/images/learn-react-native-for-android-02/hello-world.png" alt=""></p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>如果您的 build 文件夹中没有 react-dom.js 文件，您可能下载的是 0.13 或者更早的版本，建议下载使用 <a href="https://facebook.github.io/react/downloads/react-0.14.0.zip" target="_blank" rel="external">Starter Kit 0.14.0</a> 。</p>
</div></p>
<h4 id="代码解读">代码解读</h4>
<ul>
<li>程序的第 4 行和第 5 行引用了 build 目录下的 react.js 和 react-dom.js 文件。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能。</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>第 10 行调用了 <code>ReactDOM.render</code> 函数：</li>
</ul>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactComponent render(</div><div class="line">  ReactElement element,</div><div class="line">  DOMElement container,</div><div class="line">  [<span class="function"><span class="keyword">function</span> <span class="title">callback</span>]</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>这个函数用来将一个 React 元素 <code>element</code> 渲染到 <code>container</code> 指定的 DOM 中。最后的一个参数 <code>callback</code> 是可选的，用于指定该组件绘制或更新完成后需要执行的回调。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>某些教程会使用 <code>React.render</code> 来渲染页面，这个函数已经过时。建议使用新的 <code>ReactDOM.render</code> 函数。</p>
</div></p>
<p>在我们的例子中，我们用 <code>React.createElement</code> 创建了一个内容为 “Hello World!” 的一级标题。当页面启动时，这个一级标题会被插入到 id 为 <code>container</code> 的 div 容器中。</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactElement createElement(</div><div class="line">  string/ReactClass type,</div><div class="line">  [object props],</div><div class="line">  [children ...]</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p><code>React.createElement</code> 函数的第一个参数是元素类型，可以是 <code>h1</code> 、<code>div</code> 等 HTML 元素，也可以是 ReactClass 类型（后面会提到），接下来是两个可选参数 <code>props</code> 和 <code>children</code> ，分别表示要赋予的属性和子元素。</p>
<p>打开浏览器的调试工具（例如 Chrome 的审查工具），可以看到带有 “Hello World!” 文字信息的一级标题被插入到了 <code>container</code> 这个 div 容器中：</p>
<p><img src="/images/learn-react-native-for-android-02/hello-world-dev.png" alt=""></p>
<h4 id="拓展训练">拓展训练</h4>
<ol>
<li>试试将 “Hello World!” 这句话改成其他内容，刷新下页面，看看内容有没有变。</li>
<li><code>React.DOM</code> 是对 <code>React.createElement</code> 的封装和简化。查下 <code>React.DOM</code> 的<a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">文档</a>，试试将代码用 <code>React.createDOM</code> 重写。</li>
</ol>
<h2 id="练习2：jsx">练习2：JSX</h2>
<p>在练习1中我们使用 React 提供的 <code>render()</code> 函数实现了向指定 DOM 中插入内容的简单功能。但这段文本内容是 Hard-Code 的，没有数据绑定的过程，不利于数据和页面模板的分离。</p>
<p>另一个很糟糕的问题是，像 <code>React.createElement</code>  这类创建元素的方法不如直接编写 HTML 直观。举个例子，假设现在我们需要在 “Hello World!” 标题和 <code>container</code> 容器中增加一层：把 “Hello World!” 放入一个名为 <code>greeting</code> 的 div 容器，再把这个 <code>greeting</code> 容器放入 <code>container</code> 容器里。从页面层级来看，关系应该是这样的：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+-------------------------+</div><div class="line">|        container        |</div><div class="line">|  +-------------------+  |</div><div class="line">|  |                   |  |</div><div class="line">|  |      greeting     |  |</div><div class="line">|  |  +-------------+  |  |</div><div class="line">|  |  |Hello World! |  |  |</div><div class="line">|  |  +-------------+  |  |</div><div class="line">|  |                   |  |</div><div class="line">|  +-------------------+  |</div><div class="line">|                         |</div><div class="line">+-------------------------+</div></pre></td></tr></table></figure></p>
<p>如果用 <code>React.createElement</code> 来实现 <code>greeting</code> 和 “Hello World!” 标题的动态创建，代码如下：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  ReactDOM.render(</div><div class="line">    React.createElement(<span class="string">"div"</span>, { id: <span class="string">"greeting"</span> },</div><div class="line">        React.createElement(<span class="string">"h1"</span>, <span class="literal">null</span>, <span class="string">"Hello World!"</span>)</div><div class="line">  ), <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>));</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到，仅仅是增加一层嵌套，就需要再写一层 <code>React.createElement</code> 。想象一下，当日后我们的项目变得越来越复杂时，我们的代码里可能会有一堆的 <code>Reacte.createElement</code> 嵌套，代码的可读性越来越差，甚至难以继续维护。</p>
<p>JSX 就是为了解决上面的问题而设计出来的一套扩展语法，它的特点是在 JavaScript 中加入了类 XML 语法特性。我们在开发网页应用的时候，不再需要调用无趣的 <code>Reacte.createElement</code> 来创建页面元素，而可以写 HTML 页面一样完成页面的编写。</p>
<p><div class="alert alert-info"><i class="fa fa-info"></i>  <p>JSX 的取名含义应该就是 <strong>JS</strong> + <strong>X</strong>ML 。</p>
</div></p>
<p>要使用 JSX ，我们需要对我们的代码做一些改造。将 <code>ReactDOM.render</code> 的内容改成：</p>
<p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</div><div class="line">    document.getElementById('container')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>不过这段代码并不能直接被浏览器渲染，我们需要将它保存到另一个文件 main.jsx 中：</p>
<p><img src="/images/learn-react-native-for-android-02/main-jsx.png" alt=""></p>
<p>完成后使用 <code>babel</code> 命令将 main.jsx 转成浏览器支持的 JavaScript 代码：</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-cli babel-present-react  <span class="comment"># 安装 babel</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">'{ "presets": [ "react" ],  "plugins": []}'</span>  &gt; ~/.babelrc  <span class="comment"># 将 react 插件添加进 .babelrc</span></div><div class="line">$ <span class="built_in">cd</span> test</div><div class="line">$ babel main.jsx -o main.js</div></pre></td></tr></table></figure></p>
<p>完成后会在当前目录下生成 main.js 文件，我们打开它看看里面的内容：</p>
<p><img src="/images/learn-react-native-for-android-02/main-js.png" alt=""></p>
<p>可以和我们在上一节写的JavaScript代码比较下，是不是一模一样？现在可以在我们页面代码中把个脚本文件引用进来：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"main.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="代码解读-v2">代码解读</h4>
<p>如前面所说，JSX 其实就是在 JS 的基础上加入了类 XML 的语法。HTML 的标签直接写在 JavaScript 代码中，不加任何引号，这就是 JSX 的语法。它允许 HTML 与 JavaScript 的混写。纯 JS 的代码很难看出页面的逻辑，而加入了 HTML 的标签支持后，程序的可读性就大大提高了。</p>
<p>为了更详细的说明 JSX 语法的特点，我们对 main.jsx 的代码做点修改，将 “Hello World!” 字符串提取出来作为一个变量 <code>greeting</code> 。</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>;</div><div class="line">ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>{greeting}<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</div><div class="line">    document.getElementById('container')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>上面代码体现了 JSX 的基本语法规则：遇到 HTML 标签（以 <code>&lt;</code> 开头），就用 HTML 规则解析；遇到代码块（以 <code>{</code> 开头），就用 JavaScript 规则解析。我们再次用 babel 转换成 JS 代码，结果如下：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="pi">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>;</div><div class="line">ReactDOM.render(React.createElement(</div><div class="line">        <span class="string">"div"</span>,</div><div class="line">        { id: <span class="string">"greeting"</span> },</div><div class="line">        React.createElement(</div><div class="line">                <span class="string">"h1"</span>,</div><div class="line">                <span class="literal">null</span>,</div><div class="line">                greeting</div><div class="line">        )</div><div class="line">), <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>));</div></pre></td></tr></table></figure></p>
<h4 id="即时渲染-jsx">即时渲染 JSX</h4>
<p>由于是一门扩展语言，JSX 的代码并不能直接被浏览器渲染，所以我们不能直接在代码中引用 JSX 代码，而应该先用 babel 工具转换成 JavaScript 再引用。为了方便调试，我们可以使用 babel 中的 browser.js 来让浏览器支持渲染 JSX 。browser.js 属于 babel-core ，先安装 babel-core 。要注意的是 Babel 从 6.0 开始不再提供 browser.js ，因此我们需要安装版本 5 的 babel-core ：</p>
<p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install babel-core<span class="variable">@5</span></div></pre></td></tr></table></figure></p>
<p>然后将 index.html 修改成：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>;</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>{greeting}<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>,</div><div class="line">    document.getElementById('container')</div><div class="line">  );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>程序的第 6 行添加了对 browser.js 的引用，第 10 行开始直接加入 JSX 代码。需要注意的是脚本的类型需要为 <code>text/babel</code> ，用于告诉浏览器这段代码是 JSX 代码，需要使用 browser.js 渲染。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <p>browser.js 的原理其实是在页面运行时动态将 JSX 转成 JavaScript 再渲染，这个过程比较耗时。实际发布项目时依然建议使用 babel 将 JSX 预转换成 JavaScript 。</p>
</div></p>
<h4 id="扩展练习-v2">扩展练习</h4>
<ol>
<li>试试修改 JSX 代码中 HTML 中的部分，看看会有什么变化；</li>
<li>试试修改 JSX 代码中 JavaScript 的部分，看看 JavaScript 的一些常见语法特性是否能够被支持。例如将第 14 行改为 <code>&lt;h1&gt;{&quot;Hello &quot; + &quot;World!&quot;}&lt;/h1&gt;</code> 。</li>
<li>试试在 JSX 代码中 JavaScript 的部分写一个 if-else ，看看能否像期望的那样工作。如果不能，需要怎么修改使它工作？（提示：参考 <a href="http://facebook.github.io/react/tips/if-else-in-JSX.html" target="_blank" rel="external">If Else in JSX</a>）</li>
</ol>
<h2 id="练习3：组件和属性">练习3：组件和属性</h2>
<p>为了更好的将页面模块化，React 使用组件来表示每个页面模块。组件可以像其他 HTML 标签一样使用 <code>ReactDOM.render</code> 直接绘制。组件可以包含属性和状态。</p>
<ul>
<li><strong>属性（props）</strong>：类似 HTML 中的属性，在绘制的时候可以直接在标签中添加属性，然后在组件中通过 <code>this.props.属性名</code> 获取。</li>
<li><strong>状态（state）</strong>：维护组件内部的状态。一个组件就是一个状态机。React 把用户界面当作简单状态机，把用户界面想像成拥有不同状态然后渲染这些状态。在 React 中，一旦组件的 state 发生变化，用户界面有改动的部分就会被重绘。组件的状态通常在组件的内部函数 <code>getInitialState()</code> 中声明，使用 <code>setState()</code> 函数更新值，并通过 <code>this.state.状态名</code> 来获取值。</li>
</ul>
<p>我们将在下一个练习了解状态的使用。现在先让我们把焦点放在<strong>属性</strong>上。将 main.html 改写成：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Greeting = React.createClass({</div><div class="line">      render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="title">h1</span>&gt;</span>{this.props.word}<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        );</div><div class="line">      }</div><div class="line">    });</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">      <span class="tag">&lt;<span class="title">Greeting</span> <span class="attribute">word</span>=<span class="value">"Hello World!"</span>/&gt;</span>,</div><div class="line">      document.getElementById('container')</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="代码解读-v3">代码解读</h4>
<p>在上面的代码中，我们使用 <code>React.createClass()</code> 来创建一个组件实例。JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。每个组件通常都会有一个 <code>render()</code> 函数，用于指定当调用 <code>ReactDOM.render()</code> 渲染该组件时的方式。该函数会使用 <code>return</code> 语句返回一个页面节点。在我们的例子中，我们将问候语作为一个 word 属性，在 Greeting 组件中通过 <code>this.props.word</code> 来获取，并放入一个一级标题中，再在外层用一个 id 为 “greeting” 的 <code>div</code> 包含。</p>
<p><div class="alert alert-warning"><i class="fa fa-bell"></i>  <ul>
<li>官方建议组件的取名以大写字母开头，以区分 HTML 标签。</li>
<li>目前， 一个 component 的 render，只能返回一个节点。如果你需要返回一堆 div ， 那你必须将你的组件用 一个div 或 span 或任何其他的组件包裹。</li>
</ul>
</div></p>
<p>在 <code>ReactDOM.render()</code> 函数中，我们可以像使用其他 HTML 标签一样使用自定义的组件，并传入一个自定义属性 <code>word</code> 。</p>
<p>经过这么修改，我们把原本 Hard-Code 的 “Hello World!” 字符串改成通过组件属性来传递，这个过程就完成了视图和数据的 <strong>绑定</strong> 。</p>
<p>现在我们使用 <a href="https://github.com/facebook/react-devtools/" target="_blank" rel="external">react-devtool</a> 来调试 React 程序，看看属性是如何被传入到组件里的。如果你的浏览器还没有装这个插件，现在就装上它（<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="external">Chrome 版</a> | <a href="https://addons.mozilla.org/firefox/addon/react-devtools/" target="_blank" rel="external">Firefox 版</a>）。</p>
<p>打开浏览器的调试工具，点击 React 选项卡，如图所示：</p>
<p><img src="/images/learn-react-native-for-android-02/react-devtool.png" alt=""></p>
<p>调试工具左侧的窗口展示了 Greeting 组件完成数据绑定后的结果，右边的窗口展示了 Greeting 组件的所有属性，目前只有一个 <code>word</code> 属性。我们在左边窗口的代码首行单击鼠标右键，可以打开一个菜单。选择 【Show Source】 可以跳进 Greeting 的源码，选择 【Show in Elements Pane】 可以跳进 HTML 元素面板中，如下图所示：</p>
<p><img src="/images/learn-react-native-for-android-02/invisible-prop.png" alt=""></p>
<h4 id="扩展练习-v3">扩展练习</h4>
<ol>
<li>试试在组件的 <code>render</code> 函数中返回多个根节点，看看会不会报错。</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/docs/reusable-components.html#prop-validation" target="_blank" rel="external">属性验证</a>的内容，编写对 <code>word</code> 属性的类型验证，并尝试将 word 的值修改为数值或者其他类型看看能否通过验证。</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/docs/reusable-components.html#default-prop-values" target="_blank" rel="external">属性默认值</a> 的内容，为 <code>word</code> 属性增加一个默认值 “Hello World” 。</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/docs/jsx-spread.html#spread-attributes" target="_blank" rel="external">扩展属性(Spread Attributes)</a>的内容，为 Greeting 添加一个新属性 <code>date</code> ，并使用 <code>{..props}</code> 传入这两个属性的值。</li>
</ol>
<h2 id="练习4：展示一组数据">练习4：展示一组数据</h2>
<p>我们继续完善我们的例子。现在我们希望能够传入一组人的名字，然后让 Greeting 组件向这些人问好。</p>
<p>将 index.html 改为：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Greeting = React.createClass({</div><div class="line">      render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">ol</span> <span class="attribute">id</span>=<span class="value">"greeting"</span>&gt;</span></span></div><div class="line">          {</div><div class="line">            this.props.names.map(function (name) {</div><div class="line">              return <span class="tag">&lt;<span class="title">li</span>&gt;</span>Hello, {name}!<span class="tag">&lt;/<span class="title">li</span>&gt;</span>;</div><div class="line">            })</div><div class="line">          }</div><div class="line">          &lt;<span class="regexp">/ol&gt;</span></div><div class="line">        );</div><div class="line">      }</div><div class="line">    });</div><div class="line"></div><div class="line">    var names = ['Alice', 'Bob', 'Cindy'];</div><div class="line">    ReactDOM.render(</div><div class="line">      &lt;Greeting names={names}/&gt;,</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>刷新下浏览器，效果如下：</p>
<p><img src="/images/learn-react-native-for-android-02/props-array.png" alt=""></p>
<h4 id="代码解读-v4">代码解读</h4>
<p>让我们先看看 <code>ReactDOM.render()</code> 部分：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Cindy'</span>];</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="title">Greeting</span> <span class="attribute">names</span>=<span class="value">{names}</span>/&gt;</span>,</span></div><div class="line">  document.getElementById('container')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>这一部分的内容和之前的区别不大，唯一的区别就是 <code>names</code> 属性的取值通过传入一个变量 <code>names</code> 来完成，由于是一个 JavaScript 的列表型变量，因此，<code>names</code> 的两端需要用 <code>{}</code> 包围 。</p>
<p>我们再看看 <code>Greeting</code> 组件的实现：</p>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var Greeting = React.createClass({</div><div class="line">  render: function() {</div><div class="line">    return (</div><div class="line">      &lt;ol id="greeting"&gt;</div><div class="line">      {</div><div class="line">        this.props.names.map(function (name) {</div><div class="line">          return &lt;li&gt;Hello, {name}!&lt;/li&gt;;</div><div class="line">        })</div><div class="line">      }</div><div class="line">      &lt;/ol&gt;</div><div class="line">    );</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure></p>
<p>在程序的第 6 行，我们使用 JavaScript 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external"><code>Array.prototype.map()</code></a> 操作将 <code>names</code> 数组的每个值 <code>name</code> 一个个使用 <code>&lt;li&gt;Hello, {name}&lt;/li&gt;</code> 的形式重新创建，得到一个新的数组再返回给 <code>ReactDOM.render()</code> 函数绘制。注意 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external"><code>Array.prototype.map()</code></a> 操作是一个 JavaScript 操作，所以必须使用 <code>{}</code> 包围。</p>
<p>打开 React 调试工具，可以看到 names 属性变成了一个列表：</p>
<p><img src="/images/learn-react-native-for-android-02/props-array-dev.png" alt=""></p>
<p>注意到调试工具的终端窗口出现了一个警告：</p>
<p><img src="/images/learn-react-native-for-android-02/key-prop-warning.png" alt=""></p>
<p>为了解释这个问题，我们先来了解一下虚拟 DOM 。</p>
<p>HTML 或 XML 文档是使用 DOM （Document Object Model，文档对象模型）来表示和处理的。DOM 技术使得用户页面可以动态地变化，如可以动态地显示或隐藏一个元素，改变它们的属性，增加一个元素等，使得页面的交互性大大地增强。</p>
<p>然而，DOM 有一个致命的缺点——慢。举个例子，假如我们需要在某个节点动态插入一个元素，那就需要先定位到那个节点再进行插入。假如要插入多个元素，那么节点的定位和插入的时间就要成倍增加。对于一个复杂的页面，整个过程可能非常耗时。</p>
<p>为了提高页面元素操纵的效率，React 提出了虚拟 DOM 的技术：组件在插入文档之前，并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，因此称为虚拟 DOM 。与 DOM 相比，虚拟 DOM 放弃了定位和修改节点的过程，而是通过一种称为 DOM diff 的算法找出中这个虚拟 DOM 中发生改动的部分，然后对这些部分进行整体刷新。这样，多次的节点定位和修改就合并成了一次组件的整体刷新。这就是为什么虚拟 DOM 的速度要比 DOM 快的重要原因。</p>
<p>由上也可看出，虚拟 DOM 技术依赖于 DOM diff 算法的效率和准确性。而这个算法依赖于以下两个假设：</p>
<ol>
<li>组件的 DOM 是相对稳定的。虚拟 DOM 在任何一个时刻的快照，和短时间内另一时刻的快照并不会有太大的变化，这样就很容易通过比较找出发生改动的部分。</li>
<li>类型相同的兄弟节点可以被唯一的标识。如果同类型的兄弟节点没有唯一的标识，那么不同时刻的虚拟 DOM 在同一级的 Diff 结果可能会不稳定。React 允许使用 <code>key</code> 属性来标识节点。</li>
</ol>
<p>列表的每个子元素就是类型相同的兄弟节点，如果列表的子元素不加上 <code>key</code> 属性标识，当列表的元素发生改变（例如有个新元素插入到头部），有可能会影响 DOM diff 的判断，从而影响算法的效率和准确性。</p>
<h4 id="拓展训练-v2">拓展训练</h4>
<ol>
<li>对于我们这个例子，如何修改代码来消除这个警告？</li>
<li>阅读官方文档有关<a href="http://facebook.github.io/react/tips/children-props-type.html" target="_blank" rel="external"><code>this.props.children</code></a>的内容，尝试使用 <code>this.props.children</code> 取代例子中的 <code>this.props.names</code> 展示数据。</li>
</ol>
<h2 id="练习5：增加交互">练习5：增加交互</h2>
<p>到目前为止 Greeting 组件的 <code>name</code> 属性的值都是在代码中事先写好的，程序运行的过程中没法再改变。现在我们对这个例子做些修改，让它在运行时接受我们的输入，并生成问候语。</p>
<p>修改 index.html 代码如下：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Greeting = React.createClass({</div><div class="line">      getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> {</div><div class="line">          name_list : []</div><div class="line">        };</div><div class="line">      },</div><div class="line">      render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="title">ol</span>&gt;</span></div><div class="line">          {</div><div class="line">            this.state.name_list.map(function (name) {</div><div class="line">              return <span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">{name}</span>&gt;</span>Hello {name}!<span class="tag">&lt;/<span class="title">li</span>&gt;</span>;</div><div class="line">            })</div><div class="line">          }</div><div class="line">          &lt;<span class="regexp">/ol&gt;</span></div><div class="line">          &lt;input ref="name_input" placeholder="Input a name here" type="text"/&gt;</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>  <span class="attribute">onClick</span>=<span class="value">{this.handleClick}</span> /&gt;</span>          </span></div><div class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        );</div><div class="line">      },</div><div class="line">      handleClick: function(event) {</div><div class="line">        var names = this.state.name_list;</div><div class="line">        var input_name = this.refs.name_input.value;</div><div class="line">        names.push(input_name);</div><div class="line">        this.setState({name_list: names});</div><div class="line">        this.refs.name_input.value = "";</div><div class="line">      }</div><div class="line">    });</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">      <span class="tag">&lt;<span class="title">Greeting</span>/&gt;</span>,</div><div class="line">      document.getElementById('container')</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>刷新下浏览器，此时页面初始化时只有一个文本输入框和一个提交按钮：</p>
<p><img src="/images/learn-react-native-for-android-02/interactive-demo-init.png" alt=""></p>
<p>此时注意到调试工具中出现了一个新的 State 对象，该对象包含一个 0 元素的 name_list 列表。</p>
<p>往文本框中输入名字并点击提交按钮后，页面就会出现相应的问候语：</p>
<p><img src="/images/learn-react-native-for-android-02/interactive-demo.png" alt=""></p>
<p>此时调试工具中的 State 对象也发生了相应变化，name_list 中的元素会记录下用户输入的所有名字。</p>
<h4 id="代码解读-v5">代码解读</h4>
<p>在练习 3 中我们简单提过状态（state）。React 把用户界面当作简单状态机，把用户界面想像成拥有不同状态然后渲染这些状态。对于在代码中需要动态改变的数据，例如需要对用户输入、服务器请求或者时间变化等作出响应，这时就需要使用 state 。在我们的例子中，此时 Greeting 组件所需要渲染的名字列表是由用户输入的，所以应该将其改写成 state 。</p>
<ul>
<li>程序的第 12 ~ 16 行声明了一个 <code>name_list</code> 状态并初始化为一个 0 元素的空列表（<code>[]</code>）。</li>
</ul>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    name_list : []</div><div class="line">  };</div><div class="line">},</div></pre></td></tr></table></figure></p>
<p>在使用状态的组件中，这个函数通常是必须编写的。否则会报 “Cannot read property ‘name_list’ of null” 错误。</p>
<ul>
<li>程序的第 27 ~ 28 行增加了两个页面表单元素，用于接收用户输入和设置响应按钮点击事件为实例的 <code>handleClick()</code> 函数。</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"name_input"</span> <span class="attribute">placeholder</span>=<span class="value">"Input a name here"</span> <span class="attribute">type</span>=<span class="value">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>  <span class="attribute">onClick</span>=<span class="value">{this.handleClick}</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>程序的第 32 ~ 37 行是对 <code>handleClick()</code> 函数的实现。需要格外注意的一点是获取输入框的内容的方式。</li>
</ul>
<p>我们前面已经说到，组件在插入页面前其实是在虚拟 DOM 中的表示，因此，在渲染成最终实际的 DOM 前，你不能通过直接访问组件内的元素来试图获取它的属性。对于我们的代码，Greeting 组件的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，我们在文本输入框添加了一个 ref 属性 <code>name_input</code>，然后通过 <code>this.refs.name_input</code> 就指向这个虚拟 DOM 的子节点。</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">handleClick: function(event) {</div><div class="line">  var names = this.state.name_list;</div><div class="line">  var input_name = this.refs.name_input.value;</div><div class="line">  names.push(input_name);</div><div class="line">  this.setState({name_list: names});</div><div class="line">  this.refs.name_input.value = "";</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>如果需要获取这个元素自身的真实 DOM 节点，可以使用 <a href="http://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode" target="_blank" rel="external"><code>ReactDOM.findDOMNode</code></a> 方法。该方法将在虚拟 DOM 插入文档以后才返回该元素实际的 DOM 节点。</p>
<h4 id="扩展练习-v4">扩展练习</h4>
<ol>
<li>阅读官方文档有关 <a href="http://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-components-should-have-state" target="_blank" rel="external">state 与 props 的选择</a>，了解什么时候要用 state ，什么时候要用 props 。</li>
<li>阅读官方文档有关 <a href="http://facebook.github.io/react/docs/events.html#supported-events" target="_blank" rel="external">React 支持的事件</a> ，为文本框增加一个按键事件：当按下回车键时触发提交。</li>
<li>这个页面有一个bug：当用户什么都不输入，直接点 sumbit 按钮时，页面将把空文本当成 <code>name</code> 的 state 传入给 Greeting 组件渲染。如下图所示：
<img src="/images/learn-react-native-for-android-02/interactive-demo-bug.png" alt="">
怎么对用户的输入进行验证？</li>
<li>利用 <code>ReactDOM.findDOMNode</code> 函数，增加一个按钮，当点击该按钮时，让输入框获得焦点。</li>
<li>为了给用户一个输入示例，我们可以给 input 增加一个 <code>value=&quot;Alice&quot;</code> 属性，让它在页面初始时给出一个示例。如下：</li>
</ol>
<p><img src="/images/learn-react-native-for-android-02/interactive-hint-bug.png" alt=""></p>
<p>但这引来了一个 bug ：输入框变成了不可变。怎么解决这个问题？（留意终端的错误警告信息）</p>
<h2 id="练习6：复合组件">练习6：复合组件</h2>
<p>通过观察我们上一节的程序，我们可以看到 Greeting 组件其实包含了两个部分：一个用来展示问候语的列表，以及一个输入名字的表单。从功能上看，这两个部分可以各自作为一个独立的组件 NameList 和 NameForm ，然后再组合成一个复合组件 GreetingWidget 。画图示意如下：</p>
<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+-----------------------------+</div><div class="line">|        GreetingWidget       |</div><div class="line">|                             |</div><div class="line">|  +-----------------------+  |</div><div class="line">|  |       NameList        |  |</div><div class="line">|  |                       |  |</div><div class="line">|  +-----------------------+  |</div><div class="line">|                             |</div><div class="line">|  +-----------------------+  |</div><div class="line">|  |       NameForm        |  |</div><div class="line">|  |                       |  |</div><div class="line">|  +-----------------------+  |</div><div class="line">+-----------------------------+</div></pre></td></tr></table></figure></p>
<p>这样的设计看起来好像很合理，然而在 React 中实现可能会遇到问题。<strong>在 React 里面，数据流是一个方向的：从拥有者到子节点</strong>。这是因为根据 <a href="http://en.wikipedia.org/wiki/Von_Neumann_architecture" target="_blank" rel="external">the Von Neumann model of computing</a> ，数据仅向一个方向传递。你可以认为它是<strong>单向数据绑定</strong>。因此， NameList 里头展示的数据必须由 GreetingWidget 以属性的方式传入，而这些属性又必须从 NameForm 获取。试图从子节点获取数据就违反了 React 单向数据绑定的原则。为了解决这个问题，我们可以以属性的形式传递一个回调函数 <code>onNameSubmit()</code> 给 NameForm 。当点击 NameForm 里的 submit 按钮时，就调用这个回调函数并将 name 数据作为参数交给回调函数处理。</p>
<p>代码如下：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../build/react-dom.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../node_modules/babel-core/browser.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> GreetingWidget = React.createClass({</div><div class="line">    getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> {</div><div class="line">        name_list : []</div><div class="line">      };</div><div class="line">    },</div><div class="line">    render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="title">NameList</span> <span class="attribute">name_list</span>=<span class="value">{this.state.name_list}</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">NameForm</span> <span class="attribute">onNameSubmit</span>=<span class="value">{this.handleNameSubmit}</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">      );</div><div class="line">    },</div><div class="line">    handleNameSubmit: function(name) {</div><div class="line">      var names = this.state.name_list;</div><div class="line">      names.push(name);</div><div class="line">      this.setState({name_list: names});</div><div class="line">    }</div><div class="line">  });</div><div class="line"></div><div class="line">  var NameForm = React.createClass({</div><div class="line">    handleSubmit: function(e) {</div><div class="line">      e.preventDefault();</div><div class="line">      var name = this.refs.name_input.value;</div><div class="line">      if (!name) {</div><div class="line">        return;</div><div class="line">      }</div><div class="line">      this.props.onNameSubmit(name);</div><div class="line">      this.refs.name_input.value = "";</div><div class="line">      return;</div><div class="line">    },</div><div class="line">    render: function() {</div><div class="line">      return (</div><div class="line">        <span class="tag">&lt;<span class="title">form</span> <span class="attribute">onSubmit</span>=<span class="value">{this.handleSubmit}</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"name_input"</span> <span class="attribute">placeholder</span>=<span class="value">"Input a name here"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">      );</div><div class="line">    }</div><div class="line">  });</div><div class="line"></div><div class="line">  var NameList = React.createClass({</div><div class="line">    render: function() {</div><div class="line">      return (</div><div class="line">        <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">ol</span>&gt;</span></div><div class="line">        {</div><div class="line">          this.props.name_list.map(function (name) {</div><div class="line">            return <span class="tag">&lt;<span class="title">li</span> <span class="attribute">key</span>=<span class="value">{name}</span>&gt;</span>Hello {name}!<span class="tag">&lt;/<span class="title">li</span>&gt;</span>;</div><div class="line">          })</div><div class="line">        }</div><div class="line">        &lt;<span class="regexp">/ol&gt;</span></div><div class="line">        &lt;/div&gt;</div><div class="line">      );</div><div class="line">    }</div><div class="line">  });</div><div class="line"></div><div class="line">  ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="title">GreetingWidget</span> /&gt;</span>,</span></div><div class="line">    document.getElementById('container')</div><div class="line">  );</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="代码解读-v6">代码解读</h4>
<ul>
<li>代码的第 11 ~ 30 行是 GreetingWidget 组件的实现，第 32 ~ 51 行是 NameForm 组件的实现。第 53 ~ 68 行是 NameList 的组件。在第 20 行和第 21 行， Greeting 组件分别包含了 NameForm 组件和 NameList 组件：</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">NameList</span> <span class="attribute">name_list</span>=<span class="value">{this.state.name_list}</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">NameForm</span> <span class="attribute">onNameSubmit</span>=<span class="value">{this.handleNameSubmit}</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，Greeting 组件将 <code>handleNameSubmit()</code> 函数作为一个属性传递给 NameForm 当做回调函数。</p>
<p><img src="/images/learn-react-native-for-android-02/multiple-comp-callback.png" alt=""></p>
<p>在上图所示的调试工具中也可以清楚的看到 GreetingWidget 在虚拟 DOM 中的内部结构。</p>
<ul>
<li>在 NameForm 的实现中，我们将表单的 <code>onSubmit</code> 事件指定使用该组件实例的 <code>handleSubmit()</code> 函数处理：</li>
</ul>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render: function() {</div><div class="line">  return (</div><div class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">onSubmit</span>=<span class="value">{this.handleSubmit}</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ref</span>=<span class="value">"name_input"</span> <span class="attribute">placeholder</span>=<span class="value">"Input a name here"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">  );</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>而 <code>handleSubmit()</code> 函数调用了父节点 GreetingWidget 传进来的回调函数 <code>onNameSubmit()</code> 函数，并传入本节点的输入框控件的值作为 <code>name</code> 参数：</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">handleSubmit: function(e) {</div><div class="line">  e.preventDefault();</div><div class="line">  var name = this.refs.name_input.value;</div><div class="line">  if (!name) {</div><div class="line">    return;</div><div class="line">  }</div><div class="line">  this.props.onNameSubmit(name);</div><div class="line">  this.refs.name_input.value = "";</div><div class="line">  return;</div><div class="line">},</div></pre></td></tr></table></figure></p>
<p>注意在这里我们调用了 <code>preventDefault()</code> 来避免使用浏览器默认的行为提交表单。</p>
<ul>
<li>GreetingWidget 的 <code>onNameSubmit()</code> 回调函数指定使用 <code>handleNameSubmit()</code> 函数来处理，该函数接收子节点回传的 <code>name</code> 参数，并通过 <code>setState()</code> 方法追加到当前 <code>name_list</code> 列表中：</li>
</ul>
<p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">handleNameSubmit: <span class="function"><span class="keyword">function</span><span class="params">(name)</span> </span>{</div><div class="line">  <span class="keyword">var</span> names = <span class="keyword">this</span>.state.name_list;</div><div class="line">  names.push(name);</div><div class="line">  <span class="keyword">this</span>.setState({name_list: names});</div><div class="line">}</div></pre></td></tr></table></figure></p>
<ul>
<li>在 GreetingWidget 中，由于要处理用户输入，数据被定义为 State 。在调试工具中，点击根节点 GreetingWidget ，注意右侧数据区中的 name_list 是以 State 定义的：</li>
</ul>
<p><img src="/images/learn-react-native-for-android-02/multiple-comp-root.png" alt=""></p>
<p>而传给 NameList 的数据只用来展示，所以可以定义为 Props 。在调试工具中，点击 NameList 子节点，注意右侧数据区中的 name_list 是以 Prop 定义的：</p>
<p><img src="/images/learn-react-native-for-android-02/multiple-comp-sub.png" alt=""></p>
<h4 id="扩展练习-v5">扩展练习</h4>
<ol>
<li>试试移除第 34 行 <code>e.preventDefault();</code> 重新提交下数据，看看有什么变化；</li>
<li>给我们的页面元素添加样式，注意在 JSX 中指定页面元素 css 属性应该使用 <code>className</code> 属性。详见 <a href="http://facebook.github.io/react/docs/tags-and-attributes.html#supported-attributes" target="_blank" rel="external">Supported Attributes</a> 。</li>
<li>使用单向数据绑定是 React 保持简单的一个重要体现。如果确实需要双向数据绑定，从子节点返回数据给父节点，可以考虑使用 <a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html" target="_blank" rel="external">ReactLink</a> 。阅读官方文档关于 <a href="http://facebook.github.io/react/docs/two-way-binding-helpers.html" target="_blank" rel="external">ReactLink</a> 的介绍，并尝试使用 ReactLink 取代回调的方式重新实现本节的例子。</li>
</ol>
<h2 id="补遗">补遗</h2>
<p>本文从例子入手，一步步介绍了 JSX 、组件、属性、状态、数据展示、表单处理、复合组件等 React 开发中的基础概念，在其中存在的一些坑和值得深究的东西也尽量以扩展练习的形式交给读者主动去学习掌握。</p>
<p>受限于篇幅关系，本文所介绍的内容主要是为了后续学习 React Native 做准备，而不足以囊括 React 开发基础的所有方面。例如：</p>
<ol>
<li>没有深入探讨<a href="http://facebook.github.io/react/docs/component-specs.html" target="_blank" rel="external">组件的生存周期</a>；</li>
<li>没有介绍 <a href="http://facebook.github.io/react/docs/reusable-components.html#mixins" target="_blank" rel="external">Mixins</a> 和如何用它来编写可复用组件；</li>
<li>没有引入与 Ajax 结合的网络编程；</li>
<li>没有介绍 <a href="https://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>/<a href="http://segmentfault.com/a/1190000002793786?utm_source=tuicool" target="_blank" rel="external">Reflux</a>/<a href="https://github.com/graphql/graphql-js" target="_blank" rel="external">GraphQL</a>/<a href="http://www.oschina.net/p/relay" target="_blank" rel="external">Relay</a> 等数据处理库。</li>
</ol>
<p>如果希望继续深入学习 React 开发，在学习完本文之后，您可以继续阅读下面列举的资料：</p>
<ol>
<li>阅读 Starter Kit 中自带的所有官方例子的代码；</li>
<li>阅读 <a href="http://facebook.github.io/react/docs/tutorial.html" target="_blank" rel="external">官方教程</a> ，了解如何使用 React 和 Ajax 进行网络编程。</li>
<li>阅读上面提及的链接，补充学习本文所遗漏的内容。</li>
</ol>
<p>其它推荐的学习材料：</p>
<ol>
<li><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="external">Awesome-React 系列</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程 - 阮一峰</a></li>
<li><a href="http://vdisk.weibo.com/s/A0GI9rYbt9zQ" target="_blank" rel="external">QCon上海2015 - React 实战 - 王沛</a></li>
<li><a href="http://react-ecosys.weitie.co/" target="_blank" rel="external">QCon上海2015 - 探索 React 生态圈 - 郭达锋</a></li>
<li><a href="http://blog.zigomir.com/react.js/jquery/2015/01/11/jquery-versus-react-thinking.html" target="_blank" rel="external">jQuery versus React.js thinking - zigomir</a></li>
</ol>
]]></content>
    <category scheme="http://hahack.com/tags/React/" term="React"/>
    <category scheme="http://hahack.com/tags/Javascript/" term="Javascript"/>
    <category scheme="http://hahack.com/categories/codes/" term="codes"/>
  </entry>
</feed>
